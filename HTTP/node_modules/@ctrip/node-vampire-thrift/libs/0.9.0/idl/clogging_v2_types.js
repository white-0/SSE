//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
const InfinityLoop = true;

const Thrift = require('../thrift').Thrift;
let ttypes = module.exports = {};
ttypes.LogType = {
    'OTHER': 0,
    'APP': 1,
    'URL': 2,
    'WEB_SERVICE': 3,
    'SQL': 4,
    'MEMCACHED': 5
};
ttypes.SpanType = {
    'OTHER': 0,
    'URL': 1,
    'WEB_SERVICE': 2,
    'SQL': 3,
    'MEMCACHED': 4
};
ttypes.LogLevel = {
    'DEBUG': 0,
    'INFO': 1,
    'WARN': 2,
    'ERROR': 3,
    'FATAL': 4
};
ttypes.ServiceStatus = {
    'DEAD': 0,
    'STARTING': 1,
    'ALIVE': 2,
    'STOPPING': 3,
    'STOPPED': 4,
    'WARNING': 5
};
ttypes.ResultCode = {
    'SUCCESS': 0,
    'FAILURE': 1,
    'TRY_LATER': 2
};
ttypes.MetricValueType = {
    'TYPE_FLOAT': 0,
    'TYPE_LONG': 1
};
ttypes.CompressionType = {
    'NONE': 0,
    'DEFLATE': 1,
    'GZIP': 2,
    'SNAPPY': 3,
    'LZ4': 4
};
let Result = module.exports.Result = function(args) {
    this.resultCode = null;
    if (args) {
        if (args.resultCode !== undefined) {
            this.resultCode = args.resultCode;
        }
    }
};
Result.prototype = {};
Result.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.I32) {
                    this.resultCode = input.readI32();
                } else {
                    input.skip(ftype);
                }
                break;
            case 0:
                input.skip(ftype);
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

Result.prototype.write = function(output) {
    output.writeStructBegin('Result');
    if (this.resultCode !== null && this.resultCode !== undefined) {
        output.writeFieldBegin('resultCode', Thrift.Type.I32, 1);
        output.writeI32(this.resultCode);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let LogEvent = module.exports.LogEvent = function(args) {
    this.id = null;
    this.logType = null;
    this.createdTime = null;
    this.threadId = null;
    this.traceId = null;
    this.logLevel = null;
    this.attributes = null;
    this.title = null;
    this.message = null;
    this.source = null;
    this.sequenceNo = null;
    this.route = null;
    this.spanId = null;
    if (args) {
        if (args.id !== undefined) {
            this.id = args.id;
        }
        if (args.logType !== undefined) {
            this.logType = args.logType;
        }
        if (args.createdTime !== undefined) {
            this.createdTime = args.createdTime;
        }
        if (args.threadId !== undefined) {
            this.threadId = args.threadId;
        }
        if (args.traceId !== undefined) {
            this.traceId = args.traceId;
        }
        if (args.logLevel !== undefined) {
            this.logLevel = args.logLevel;
        }
        if (args.attributes !== undefined) {
            this.attributes = args.attributes;
        }
        if (args.title !== undefined) {
            this.title = args.title;
        }
        if (args.message !== undefined) {
            this.message = args.message;
        }
        if (args.source !== undefined) {
            this.source = args.source;
        }
        if (args.sequenceNo !== undefined) {
            this.sequenceNo = args.sequenceNo;
        }
        if (args.route !== undefined) {
            this.route = args.route;
        }
        if (args.spanId !== undefined) {
            this.spanId = args.spanId;
        }
    }
};
LogEvent.prototype = {};
LogEvent.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.I64) {
                    this.id = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.I32) {
                    this.logType = input.readI32();
                } else {
                    input.skip(ftype);
                }
                break;
            case 3:
                if (ftype == Thrift.Type.I64) {
                    this.createdTime = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 4:
                if (ftype == Thrift.Type.I64) {
                    this.threadId = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 5:
                if (ftype == Thrift.Type.I64) {
                    this.traceId = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 6:
                if (ftype == Thrift.Type.I32) {
                    this.logLevel = input.readI32();
                } else {
                    input.skip(ftype);
                }
                break;
            case 7:
                if (ftype == Thrift.Type.MAP) {
                    let _size0 = 0;
                    let _rtmp34;
                    this.attributes = {};
                    // let _ktype1 = 0;
                    // let _vtype2 = 0;
                    _rtmp34 = input.readMapBegin();
                    // _ktype1 = _rtmp34.ktype;
                    // _vtype2 = _rtmp34.vtype;
                    _size0 = _rtmp34.size;
                    for (let _i5 = 0; _i5 < _size0; ++_i5) {
                        let key6 = null;
                        let val7 = null;
                        key6 = input.readString();
                        val7 = input.readString();
                        this.attributes[key6] = val7;
                    }
                    input.readMapEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 8:
                if (ftype == Thrift.Type.STRING) {
                    this.title = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 9:
                if (ftype == Thrift.Type.STRING) {
                    this.message = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 10:
                if (ftype == Thrift.Type.STRING) {
                    this.source = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 11:
                if (ftype == Thrift.Type.I64) {
                    this.sequenceNo = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 12:
                if (ftype == Thrift.Type.STRING) {
                    this.route = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 13:
                if (ftype == Thrift.Type.I64) {
                    this.spanId = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

LogEvent.prototype.write = function(output) {
    output.writeStructBegin('LogEvent');
    if (this.id !== null && this.id !== undefined) {
        output.writeFieldBegin('id', Thrift.Type.I64, 1);
        output.writeI64(this.id);
        output.writeFieldEnd();
    }
    if (this.logType !== null && this.logType !== undefined) {
        output.writeFieldBegin('logType', Thrift.Type.I32, 2);
        output.writeI32(this.logType);
        output.writeFieldEnd();
    }
    if (this.createdTime !== null && this.createdTime !== undefined) {
        output.writeFieldBegin('createdTime', Thrift.Type.I64, 3);
        output.writeI64(this.createdTime);
        output.writeFieldEnd();
    }
    if (this.threadId !== null && this.threadId !== undefined) {
        output.writeFieldBegin('threadId', Thrift.Type.I64, 4);
        output.writeI64(this.threadId);
        output.writeFieldEnd();
    }
    if (this.traceId !== null && this.traceId !== undefined) {
        output.writeFieldBegin('traceId', Thrift.Type.I64, 5);
        output.writeI64(this.traceId);
        output.writeFieldEnd();
    }
    if (this.logLevel !== null && this.logLevel !== undefined) {
        output.writeFieldBegin('logLevel', Thrift.Type.I32, 6);
        output.writeI32(this.logLevel);
        output.writeFieldEnd();
    }
    if (this.attributes !== null && this.attributes !== undefined) {
        output.writeFieldBegin('attributes', Thrift.Type.MAP, 7);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
        for (let kiter8 in this.attributes) {
            if (Object.prototype.hasOwnProperty.call(this.attributes, kiter8)) {
                let viter9 = this.attributes[kiter8];
                output.writeString(kiter8);
                output.writeString(viter9);
            }
        }
        output.writeMapEnd();
        output.writeFieldEnd();
    }
    if (this.title !== null && this.title !== undefined) {
        output.writeFieldBegin('title', Thrift.Type.STRING, 8);
        output.writeString(this.title);
        output.writeFieldEnd();
    }
    if (this.message !== null && this.message !== undefined) {
        output.writeFieldBegin('message', Thrift.Type.STRING, 9);
        output.writeString(this.message);
        output.writeFieldEnd();
    }
    if (this.source !== null && this.source !== undefined) {
        output.writeFieldBegin('source', Thrift.Type.STRING, 10);
        output.writeString(this.source);
        output.writeFieldEnd();
    }
    if (this.sequenceNo !== null && this.sequenceNo !== undefined) {
        output.writeFieldBegin('sequenceNo', Thrift.Type.I64, 11);
        output.writeI64(this.sequenceNo);
        output.writeFieldEnd();
    }
    if (this.route !== null && this.route !== undefined) {
        output.writeFieldBegin('route', Thrift.Type.STRING, 12);
        output.writeString(this.route);
        output.writeFieldEnd();
    }
    if (this.spanId !== null && this.spanId !== undefined) {
        output.writeFieldBegin('spanId', Thrift.Type.I64, 13);
        output.writeI64(this.spanId);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let MetricEvent = module.exports.MetricEvent = function(args) {
    this.createdTime = null;
    this.name = null;
    this.value = null;
    this.valueType = null;
    this.tags = null;
    this.sequenceNo = null;
    this.route = null;
    if (args) {
        if (args.createdTime !== undefined) {
            this.createdTime = args.createdTime;
        }
        if (args.name !== undefined) {
            this.name = args.name;
        }
        if (args.value !== undefined) {
            this.value = args.value;
        }
        if (args.valueType !== undefined) {
            this.valueType = args.valueType;
        }
        if (args.tags !== undefined) {
            this.tags = args.tags;
        }
        if (args.sequenceNo !== undefined) {
            this.sequenceNo = args.sequenceNo;
        }
        if (args.route !== undefined) {
            this.route = args.route;
        }
    }
};
MetricEvent.prototype = {};
MetricEvent.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.I64) {
                    this.createdTime = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.STRING) {
                    this.name = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 3:
                if (ftype == Thrift.Type.STRING) {
                    this.value = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 4:
                if (ftype == Thrift.Type.I32) {
                    this.valueType = input.readI32();
                } else {
                    input.skip(ftype);
                }
                break;
            case 5:
                if (ftype == Thrift.Type.SET) {
                    let _size10 = 0;
                    let _rtmp314;
                    this.tags = [];
                    // let _etype13 = 0;
                    _rtmp314 = input.readSetBegin();
                    // _etype13 = _rtmp314.etype;
                    _size10 = _rtmp314.size;
                    for (let _i15 = 0; _i15 < _size10; ++_i15) {
                        let elem16 = null;
                        elem16 = input.readString();
                        this.tags.push(elem16);
                    }
                    input.readSetEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 6:
                if (ftype == Thrift.Type.I64) {
                    this.sequenceNo = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 7:
                if (ftype == Thrift.Type.STRING) {
                    this.route = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

MetricEvent.prototype.write = function(output) {
    output.writeStructBegin('MetricEvent');
    if (this.createdTime !== null && this.createdTime !== undefined) {
        output.writeFieldBegin('createdTime', Thrift.Type.I64, 1);
        output.writeI64(this.createdTime);
        output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
        output.writeFieldBegin('name', Thrift.Type.STRING, 2);
        output.writeString(this.name);
        output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
        output.writeFieldBegin('value', Thrift.Type.STRING, 3);
        output.writeString(this.value);
        output.writeFieldEnd();
    }
    if (this.valueType !== null && this.valueType !== undefined) {
        output.writeFieldBegin('valueType', Thrift.Type.I32, 4);
        output.writeI32(this.valueType);
        output.writeFieldEnd();
    }
    if (this.tags !== null && this.tags !== undefined) {
        output.writeFieldBegin('tags', Thrift.Type.SET, 5);
        output.writeSetBegin(Thrift.Type.STRING, this.tags.length);
        for (let iter17 in this.tags) {
            if (Object.prototype.hasOwnProperty.call(this.tags, iter17)) {
                iter17 = this.tags[iter17];
                output.writeString(iter17);
            }
        }
        output.writeSetEnd();
        output.writeFieldEnd();
    }
    if (this.sequenceNo !== null && this.sequenceNo !== undefined) {
        output.writeFieldBegin('sequenceNo', Thrift.Type.I64, 6);
        output.writeI64(this.sequenceNo);
        output.writeFieldEnd();
    }
    if (this.route !== null && this.route !== undefined) {
        output.writeFieldBegin('route', Thrift.Type.STRING, 7);
        output.writeString(this.route);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let MetricEventV2 = module.exports.MetricEventV2 = function(args) {
    this.createdTime = null;
    this.name = null;
    this.value = null;
    this.valueType = null;
    this.tags = null;
    this.sequenceNo = null;
    this.route = null;
    this.aggregateType = null;
    if (args) {
        if (args.createdTime !== undefined) {
            this.createdTime = args.createdTime;
        }
        if (args.name !== undefined) {
            this.name = args.name;
        }
        if (args.value !== undefined) {
            this.value = args.value;
        }
        if (args.valueType !== undefined) {
            this.valueType = args.valueType;
        }
        if (args.tags !== undefined) {
            this.tags = args.tags;
        }
        if (args.sequenceNo !== undefined) {
            this.sequenceNo = args.sequenceNo;
        }
        if (args.route !== undefined) {
            this.route = args.route;
        }
        if (args.aggregateType !== undefined) {
            this.aggregateType = args.aggregateType;
        }
    }
};
MetricEventV2.prototype = {};
MetricEventV2.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.I64) {
                    this.createdTime = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.STRING) {
                    this.name = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 3:
                if (ftype == Thrift.Type.I64) {
                    this.value = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 4:
                if (ftype == Thrift.Type.I32) {
                    this.valueType = input.readI32();
                } else {
                    input.skip(ftype);
                }
                break;
            case 5:
                if (ftype == Thrift.Type.MAP) {
                    let _size18 = 0;
                    let _rtmp322;
                    this.tags = {};
                    // let _ktype19 = 0;
                    // let _vtype20 = 0;
                    _rtmp322 = input.readMapBegin();
                    // _ktype19 = _rtmp322.ktype;
                    // _vtype20 = _rtmp322.vtype;
                    _size18 = _rtmp322.size;
                    for (let _i23 = 0; _i23 < _size18; ++_i23) {
                        let key24 = null;
                        let val25 = null;
                        key24 = input.readString();
                        val25 = input.readString();
                        this.tags[key24] = val25;
                    }
                    input.readMapEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 6:
                if (ftype == Thrift.Type.I64) {
                    this.sequenceNo = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 7:
                if (ftype == Thrift.Type.STRING) {
                    this.route = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 8:
                if (ftype == Thrift.Type.BYTE) {
                    this.aggregateType = input.readByte();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

MetricEventV2.prototype.write = function(output) {
    output.writeStructBegin('MetricEventV2');
    if (this.createdTime !== null && this.createdTime !== undefined) {
        output.writeFieldBegin('createdTime', Thrift.Type.I64, 1);
        output.writeI64(this.createdTime);
        output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
        output.writeFieldBegin('name', Thrift.Type.STRING, 2);
        output.writeString(this.name);
        output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
        output.writeFieldBegin('value', Thrift.Type.I64, 3);
        output.writeI64(this.value);
        output.writeFieldEnd();
    }
    if (this.valueType !== null && this.valueType !== undefined) {
        output.writeFieldBegin('valueType', Thrift.Type.I32, 4);
        output.writeI32(this.valueType);
        output.writeFieldEnd();
    }
    if (this.tags !== null && this.tags !== undefined) {
        output.writeFieldBegin('tags', Thrift.Type.MAP, 5);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.tags));
        for (let kiter26 in this.tags) {
            if (Object.prototype.hasOwnProperty.call(this.tags, kiter26)) {
                let viter27 = this.tags[kiter26];
                output.writeString(kiter26);
                output.writeString(viter27);
            }
        }
        output.writeMapEnd();
        output.writeFieldEnd();
    }
    if (this.sequenceNo !== null && this.sequenceNo !== undefined) {
        output.writeFieldBegin('sequenceNo', Thrift.Type.I64, 6);
        output.writeI64(this.sequenceNo);
        output.writeFieldEnd();
    }
    if (this.route !== null && this.route !== undefined) {
        output.writeFieldBegin('route', Thrift.Type.STRING, 7);
        output.writeString(this.route);
        output.writeFieldEnd();
    }
    if (this.aggregateType !== null && this.aggregateType !== undefined) {
        output.writeFieldBegin('aggregateType', Thrift.Type.BYTE, 8);
        output.writeByte(this.aggregateType);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let Span = module.exports.Span = function(args) {
    this.name = null;
    this.serviceName = null;
    this.hostIp = null;
    this.spanType = null;
    this.traceId = null;
    this.spanId = null;
    this.parentId = null;
    this.startTime = null;
    this.stopTime = null;
    this.logEvents = null;
    this.unfinished = null;
    this.threadId = null;
    this.sequenceNo = null;
    this.route = null;
    this.attributes = null;
    this.appId = null;
    this.hostName = null;
    this.processId = null;
    if (args) {
        if (args.name !== undefined) {
            this.name = args.name;
        }
        if (args.serviceName !== undefined) {
            this.serviceName = args.serviceName;
        }
        if (args.hostIp !== undefined) {
            this.hostIp = args.hostIp;
        }
        if (args.spanType !== undefined) {
            this.spanType = args.spanType;
        }
        if (args.traceId !== undefined) {
            this.traceId = args.traceId;
        }
        if (args.spanId !== undefined) {
            this.spanId = args.spanId;
        }
        if (args.parentId !== undefined) {
            this.parentId = args.parentId;
        }
        if (args.startTime !== undefined) {
            this.startTime = args.startTime;
        }
        if (args.stopTime !== undefined) {
            this.stopTime = args.stopTime;
        }
        if (args.logEvents !== undefined) {
            this.logEvents = args.logEvents;
        }
        if (args.unfinished !== undefined) {
            this.unfinished = args.unfinished;
        }
        if (args.threadId !== undefined) {
            this.threadId = args.threadId;
        }
        if (args.sequenceNo !== undefined) {
            this.sequenceNo = args.sequenceNo;
        }
        if (args.route !== undefined) {
            this.route = args.route;
        }
        if (args.attributes !== undefined) {
            this.attributes = args.attributes;
        }
        if (args.appId !== undefined) {
            this.appId = args.appId;
        }
        if (args.hostName !== undefined) {
            this.hostName = args.hostName;
        }
        if (args.processId !== undefined) {
            this.processId = args.processId;
        }
    }
};
Span.prototype = {};
Span.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRING) {
                    this.name = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.STRING) {
                    this.serviceName = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 3:
                if (ftype == Thrift.Type.STRING) {
                    this.hostIp = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 4:
                if (ftype == Thrift.Type.I32) {
                    this.spanType = input.readI32();
                } else {
                    input.skip(ftype);
                }
                break;
            case 5:
                if (ftype == Thrift.Type.I64) {
                    this.traceId = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 6:
                if (ftype == Thrift.Type.I64) {
                    this.spanId = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 7:
                if (ftype == Thrift.Type.I64) {
                    this.parentId = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 8:
                if (ftype == Thrift.Type.I64) {
                    this.startTime = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 9:
                if (ftype == Thrift.Type.I64) {
                    this.stopTime = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 10:
                if (ftype == Thrift.Type.LIST) {
                    let _size28 = 0;
                    let _rtmp332;
                    this.logEvents = [];
                    // let _etype31 = 0;
                    _rtmp332 = input.readListBegin();
                    // _etype31 = _rtmp332.etype;
                    _size28 = _rtmp332.size;
                    for (let _i33 = 0; _i33 < _size28; ++_i33) {
                        let elem34 = null;
                        elem34 = new ttypes.LogEvent();
                        elem34.read(input);
                        this.logEvents.push(elem34);
                    }
                    input.readListEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 11:
                if (ftype == Thrift.Type.BOOL) {
                    this.unfinished = input.readBool();
                } else {
                    input.skip(ftype);
                }
                break;
            case 12:
                if (ftype == Thrift.Type.I64) {
                    this.threadId = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 13:
                if (ftype == Thrift.Type.I64) {
                    this.sequenceNo = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 14:
                if (ftype == Thrift.Type.STRING) {
                    this.route = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 15:
                if (ftype == Thrift.Type.MAP) {
                    let _size35 = 0;
                    let _rtmp339;
                    this.attributes = {};
                    // let _ktype36 = 0;
                    // let _vtype37 = 0;
                    _rtmp339 = input.readMapBegin();
                    // _ktype36 = _rtmp339.ktype;
                    // _vtype37 = _rtmp339.vtype;
                    _size35 = _rtmp339.size;
                    for (let _i40 = 0; _i40 < _size35; ++_i40) {
                        let key41 = null;
                        let val42 = null;
                        key41 = input.readString();
                        val42 = input.readString();
                        this.attributes[key41] = val42;
                    }
                    input.readMapEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 16:
                if (ftype == Thrift.Type.STRING) {
                    this.appId = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 17:
                if (ftype == Thrift.Type.STRING) {
                    this.hostName = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 18:
                if (ftype == Thrift.Type.I64) {
                    this.processId = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

Span.prototype.write = function(output) {
    output.writeStructBegin('Span');
    if (this.name !== null && this.name !== undefined) {
        output.writeFieldBegin('name', Thrift.Type.STRING, 1);
        output.writeString(this.name);
        output.writeFieldEnd();
    }
    if (this.serviceName !== null && this.serviceName !== undefined) {
        output.writeFieldBegin('serviceName', Thrift.Type.STRING, 2);
        output.writeString(this.serviceName);
        output.writeFieldEnd();
    }
    if (this.hostIp !== null && this.hostIp !== undefined) {
        output.writeFieldBegin('hostIp', Thrift.Type.STRING, 3);
        output.writeString(this.hostIp);
        output.writeFieldEnd();
    }
    if (this.spanType !== null && this.spanType !== undefined) {
        output.writeFieldBegin('spanType', Thrift.Type.I32, 4);
        output.writeI32(this.spanType);
        output.writeFieldEnd();
    }
    if (this.traceId !== null && this.traceId !== undefined) {
        output.writeFieldBegin('traceId', Thrift.Type.I64, 5);
        output.writeI64(this.traceId);
        output.writeFieldEnd();
    }
    if (this.spanId !== null && this.spanId !== undefined) {
        output.writeFieldBegin('spanId', Thrift.Type.I64, 6);
        output.writeI64(this.spanId);
        output.writeFieldEnd();
    }
    if (this.parentId !== null && this.parentId !== undefined) {
        output.writeFieldBegin('parentId', Thrift.Type.I64, 7);
        output.writeI64(this.parentId);
        output.writeFieldEnd();
    }
    if (this.startTime !== null && this.startTime !== undefined) {
        output.writeFieldBegin('startTime', Thrift.Type.I64, 8);
        output.writeI64(this.startTime);
        output.writeFieldEnd();
    }
    if (this.stopTime !== null && this.stopTime !== undefined) {
        output.writeFieldBegin('stopTime', Thrift.Type.I64, 9);
        output.writeI64(this.stopTime);
        output.writeFieldEnd();
    }
    if (this.logEvents !== null && this.logEvents !== undefined) {
        output.writeFieldBegin('logEvents', Thrift.Type.LIST, 10);
        output.writeListBegin(Thrift.Type.STRUCT, this.logEvents.length);
        for (let iter43 in this.logEvents) {
            if (Object.prototype.hasOwnProperty.call(this.logEvents, iter43)) {
                iter43 = this.logEvents[iter43];
                iter43.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.unfinished !== null && this.unfinished !== undefined) {
        output.writeFieldBegin('unfinished', Thrift.Type.BOOL, 11);
        output.writeBool(this.unfinished);
        output.writeFieldEnd();
    }
    if (this.threadId !== null && this.threadId !== undefined) {
        output.writeFieldBegin('threadId', Thrift.Type.I64, 12);
        output.writeI64(this.threadId);
        output.writeFieldEnd();
    }
    if (this.sequenceNo !== null && this.sequenceNo !== undefined) {
        output.writeFieldBegin('sequenceNo', Thrift.Type.I64, 13);
        output.writeI64(this.sequenceNo);
        output.writeFieldEnd();
    }
    if (this.route !== null && this.route !== undefined) {
        output.writeFieldBegin('route', Thrift.Type.STRING, 14);
        output.writeString(this.route);
        output.writeFieldEnd();
    }
    if (this.attributes !== null && this.attributes !== undefined) {
        output.writeFieldBegin('attributes', Thrift.Type.MAP, 15);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
        for (let kiter44 in this.attributes) {
            if (Object.prototype.hasOwnProperty.call(this.attributes, kiter44)) {
                let viter45 = this.attributes[kiter44];
                output.writeString(kiter44);
                output.writeString(viter45);
            }
        }
        output.writeMapEnd();
        output.writeFieldEnd();
    }
    if (this.appId !== null && this.appId !== undefined) {
        output.writeFieldBegin('appId', Thrift.Type.STRING, 16);
        output.writeString(this.appId);
        output.writeFieldEnd();
    }
    if (this.hostName !== null && this.hostName !== undefined) {
        output.writeFieldBegin('hostName', Thrift.Type.STRING, 17);
        output.writeString(this.hostName);
        output.writeFieldEnd();
    }
    if (this.processId !== null && this.processId !== undefined) {
        output.writeFieldBegin('processId', Thrift.Type.I64, 18);
        output.writeI64(this.processId);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let Attributes = module.exports.Attributes = function(args) {
    this.key = null;
    this.value = null;
    if (args) {
        if (args.key !== undefined) {
            this.key = args.key;
        }
        if (args.value !== undefined) {
            this.value = args.value;
        }
    }
};
Attributes.prototype = {};
Attributes.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRING) {
                    this.key = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.STRING) {
                    this.value = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

Attributes.prototype.write = function(output) {
    output.writeStructBegin('Attributes');
    if (this.key !== null && this.key !== undefined) {
        output.writeFieldBegin('key', Thrift.Type.STRING, 1);
        output.writeString(this.key);
        output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
        output.writeFieldBegin('value', Thrift.Type.STRING, 2);
        output.writeString(this.value);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let Event = module.exports.Event = function(args) {
    this.nameSpace = null;
    this.name = null;
    this.time = null;
    this.attributes = null;
    this.sequenceNo = null;
    this.route = null;
    if (args) {
        if (args.nameSpace !== undefined) {
            this.nameSpace = args.nameSpace;
        }
        if (args.name !== undefined) {
            this.name = args.name;
        }
        if (args.time !== undefined) {
            this.time = args.time;
        }
        if (args.attributes !== undefined) {
            this.attributes = args.attributes;
        }
        if (args.sequenceNo !== undefined) {
            this.sequenceNo = args.sequenceNo;
        }
        if (args.route !== undefined) {
            this.route = args.route;
        }
    }
};
Event.prototype = {};
Event.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRING) {
                    this.nameSpace = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.STRING) {
                    this.name = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 3:
                if (ftype == Thrift.Type.I64) {
                    this.time = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 4:
                if (ftype == Thrift.Type.LIST) {
                    let _size46 = 0;
                    let _rtmp350;
                    this.attributes = [];
                    // let _etype49 = 0;
                    _rtmp350 = input.readListBegin();
                    // _etype49 = _rtmp350.etype;
                    _size46 = _rtmp350.size;
                    for (let _i51 = 0; _i51 < _size46; ++_i51) {
                        let elem52 = null;
                        elem52 = new ttypes.Attributes();
                        elem52.read(input);
                        this.attributes.push(elem52);
                    }
                    input.readListEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 5:
                if (ftype == Thrift.Type.I64) {
                    this.sequenceNo = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 6:
                if (ftype == Thrift.Type.STRING) {
                    this.route = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

Event.prototype.write = function(output) {
    output.writeStructBegin('Event');
    if (this.nameSpace !== null && this.nameSpace !== undefined) {
        output.writeFieldBegin('nameSpace', Thrift.Type.STRING, 1);
        output.writeString(this.nameSpace);
        output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
        output.writeFieldBegin('name', Thrift.Type.STRING, 2);
        output.writeString(this.name);
        output.writeFieldEnd();
    }
    if (this.time !== null && this.time !== undefined) {
        output.writeFieldBegin('time', Thrift.Type.I64, 3);
        output.writeI64(this.time);
        output.writeFieldEnd();
    }
    if (this.attributes !== null && this.attributes !== undefined) {
        output.writeFieldBegin('attributes', Thrift.Type.LIST, 4);
        output.writeListBegin(Thrift.Type.STRUCT, this.attributes.length);
        for (let iter53 in this.attributes) {
            if (Object.prototype.hasOwnProperty.call(this.attributes, iter53)) {
                iter53 = this.attributes[iter53];
                iter53.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.sequenceNo !== null && this.sequenceNo !== undefined) {
        output.writeFieldBegin('sequenceNo', Thrift.Type.I64, 5);
        output.writeI64(this.sequenceNo);
        output.writeFieldEnd();
    }
    if (this.route !== null && this.route !== undefined) {
        output.writeFieldBegin('route', Thrift.Type.STRING, 6);
        output.writeString(this.route);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let Chunk = module.exports.Chunk = function(args) {
    this.hostIp = null;
    this.hostName = null;
    this.appId = null;
    this.processId = null;
    this.logEvents = null;
    this.spans = null;
    this.metrics = null;
    this.events = null;
    this.sequenceNo = null;
    this.route = null;
    if (args) {
        if (args.hostIp !== undefined) {
            this.hostIp = args.hostIp;
        }
        if (args.hostName !== undefined) {
            this.hostName = args.hostName;
        }
        if (args.appId !== undefined) {
            this.appId = args.appId;
        }
        if (args.processId !== undefined) {
            this.processId = args.processId;
        }
        if (args.logEvents !== undefined) {
            this.logEvents = args.logEvents;
        }
        if (args.spans !== undefined) {
            this.spans = args.spans;
        }
        if (args.metrics !== undefined) {
            this.metrics = args.metrics;
        }
        if (args.events !== undefined) {
            this.events = args.events;
        }
        if (args.sequenceNo !== undefined) {
            this.sequenceNo = args.sequenceNo;
        }
        if (args.route !== undefined) {
            this.route = args.route;
        }
    }
};
Chunk.prototype = {};
Chunk.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRING) {
                    this.hostIp = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.STRING) {
                    this.hostName = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 4:
                if (ftype == Thrift.Type.STRING) {
                    this.appId = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 5:
                if (ftype == Thrift.Type.I64) {
                    this.processId = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 6:
                if (ftype == Thrift.Type.LIST) {
                    let _size54 = 0;
                    let _rtmp358;
                    this.logEvents = [];
                    // let _etype57 = 0;
                    _rtmp358 = input.readListBegin();
                    // _etype57 = _rtmp358.etype;
                    _size54 = _rtmp358.size;
                    for (let _i59 = 0; _i59 < _size54; ++_i59) {
                        let elem60 = null;
                        elem60 = new ttypes.LogEvent();
                        elem60.read(input);
                        this.logEvents.push(elem60);
                    }
                    input.readListEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 7:
                if (ftype == Thrift.Type.LIST) {
                    let _size61 = 0;
                    let _rtmp365;
                    this.spans = [];
                    // let _etype64 = 0;
                    _rtmp365 = input.readListBegin();
                    // _etype64 = _rtmp365.etype;
                    _size61 = _rtmp365.size;
                    for (let _i66 = 0; _i66 < _size61; ++_i66) {
                        let elem67 = null;
                        elem67 = new ttypes.Span();
                        elem67.read(input);
                        this.spans.push(elem67);
                    }
                    input.readListEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 8:
                if (ftype == Thrift.Type.LIST) {
                    let _size68 = 0;
                    let _rtmp372;
                    this.metrics = [];
                    // let _etype71 = 0;
                    _rtmp372 = input.readListBegin();
                    // _etype71 = _rtmp372.etype;
                    _size68 = _rtmp372.size;
                    for (let _i73 = 0; _i73 < _size68; ++_i73) {
                        let elem74 = null;
                        elem74 = new ttypes.MetricEvent();
                        elem74.read(input);
                        this.metrics.push(elem74);
                    }
                    input.readListEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 9:
                if (ftype == Thrift.Type.LIST) {
                    let _size75 = 0;
                    let _rtmp379;
                    this.events = [];
                    // let _etype78 = 0;
                    _rtmp379 = input.readListBegin();
                    // _etype78 = _rtmp379.etype;
                    _size75 = _rtmp379.size;
                    for (let _i80 = 0; _i80 < _size75; ++_i80) {
                        let elem81 = null;
                        elem81 = new ttypes.Event();
                        elem81.read(input);
                        this.events.push(elem81);
                    }
                    input.readListEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 10:
                if (ftype == Thrift.Type.I64) {
                    this.sequenceNo = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 11:
                if (ftype == Thrift.Type.STRING) {
                    this.route = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

Chunk.prototype.write = function(output) {
    output.writeStructBegin('Chunk');
    if (this.hostIp !== null && this.hostIp !== undefined) {
        output.writeFieldBegin('hostIp', Thrift.Type.STRING, 1);
        output.writeString(this.hostIp);
        output.writeFieldEnd();
    }
    if (this.hostName !== null && this.hostName !== undefined) {
        output.writeFieldBegin('hostName', Thrift.Type.STRING, 2);
        output.writeString(this.hostName);
        output.writeFieldEnd();
    }
    if (this.appId !== null && this.appId !== undefined) {
        output.writeFieldBegin('appId', Thrift.Type.STRING, 4);
        output.writeString(this.appId);
        output.writeFieldEnd();
    }
    if (this.processId !== null && this.processId !== undefined) {
        output.writeFieldBegin('processId', Thrift.Type.I64, 5);
        output.writeI64(this.processId);
        output.writeFieldEnd();
    }
    if (this.logEvents !== null && this.logEvents !== undefined) {
        output.writeFieldBegin('logEvents', Thrift.Type.LIST, 6);
        output.writeListBegin(Thrift.Type.STRUCT, this.logEvents.length);
        for (let iter82 in this.logEvents) {
            if (Object.prototype.hasOwnProperty.call(this.logEvents, iter82)) {
                iter82 = this.logEvents[iter82];
                iter82.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.spans !== null && this.spans !== undefined) {
        output.writeFieldBegin('spans', Thrift.Type.LIST, 7);
        output.writeListBegin(Thrift.Type.STRUCT, this.spans.length);
        for (let iter83 in this.spans) {
            if (Object.prototype.hasOwnProperty.call(this.spans, iter83)) {
                iter83 = this.spans[iter83];
                iter83.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.metrics !== null && this.metrics !== undefined) {
        output.writeFieldBegin('metrics', Thrift.Type.LIST, 8);
        output.writeListBegin(Thrift.Type.STRUCT, this.metrics.length);
        for (let iter84 in this.metrics) {
            if (Object.prototype.hasOwnProperty.call(this.metrics, iter84)) {
                iter84 = this.metrics[iter84];
                iter84.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.events !== null && this.events !== undefined) {
        output.writeFieldBegin('events', Thrift.Type.LIST, 9);
        output.writeListBegin(Thrift.Type.STRUCT, this.events.length);
        for (let iter85 in this.events) {
            if (Object.prototype.hasOwnProperty.call(this.events, iter85)) {
                iter85 = this.events[iter85];
                iter85.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.sequenceNo !== null && this.sequenceNo !== undefined) {
        output.writeFieldBegin('sequenceNo', Thrift.Type.I64, 10);
        output.writeI64(this.sequenceNo);
        output.writeFieldEnd();
    }
    if (this.route !== null && this.route !== undefined) {
        output.writeFieldBegin('route', Thrift.Type.STRING, 11);
        output.writeString(this.route);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let ChunkV2 = module.exports.ChunkV2 = function(args) {
    this.hostIp = null;
    this.hostName = null;
    this.appId = null;
    this.processId = null;
    this.logEvents = null;
    this.spans = null;
    this.metrics = null;
    this.events = null;
    this.sequenceNo = null;
    this.route = null;
    if (args) {
        if (args.hostIp !== undefined) {
            this.hostIp = args.hostIp;
        }
        if (args.hostName !== undefined) {
            this.hostName = args.hostName;
        }
        if (args.appId !== undefined) {
            this.appId = args.appId;
        }
        if (args.processId !== undefined) {
            this.processId = args.processId;
        }
        if (args.logEvents !== undefined) {
            this.logEvents = args.logEvents;
        }
        if (args.spans !== undefined) {
            this.spans = args.spans;
        }
        if (args.metrics !== undefined) {
            this.metrics = args.metrics;
        }
        if (args.events !== undefined) {
            this.events = args.events;
        }
        if (args.sequenceNo !== undefined) {
            this.sequenceNo = args.sequenceNo;
        }
        if (args.route !== undefined) {
            this.route = args.route;
        }
    }
};
ChunkV2.prototype = {};
ChunkV2.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRING) {
                    this.hostIp = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.STRING) {
                    this.hostName = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 4:
                if (ftype == Thrift.Type.STRING) {
                    this.appId = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 5:
                if (ftype == Thrift.Type.I64) {
                    this.processId = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 6:
                if (ftype == Thrift.Type.LIST) {
                    let _size86 = 0;
                    let _rtmp390;
                    this.logEvents = [];
                    // let _etype89 = 0;
                    _rtmp390 = input.readListBegin();
                    // _etype89 = _rtmp390.etype;
                    _size86 = _rtmp390.size;
                    for (let _i91 = 0; _i91 < _size86; ++_i91) {
                        let elem92 = null;
                        elem92 = new ttypes.LogEvent();
                        elem92.read(input);
                        this.logEvents.push(elem92);
                    }
                    input.readListEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 7:
                if (ftype == Thrift.Type.LIST) {
                    let _size93 = 0;
                    let _rtmp397;
                    this.spans = [];
                    // let _etype96 = 0;
                    _rtmp397 = input.readListBegin();
                    // _etype96 = _rtmp397.etype;
                    _size93 = _rtmp397.size;
                    for (let _i98 = 0; _i98 < _size93; ++_i98) {
                        let elem99 = null;
                        elem99 = new ttypes.Span();
                        elem99.read(input);
                        this.spans.push(elem99);
                    }
                    input.readListEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 8:
                if (ftype == Thrift.Type.LIST) {
                    let _size100 = 0;
                    let _rtmp3104;
                    this.metrics = [];
                    // let _etype103 = 0;
                    _rtmp3104 = input.readListBegin();
                    // _etype103 = _rtmp3104.etype;
                    _size100 = _rtmp3104.size;
                    for (let _i105 = 0; _i105 < _size100; ++_i105) {
                        let elem106 = null;
                        elem106 = new ttypes.MetricEventV2();
                        elem106.read(input);
                        this.metrics.push(elem106);
                    }
                    input.readListEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 9:
                if (ftype == Thrift.Type.LIST) {
                    let _size107 = 0;
                    let _rtmp3111;
                    this.events = [];
                    // let _etype110 = 0;
                    _rtmp3111 = input.readListBegin();
                    // _etype110 = _rtmp3111.etype;
                    _size107 = _rtmp3111.size;
                    for (let _i112 = 0; _i112 < _size107; ++_i112) {
                        let elem113 = null;
                        elem113 = new ttypes.Event();
                        elem113.read(input);
                        this.events.push(elem113);
                    }
                    input.readListEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 10:
                if (ftype == Thrift.Type.I64) {
                    this.sequenceNo = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            case 11:
                if (ftype == Thrift.Type.STRING) {
                    this.route = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

ChunkV2.prototype.write = function(output) {
    output.writeStructBegin('ChunkV2');
    if (this.hostIp !== null && this.hostIp !== undefined) {
        output.writeFieldBegin('hostIp', Thrift.Type.STRING, 1);
        output.writeString(this.hostIp);
        output.writeFieldEnd();
    }
    if (this.hostName !== null && this.hostName !== undefined) {
        output.writeFieldBegin('hostName', Thrift.Type.STRING, 2);
        output.writeString(this.hostName);
        output.writeFieldEnd();
    }
    if (this.appId !== null && this.appId !== undefined) {
        output.writeFieldBegin('appId', Thrift.Type.STRING, 4);
        output.writeString(this.appId);
        output.writeFieldEnd();
    }
    if (this.processId !== null && this.processId !== undefined) {
        output.writeFieldBegin('processId', Thrift.Type.I64, 5);
        output.writeI64(this.processId);
        output.writeFieldEnd();
    }
    if (this.logEvents !== null && this.logEvents !== undefined) {
        output.writeFieldBegin('logEvents', Thrift.Type.LIST, 6);
        output.writeListBegin(Thrift.Type.STRUCT, this.logEvents.length);
        for (let iter114 in this.logEvents) {
            if (Object.prototype.hasOwnProperty.call(this.logEvents, iter114)) {
                iter114 = this.logEvents[iter114];
                iter114.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.spans !== null && this.spans !== undefined) {
        output.writeFieldBegin('spans', Thrift.Type.LIST, 7);
        output.writeListBegin(Thrift.Type.STRUCT, this.spans.length);
        for (let iter115 in this.spans) {
            if (Object.prototype.hasOwnProperty.call(this.spans, iter115)) {
                iter115 = this.spans[iter115];
                iter115.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.metrics !== null && this.metrics !== undefined) {
        output.writeFieldBegin('metrics', Thrift.Type.LIST, 8);
        output.writeListBegin(Thrift.Type.STRUCT, this.metrics.length);
        for (let iter116 in this.metrics) {
            if (Object.prototype.hasOwnProperty.call(this.metrics, iter116)) {
                iter116 = this.metrics[iter116];
                iter116.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.events !== null && this.events !== undefined) {
        output.writeFieldBegin('events', Thrift.Type.LIST, 9);
        output.writeListBegin(Thrift.Type.STRUCT, this.events.length);
        for (let iter117 in this.events) {
            if (Object.prototype.hasOwnProperty.call(this.events, iter117)) {
                iter117 = this.events[iter117];
                iter117.write(output);
            }
        }
        output.writeListEnd();
        output.writeFieldEnd();
    }
    if (this.sequenceNo !== null && this.sequenceNo !== undefined) {
        output.writeFieldBegin('sequenceNo', Thrift.Type.I64, 10);
        output.writeI64(this.sequenceNo);
        output.writeFieldEnd();
    }
    if (this.route !== null && this.route !== undefined) {
        output.writeFieldBegin('route', Thrift.Type.STRING, 11);
        output.writeString(this.route);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let AgentConfig = module.exports.AgentConfig = function(args) {
    this.appLogEnabled = null;
    this.appLogLevel = null;
    this.traceEnabled = null;
    this.traceLogLevel = null;
    this.flushPeriod = null;
    this.metricLogEnabled = null;
    this.urlLogSampleRate = null;
    this.maxMessageSize = null;
    this.eventEnabled = null;
    this.config = null;
    if (args) {
        if (args.appLogEnabled !== undefined) {
            this.appLogEnabled = args.appLogEnabled;
        }
        if (args.appLogLevel !== undefined) {
            this.appLogLevel = args.appLogLevel;
        }
        if (args.traceEnabled !== undefined) {
            this.traceEnabled = args.traceEnabled;
        }
        if (args.traceLogLevel !== undefined) {
            this.traceLogLevel = args.traceLogLevel;
        }
        if (args.flushPeriod !== undefined) {
            this.flushPeriod = args.flushPeriod;
        }
        if (args.metricLogEnabled !== undefined) {
            this.metricLogEnabled = args.metricLogEnabled;
        }
        if (args.urlLogSampleRate !== undefined) {
            this.urlLogSampleRate = args.urlLogSampleRate;
        }
        if (args.maxMessageSize !== undefined) {
            this.maxMessageSize = args.maxMessageSize;
        }
        if (args.eventEnabled !== undefined) {
            this.eventEnabled = args.eventEnabled;
        }
        if (args.config !== undefined) {
            this.config = args.config;
        }
    }
};
AgentConfig.prototype = {};
AgentConfig.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.BOOL) {
                    this.appLogEnabled = input.readBool();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.I32) {
                    this.appLogLevel = input.readI32();
                } else {
                    input.skip(ftype);
                }
                break;
            case 3:
                if (ftype == Thrift.Type.BOOL) {
                    this.traceEnabled = input.readBool();
                } else {
                    input.skip(ftype);
                }
                break;
            case 4:
                if (ftype == Thrift.Type.I32) {
                    this.traceLogLevel = input.readI32();
                } else {
                    input.skip(ftype);
                }
                break;
            case 5:
                if (ftype == Thrift.Type.I16) {
                    this.flushPeriod = input.readI16();
                } else {
                    input.skip(ftype);
                }
                break;
            case 6:
                if (ftype == Thrift.Type.BOOL) {
                    this.metricLogEnabled = input.readBool();
                } else {
                    input.skip(ftype);
                }
                break;
            case 7:
                if (ftype == Thrift.Type.DOUBLE) {
                    this.urlLogSampleRate = input.readDouble();
                } else {
                    input.skip(ftype);
                }
                break;
            case 8:
                if (ftype == Thrift.Type.I16) {
                    this.maxMessageSize = input.readI16();
                } else {
                    input.skip(ftype);
                }
                break;
            case 9:
                if (ftype == Thrift.Type.BOOL) {
                    this.eventEnabled = input.readBool();
                } else {
                    input.skip(ftype);
                }
                break;
            case 10:
                if (ftype == Thrift.Type.STRING) {
                    this.config = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

AgentConfig.prototype.write = function(output) {
    output.writeStructBegin('AgentConfig');
    if (this.appLogEnabled !== null && this.appLogEnabled !== undefined) {
        output.writeFieldBegin('appLogEnabled', Thrift.Type.BOOL, 1);
        output.writeBool(this.appLogEnabled);
        output.writeFieldEnd();
    }
    if (this.appLogLevel !== null && this.appLogLevel !== undefined) {
        output.writeFieldBegin('appLogLevel', Thrift.Type.I32, 2);
        output.writeI32(this.appLogLevel);
        output.writeFieldEnd();
    }
    if (this.traceEnabled !== null && this.traceEnabled !== undefined) {
        output.writeFieldBegin('traceEnabled', Thrift.Type.BOOL, 3);
        output.writeBool(this.traceEnabled);
        output.writeFieldEnd();
    }
    if (this.traceLogLevel !== null && this.traceLogLevel !== undefined) {
        output.writeFieldBegin('traceLogLevel', Thrift.Type.I32, 4);
        output.writeI32(this.traceLogLevel);
        output.writeFieldEnd();
    }
    if (this.flushPeriod !== null && this.flushPeriod !== undefined) {
        output.writeFieldBegin('flushPeriod', Thrift.Type.I16, 5);
        output.writeI16(this.flushPeriod);
        output.writeFieldEnd();
    }
    if (this.metricLogEnabled !== null && this.metricLogEnabled !== undefined) {
        output.writeFieldBegin('metricLogEnabled', Thrift.Type.BOOL, 6);
        output.writeBool(this.metricLogEnabled);
        output.writeFieldEnd();
    }
    if (this.urlLogSampleRate !== null && this.urlLogSampleRate !== undefined) {
        output.writeFieldBegin('urlLogSampleRate', Thrift.Type.DOUBLE, 7);
        output.writeDouble(this.urlLogSampleRate);
        output.writeFieldEnd();
    }
    if (this.maxMessageSize !== null && this.maxMessageSize !== undefined) {
        output.writeFieldBegin('maxMessageSize', Thrift.Type.I16, 8);
        output.writeI16(this.maxMessageSize);
        output.writeFieldEnd();
    }
    if (this.eventEnabled !== null && this.eventEnabled !== undefined) {
        output.writeFieldBegin('eventEnabled', Thrift.Type.BOOL, 9);
        output.writeBool(this.eventEnabled);
        output.writeFieldEnd();
    }
    if (this.config !== null && this.config !== undefined) {
        output.writeFieldBegin('config', Thrift.Type.STRING, 10);
        output.writeString(this.config);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let Sampler = module.exports.Sampler = function(args) {
    this.numerator = null;
    this.denominator = null;
    if (args) {
        if (args.numerator !== undefined) {
            this.numerator = args.numerator;
        }
        if (args.denominator !== undefined) {
            this.denominator = args.denominator;
        }
    }
};
Sampler.prototype = {};
Sampler.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.I32) {
                    this.numerator = input.readI32();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.I32) {
                    this.denominator = input.readI32();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

Sampler.prototype.write = function(output) {
    output.writeStructBegin('Sampler');
    if (this.numerator !== null && this.numerator !== undefined) {
        output.writeFieldBegin('numerator', Thrift.Type.I32, 1);
        output.writeI32(this.numerator);
        output.writeFieldEnd();
    }
    if (this.denominator !== null && this.denominator !== undefined) {
        output.writeFieldBegin('denominator', Thrift.Type.I32, 2);
        output.writeI32(this.denominator);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let LogSampler = module.exports.LogSampler = function(args) {
    this.appId = null;
    this.sourceSamplers = null;
    this.titleSamplers = null;
    this.tagSamplers = null;
    this.tags = null;
    this.titles = null;
    this.sources = null;
    if (args) {
        if (args.appId !== undefined) {
            this.appId = args.appId;
        }
        if (args.sourceSamplers !== undefined) {
            this.sourceSamplers = args.sourceSamplers;
        }
        if (args.titleSamplers !== undefined) {
            this.titleSamplers = args.titleSamplers;
        }
        if (args.tagSamplers !== undefined) {
            this.tagSamplers = args.tagSamplers;
        }
        if (args.tags !== undefined) {
            this.tags = args.tags;
        }
        if (args.titles !== undefined) {
            this.titles = args.titles;
        }
        if (args.sources !== undefined) {
            this.sources = args.sources;
        }
    }
};
LogSampler.prototype = {};
LogSampler.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRING) {
                    this.appId = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.MAP) {
                    let _size118 = 0;
                    let _rtmp3122;
                    this.sourceSamplers = {};
                    // let _ktype119 = 0;
                    // let _vtype120 = 0;
                    _rtmp3122 = input.readMapBegin();
                    // _ktype119 = _rtmp3122.ktype;
                    // _vtype120 = _rtmp3122.vtype;
                    _size118 = _rtmp3122.size;
                    for (let _i123 = 0; _i123 < _size118; ++_i123) {
                        let key124 = null;
                        let val125 = null;
                        key124 = input.readString();
                        val125 = new ttypes.Sampler();
                        val125.read(input);
                        this.sourceSamplers[key124] = val125;
                    }
                    input.readMapEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 3:
                if (ftype == Thrift.Type.MAP) {
                    let _size126 = 0;
                    let _rtmp3130;
                    this.titleSamplers = {};
                    // let _ktype127 = 0;
                    // let _vtype128 = 0;
                    _rtmp3130 = input.readMapBegin();
                    // _ktype127 = _rtmp3130.ktype;
                    // _vtype128 = _rtmp3130.vtype;
                    _size126 = _rtmp3130.size;
                    for (let _i131 = 0; _i131 < _size126; ++_i131) {
                        let key132 = null;
                        let val133 = null;
                        key132 = input.readString();
                        val133 = new ttypes.Sampler();
                        val133.read(input);
                        this.titleSamplers[key132] = val133;
                    }
                    input.readMapEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 4:
                if (ftype == Thrift.Type.MAP) {
                    let _size134 = 0;
                    let _rtmp3138;
                    this.tagSamplers = {};
                    // let _ktype135 = 0;
                    // let _vtype136 = 0;
                    _rtmp3138 = input.readMapBegin();
                    // _ktype135 = _rtmp3138.ktype;
                    // _vtype136 = _rtmp3138.vtype;
                    _size134 = _rtmp3138.size;
                    for (let _i139 = 0; _i139 < _size134; ++_i139) {
                        let key140 = null;
                        let val141 = null;
                        key140 = input.readString();
                        val141 = new ttypes.Sampler();
                        val141.read(input);
                        this.tagSamplers[key140] = val141;
                    }
                    input.readMapEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 5:
                if (ftype == Thrift.Type.SET) {
                    let _size142 = 0;
                    let _rtmp3146;
                    this.tags = [];
                    // let _etype145 = 0;
                    _rtmp3146 = input.readSetBegin();
                    // _etype145 = _rtmp3146.etype;
                    _size142 = _rtmp3146.size;
                    for (let _i147 = 0; _i147 < _size142; ++_i147) {
                        let elem148 = null;
                        elem148 = input.readString();
                        this.tags.push(elem148);
                    }
                    input.readSetEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 6:
                if (ftype == Thrift.Type.SET) {
                    let _size149 = 0;
                    let _rtmp3153;
                    this.titles = [];
                    // let _etype152 = 0;
                    _rtmp3153 = input.readSetBegin();
                    // _etype152 = _rtmp3153.etype;
                    _size149 = _rtmp3153.size;
                    for (let _i154 = 0; _i154 < _size149; ++_i154) {
                        let elem155 = null;
                        elem155 = input.readString();
                        this.titles.push(elem155);
                    }
                    input.readSetEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 7:
                if (ftype == Thrift.Type.SET) {
                    let _size156 = 0;
                    let _rtmp3160;
                    this.sources = [];
                    // let _etype159 = 0;
                    _rtmp3160 = input.readSetBegin();
                    // _etype159 = _rtmp3160.etype;
                    _size156 = _rtmp3160.size;
                    for (let _i161 = 0; _i161 < _size156; ++_i161) {
                        let elem162 = null;
                        elem162 = input.readString();
                        this.sources.push(elem162);
                    }
                    input.readSetEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

LogSampler.prototype.write = function(output) {
    output.writeStructBegin('LogSampler');
    if (this.appId !== null && this.appId !== undefined) {
        output.writeFieldBegin('appId', Thrift.Type.STRING, 1);
        output.writeString(this.appId);
        output.writeFieldEnd();
    }
    if (this.sourceSamplers !== null && this.sourceSamplers !== undefined) {
        output.writeFieldBegin('sourceSamplers', Thrift.Type.MAP, 2);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.sourceSamplers));
        for (let kiter163 in this.sourceSamplers) {
            if (Object.prototype.hasOwnProperty.call(this.sourceSamplers, kiter163)) {
                let viter164 = this.sourceSamplers[kiter163];
                output.writeString(kiter163);
                viter164.write(output);
            }
        }
        output.writeMapEnd();
        output.writeFieldEnd();
    }
    if (this.titleSamplers !== null && this.titleSamplers !== undefined) {
        output.writeFieldBegin('titleSamplers', Thrift.Type.MAP, 3);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.titleSamplers));
        for (let kiter165 in this.titleSamplers) {
            if (Object.prototype.hasOwnProperty.call(this.titleSamplers, kiter165)) {
                let viter166 = this.titleSamplers[kiter165];
                output.writeString(kiter165);
                viter166.write(output);
            }
        }
        output.writeMapEnd();
        output.writeFieldEnd();
    }
    if (this.tagSamplers !== null && this.tagSamplers !== undefined) {
        output.writeFieldBegin('tagSamplers', Thrift.Type.MAP, 4);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.tagSamplers));
        for (let kiter167 in this.tagSamplers) {
            if (Object.prototype.hasOwnProperty.call(this.tagSamplers, kiter167)) {
                let viter168 = this.tagSamplers[kiter167];
                output.writeString(kiter167);
                viter168.write(output);
            }
        }
        output.writeMapEnd();
        output.writeFieldEnd();
    }
    if (this.tags !== null && this.tags !== undefined) {
        output.writeFieldBegin('tags', Thrift.Type.SET, 5);
        output.writeSetBegin(Thrift.Type.STRING, this.tags.length);
        for (let iter169 in this.tags) {
            if (Object.prototype.hasOwnProperty.call(this.tags, iter169)) {
                iter169 = this.tags[iter169];
                output.writeString(iter169);
            }
        }
        output.writeSetEnd();
        output.writeFieldEnd();
    }
    if (this.titles !== null && this.titles !== undefined) {
        output.writeFieldBegin('titles', Thrift.Type.SET, 6);
        output.writeSetBegin(Thrift.Type.STRING, this.titles.length);
        for (let iter170 in this.titles) {
            if (Object.prototype.hasOwnProperty.call(this.titles, iter170)) {
                iter170 = this.titles[iter170];
                output.writeString(iter170);
            }
        }
        output.writeSetEnd();
        output.writeFieldEnd();
    }
    if (this.sources !== null && this.sources !== undefined) {
        output.writeFieldBegin('sources', Thrift.Type.SET, 7);
        output.writeSetBegin(Thrift.Type.STRING, this.sources.length);
        for (let iter171 in this.sources) {
            if (Object.prototype.hasOwnProperty.call(this.sources, iter171)) {
                iter171 = this.sources[iter171];
                output.writeString(iter171);
            }
        }
        output.writeSetEnd();
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let IgnoreMetricTags = module.exports.IgnoreMetricTags = function(args) {
    this.metricName = null;
    this.tags = null;
    if (args) {
        if (args.metricName !== undefined) {
            this.metricName = args.metricName;
        }
        if (args.tags !== undefined) {
            this.tags = args.tags;
        }
    }
};
IgnoreMetricTags.prototype = {};
IgnoreMetricTags.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRING) {
                    this.metricName = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.SET) {
                    let _size172 = 0;
                    let _rtmp3176;
                    this.tags = [];
                    // let _etype175 = 0;
                    _rtmp3176 = input.readSetBegin();
                    // _etype175 = _rtmp3176.etype;
                    _size172 = _rtmp3176.size;
                    for (let _i177 = 0; _i177 < _size172; ++_i177) {
                        let elem178 = null;
                        elem178 = input.readString();
                        this.tags.push(elem178);
                    }
                    input.readSetEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

IgnoreMetricTags.prototype.write = function(output) {
    output.writeStructBegin('IgnoreMetricTags');
    if (this.metricName !== null && this.metricName !== undefined) {
        output.writeFieldBegin('metricName', Thrift.Type.STRING, 1);
        output.writeString(this.metricName);
        output.writeFieldEnd();
    }
    if (this.tags !== null && this.tags !== undefined) {
        output.writeFieldBegin('tags', Thrift.Type.SET, 2);
        output.writeSetBegin(Thrift.Type.STRING, this.tags.length);
        for (let iter179 in this.tags) {
            if (Object.prototype.hasOwnProperty.call(this.tags, iter179)) {
                iter179 = this.tags[iter179];
                output.writeString(iter179);
            }
        }
        output.writeSetEnd();
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let AgentConfigV2 = module.exports.AgentConfigV2 = function(args) {
    this.appLogEnabled = null;
    this.appLogLevel = null;
    this.traceEnabled = null;
    this.traceLogLevel = null;
    this.flushPeriod = null;
    this.metricLogEnabled = null;
    this.urlLogSampleRate = null;
    this.maxMessageSize = null;
    this.eventEnabled = null;
    this.config = null;
    this.logSampler = null;
    this.metricsBlackList = null;
    this.ignoreMts = null;
    this.logDetailedCountAnalyzeEnable = null;
    this.shouldAggregateDelayMetrics = null;
    if (args) {
        if (args.appLogEnabled !== undefined) {
            this.appLogEnabled = args.appLogEnabled;
        }
        if (args.appLogLevel !== undefined) {
            this.appLogLevel = args.appLogLevel;
        }
        if (args.traceEnabled !== undefined) {
            this.traceEnabled = args.traceEnabled;
        }
        if (args.traceLogLevel !== undefined) {
            this.traceLogLevel = args.traceLogLevel;
        }
        if (args.flushPeriod !== undefined) {
            this.flushPeriod = args.flushPeriod;
        }
        if (args.metricLogEnabled !== undefined) {
            this.metricLogEnabled = args.metricLogEnabled;
        }
        if (args.urlLogSampleRate !== undefined) {
            this.urlLogSampleRate = args.urlLogSampleRate;
        }
        if (args.maxMessageSize !== undefined) {
            this.maxMessageSize = args.maxMessageSize;
        }
        if (args.eventEnabled !== undefined) {
            this.eventEnabled = args.eventEnabled;
        }
        if (args.config !== undefined) {
            this.config = args.config;
        }
        if (args.logSampler !== undefined) {
            this.logSampler = args.logSampler;
        }
        if (args.metricsBlackList !== undefined) {
            this.metricsBlackList = args.metricsBlackList;
        }
        if (args.ignoreMts !== undefined) {
            this.ignoreMts = args.ignoreMts;
        }
        if (args.logDetailedCountAnalyzeEnable !== undefined) {
            this.logDetailedCountAnalyzeEnable = args.logDetailedCountAnalyzeEnable;
        }
        if (args.shouldAggregateDelayMetrics !== undefined) {
            this.shouldAggregateDelayMetrics = args.shouldAggregateDelayMetrics;
        }
    }
};
AgentConfigV2.prototype = {};
AgentConfigV2.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.BOOL) {
                    this.appLogEnabled = input.readBool();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.I32) {
                    this.appLogLevel = input.readI32();
                } else {
                    input.skip(ftype);
                }
                break;
            case 3:
                if (ftype == Thrift.Type.BOOL) {
                    this.traceEnabled = input.readBool();
                } else {
                    input.skip(ftype);
                }
                break;
            case 4:
                if (ftype == Thrift.Type.I32) {
                    this.traceLogLevel = input.readI32();
                } else {
                    input.skip(ftype);
                }
                break;
            case 5:
                if (ftype == Thrift.Type.I16) {
                    this.flushPeriod = input.readI16();
                } else {
                    input.skip(ftype);
                }
                break;
            case 6:
                if (ftype == Thrift.Type.BOOL) {
                    this.metricLogEnabled = input.readBool();
                } else {
                    input.skip(ftype);
                }
                break;
            case 7:
                if (ftype == Thrift.Type.DOUBLE) {
                    this.urlLogSampleRate = input.readDouble();
                } else {
                    input.skip(ftype);
                }
                break;
            case 8:
                if (ftype == Thrift.Type.I16) {
                    this.maxMessageSize = input.readI16();
                } else {
                    input.skip(ftype);
                }
                break;
            case 9:
                if (ftype == Thrift.Type.BOOL) {
                    this.eventEnabled = input.readBool();
                } else {
                    input.skip(ftype);
                }
                break;
            case 10:
                if (ftype == Thrift.Type.STRING) {
                    this.config = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 11:
                if (ftype == Thrift.Type.STRUCT) {
                    this.logSampler = new ttypes.LogSampler();
                    this.logSampler.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            case 12:
                if (ftype == Thrift.Type.SET) {
                    let _size180 = 0;
                    let _rtmp3184;
                    this.metricsBlackList = [];
                    // let _etype183 = 0;
                    _rtmp3184 = input.readSetBegin();
                    // _etype183 = _rtmp3184.etype;
                    _size180 = _rtmp3184.size;
                    for (let _i185 = 0; _i185 < _size180; ++_i185) {
                        let elem186 = null;
                        elem186 = input.readString();
                        this.metricsBlackList.push(elem186);
                    }
                    input.readSetEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 13:
                if (ftype == Thrift.Type.SET) {
                    let _size187 = 0;
                    let _rtmp3191;
                    this.ignoreMts = [];
                    // let _etype190 = 0;
                    _rtmp3191 = input.readSetBegin();
                    // _etype190 = _rtmp3191.etype;
                    _size187 = _rtmp3191.size;
                    for (let _i192 = 0; _i192 < _size187; ++_i192) {
                        let elem193 = null;
                        elem193 = new ttypes.IgnoreMetricTags();
                        elem193.read(input);
                        this.ignoreMts.push(elem193);
                    }
                    input.readSetEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 14:
                if (ftype == Thrift.Type.BOOL) {
                    this.logDetailedCountAnalyzeEnable = input.readBool();
                } else {
                    input.skip(ftype);
                }
                break;
            case 15:
                if (ftype == Thrift.Type.SET) {
                    let _size194 = 0;
                    let _rtmp3198;
                    this.shouldAggregateDelayMetrics = [];
                    // let _etype197 = 0;
                    _rtmp3198 = input.readSetBegin();
                    // _etype197 = _rtmp3198.etype;
                    _size194 = _rtmp3198.size;
                    for (let _i199 = 0; _i199 < _size194; ++_i199) {
                        let elem200 = null;
                        elem200 = input.readString();
                        this.shouldAggregateDelayMetrics.push(elem200);
                    }
                    input.readSetEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

AgentConfigV2.prototype.write = function(output) {
    output.writeStructBegin('AgentConfigV2');
    if (this.appLogEnabled !== null && this.appLogEnabled !== undefined) {
        output.writeFieldBegin('appLogEnabled', Thrift.Type.BOOL, 1);
        output.writeBool(this.appLogEnabled);
        output.writeFieldEnd();
    }
    if (this.appLogLevel !== null && this.appLogLevel !== undefined) {
        output.writeFieldBegin('appLogLevel', Thrift.Type.I32, 2);
        output.writeI32(this.appLogLevel);
        output.writeFieldEnd();
    }
    if (this.traceEnabled !== null && this.traceEnabled !== undefined) {
        output.writeFieldBegin('traceEnabled', Thrift.Type.BOOL, 3);
        output.writeBool(this.traceEnabled);
        output.writeFieldEnd();
    }
    if (this.traceLogLevel !== null && this.traceLogLevel !== undefined) {
        output.writeFieldBegin('traceLogLevel', Thrift.Type.I32, 4);
        output.writeI32(this.traceLogLevel);
        output.writeFieldEnd();
    }
    if (this.flushPeriod !== null && this.flushPeriod !== undefined) {
        output.writeFieldBegin('flushPeriod', Thrift.Type.I16, 5);
        output.writeI16(this.flushPeriod);
        output.writeFieldEnd();
    }
    if (this.metricLogEnabled !== null && this.metricLogEnabled !== undefined) {
        output.writeFieldBegin('metricLogEnabled', Thrift.Type.BOOL, 6);
        output.writeBool(this.metricLogEnabled);
        output.writeFieldEnd();
    }
    if (this.urlLogSampleRate !== null && this.urlLogSampleRate !== undefined) {
        output.writeFieldBegin('urlLogSampleRate', Thrift.Type.DOUBLE, 7);
        output.writeDouble(this.urlLogSampleRate);
        output.writeFieldEnd();
    }
    if (this.maxMessageSize !== null && this.maxMessageSize !== undefined) {
        output.writeFieldBegin('maxMessageSize', Thrift.Type.I16, 8);
        output.writeI16(this.maxMessageSize);
        output.writeFieldEnd();
    }
    if (this.eventEnabled !== null && this.eventEnabled !== undefined) {
        output.writeFieldBegin('eventEnabled', Thrift.Type.BOOL, 9);
        output.writeBool(this.eventEnabled);
        output.writeFieldEnd();
    }
    if (this.config !== null && this.config !== undefined) {
        output.writeFieldBegin('config', Thrift.Type.STRING, 10);
        output.writeString(this.config);
        output.writeFieldEnd();
    }
    if (this.logSampler !== null && this.logSampler !== undefined) {
        output.writeFieldBegin('logSampler', Thrift.Type.STRUCT, 11);
        this.logSampler.write(output);
        output.writeFieldEnd();
    }
    if (this.metricsBlackList !== null && this.metricsBlackList !== undefined) {
        output.writeFieldBegin('metricsBlackList', Thrift.Type.SET, 12);
        output.writeSetBegin(Thrift.Type.STRING, this.metricsBlackList.length);
        for (let iter201 in this.metricsBlackList) {
            if (Object.prototype.hasOwnProperty.call(this.metricsBlackList, iter201)) {
                iter201 = this.metricsBlackList[iter201];
                output.writeString(iter201);
            }
        }
        output.writeSetEnd();
        output.writeFieldEnd();
    }
    if (this.ignoreMts !== null && this.ignoreMts !== undefined) {
        output.writeFieldBegin('ignoreMts', Thrift.Type.SET, 13);
        output.writeSetBegin(Thrift.Type.STRUCT, this.ignoreMts.length);
        for (let iter202 in this.ignoreMts) {
            if (Object.prototype.hasOwnProperty.call(this.ignoreMts, iter202)) {
                iter202 = this.ignoreMts[iter202];
                iter202.write(output);
            }
        }
        output.writeSetEnd();
        output.writeFieldEnd();
    }
    if (this.logDetailedCountAnalyzeEnable !== null && this.logDetailedCountAnalyzeEnable !== undefined) {
        output.writeFieldBegin('logDetailedCountAnalyzeEnable', Thrift.Type.BOOL, 14);
        output.writeBool(this.logDetailedCountAnalyzeEnable);
        output.writeFieldEnd();
    }
    if (this.shouldAggregateDelayMetrics !== null && this.shouldAggregateDelayMetrics !== undefined) {
        output.writeFieldBegin('shouldAggregateDelayMetrics', Thrift.Type.SET, 15);
        output.writeSetBegin(Thrift.Type.STRING, this.shouldAggregateDelayMetrics.length);
        for (let iter203 in this.shouldAggregateDelayMetrics) {
            if (Object.prototype.hasOwnProperty.call(this.shouldAggregateDelayMetrics, iter203)) {
                iter203 = this.shouldAggregateDelayMetrics[iter203];
                output.writeString(iter203);
            }
        }
        output.writeSetEnd();
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let GetConfigRequest = module.exports.GetConfigRequest = function(args) {
    this.appId = null;
    this.hostIp = null;
    if (args) {
        if (args.appId !== undefined) {
            this.appId = args.appId;
        }
        if (args.hostIp !== undefined) {
            this.hostIp = args.hostIp;
        }
    }
};
GetConfigRequest.prototype = {};
GetConfigRequest.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRING) {
                    this.appId = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.STRING) {
                    this.hostIp = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

GetConfigRequest.prototype.write = function(output) {
    output.writeStructBegin('GetConfigRequest');
    if (this.appId !== null && this.appId !== undefined) {
        output.writeFieldBegin('appId', Thrift.Type.STRING, 1);
        output.writeString(this.appId);
        output.writeFieldEnd();
    }
    if (this.hostIp !== null && this.hostIp !== undefined) {
        output.writeFieldBegin('hostIp', Thrift.Type.STRING, 2);
        output.writeString(this.hostIp);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let GetConfigResponse = module.exports.GetConfigResponse = function(args) {
    this.resultCode = null;
    this.config = null;
    if (args) {
        if (args.resultCode !== undefined) {
            this.resultCode = args.resultCode;
        }
        if (args.config !== undefined) {
            this.config = args.config;
        }
    }
};
GetConfigResponse.prototype = {};
GetConfigResponse.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.I32) {
                    this.resultCode = input.readI32();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.STRUCT) {
                    this.config = new ttypes.AgentConfig();
                    this.config.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

GetConfigResponse.prototype.write = function(output) {
    output.writeStructBegin('GetConfigResponse');
    if (this.resultCode !== null && this.resultCode !== undefined) {
        output.writeFieldBegin('resultCode', Thrift.Type.I32, 1);
        output.writeI32(this.resultCode);
        output.writeFieldEnd();
    }
    if (this.config !== null && this.config !== undefined) {
        output.writeFieldBegin('config', Thrift.Type.STRUCT, 2);
        this.config.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let GetConfigResponseV2 = module.exports.GetConfigResponseV2 = function(args) {
    this.resultCode = null;
    this.config = null;
    if (args) {
        if (args.resultCode !== undefined) {
            this.resultCode = args.resultCode;
        }
        if (args.config !== undefined) {
            this.config = args.config;
        }
    }
};
GetConfigResponseV2.prototype = {};
GetConfigResponseV2.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.I32) {
                    this.resultCode = input.readI32();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.STRUCT) {
                    this.config = new ttypes.AgentConfigV2();
                    this.config.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

GetConfigResponseV2.prototype.write = function(output) {
    output.writeStructBegin('GetConfigResponseV2');
    if (this.resultCode !== null && this.resultCode !== undefined) {
        output.writeFieldBegin('resultCode', Thrift.Type.I32, 1);
        output.writeI32(this.resultCode);
        output.writeFieldEnd();
    }
    if (this.config !== null && this.config !== undefined) {
        output.writeFieldBegin('config', Thrift.Type.STRUCT, 2);
        this.config.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let Response = module.exports.Response = function(args) {
    this.resultCode = null;
    this.chunk = null;
    if (args) {
        if (args.resultCode !== undefined) {
            this.resultCode = args.resultCode;
        }
        if (args.chunk !== undefined) {
            this.chunk = args.chunk;
        }
    }
};
Response.prototype = {};
Response.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.I32) {
                    this.resultCode = input.readI32();
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.STRUCT) {
                    this.chunk = new ttypes.Chunk();
                    this.chunk.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

Response.prototype.write = function(output) {
    output.writeStructBegin('Response');
    if (this.resultCode !== null && this.resultCode !== undefined) {
        output.writeFieldBegin('resultCode', Thrift.Type.I32, 1);
        output.writeI32(this.resultCode);
        output.writeFieldEnd();
    }
    if (this.chunk !== null && this.chunk !== undefined) {
        output.writeFieldBegin('chunk', Thrift.Type.STRUCT, 2);
        this.chunk.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let AgentConfigContainer = module.exports.AgentConfigContainer = function(args) {
    this.globalLevel = null;
    this.appLevel = null;
    this.ipLevel = null;
    if (args) {
        if (args.globalLevel !== undefined) {
            this.globalLevel = args.globalLevel;
        }
        if (args.appLevel !== undefined) {
            this.appLevel = args.appLevel;
        }
        if (args.ipLevel !== undefined) {
            this.ipLevel = args.ipLevel;
        }
    }
};
AgentConfigContainer.prototype = {};
AgentConfigContainer.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRUCT) {
                    this.globalLevel = new ttypes.AgentConfig();
                    this.globalLevel.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            case 2:
                if (ftype == Thrift.Type.MAP) {
                    let _size204 = 0;
                    let _rtmp3208;
                    this.appLevel = {};
                    // let _ktype205 = 0;
                    // let _vtype206 = 0;
                    _rtmp3208 = input.readMapBegin();
                    // _ktype205 = _rtmp3208.ktype;
                    // _vtype206 = _rtmp3208.vtype;
                    _size204 = _rtmp3208.size;
                    for (let _i209 = 0; _i209 < _size204; ++_i209) {
                        let key210 = null;
                        let val211 = null;
                        key210 = input.readString();
                        val211 = new ttypes.AgentConfig();
                        val211.read(input);
                        this.appLevel[key210] = val211;
                    }
                    input.readMapEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            case 3:
                if (ftype == Thrift.Type.MAP) {
                    let _size212 = 0;
                    let _rtmp3216;
                    this.ipLevel = {};
                    // let _ktype213 = 0;
                    // let _vtype214 = 0;
                    _rtmp3216 = input.readMapBegin();
                    // _ktype213 = _rtmp3216.ktype;
                    // _vtype214 = _rtmp3216.vtype;
                    _size212 = _rtmp3216.size;
                    for (let _i217 = 0; _i217 < _size212; ++_i217) {
                        let key218 = null;
                        let val219 = null;
                        key218 = input.readString();
                        val219 = new ttypes.AgentConfig();
                        val219.read(input);
                        this.ipLevel[key218] = val219;
                    }
                    input.readMapEnd();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

AgentConfigContainer.prototype.write = function(output) {
    output.writeStructBegin('AgentConfigContainer');
    if (this.globalLevel !== null && this.globalLevel !== undefined) {
        output.writeFieldBegin('globalLevel', Thrift.Type.STRUCT, 1);
        this.globalLevel.write(output);
        output.writeFieldEnd();
    }
    if (this.appLevel !== null && this.appLevel !== undefined) {
        output.writeFieldBegin('appLevel', Thrift.Type.MAP, 2);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.appLevel));
        for (let kiter220 in this.appLevel) {
            if (Object.prototype.hasOwnProperty.call(this.appLevel, kiter220)) {
                let viter221 = this.appLevel[kiter220];
                output.writeString(kiter220);
                viter221.write(output);
            }
        }
        output.writeMapEnd();
        output.writeFieldEnd();
    }
    if (this.ipLevel !== null && this.ipLevel !== undefined) {
        output.writeFieldBegin('ipLevel', Thrift.Type.MAP, 3);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.ipLevel));
        for (let kiter222 in this.ipLevel) {
            if (Object.prototype.hasOwnProperty.call(this.ipLevel, kiter222)) {
                let viter223 = this.ipLevel[kiter222];
                output.writeString(kiter222);
                viter223.write(output);
            }
        }
        output.writeMapEnd();
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

ttypes.METRIC_TAG_APPID = 'appid';
ttypes.METRIC_TAG_HOSTIP = 'hostip';
ttypes.SERVICE_VERSION = 'V2.0';
//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
const InfinityLoop = true;

const Thrift = require('../thrift').Thrift;

const ttypes = require('./clogging_v2_types');
//HELPER FUNCTIONS AND STRUCTURES

let FreewayService_shutdown_args = function() {};
FreewayService_shutdown_args.prototype = {};
FreewayService_shutdown_args.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        // let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        input.skip(ftype);
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

FreewayService_shutdown_args.prototype.write = function(output) {
    output.writeStructBegin('FreewayService_shutdown_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let FreewayService_shutdown_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined) {
            this.success = args.success;
        }
    }
};
FreewayService_shutdown_result.prototype = {};
FreewayService_shutdown_result.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 0:
                if (ftype == Thrift.Type.I64) {
                    this.success = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

FreewayService_shutdown_result.prototype.write = function(output) {
    output.writeStructBegin('FreewayService_shutdown_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.I64, 0);
        output.writeI64(this.success);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let FreewayService_getName_args = function() {};
FreewayService_getName_args.prototype = {};
FreewayService_getName_args.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        // let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        input.skip(ftype);
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

FreewayService_getName_args.prototype.write = function(output) {
    output.writeStructBegin('FreewayService_getName_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let FreewayService_getName_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined) {
            this.success = args.success;
        }
    }
};
FreewayService_getName_result.prototype = {};
FreewayService_getName_result.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 0:
                if (ftype == Thrift.Type.STRING) {
                    this.success = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

FreewayService_getName_result.prototype.write = function(output) {
    output.writeStructBegin('FreewayService_getName_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRING, 0);
        output.writeString(this.success);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let FreewayService_getStatus_args = function() {};
FreewayService_getStatus_args.prototype = {};
FreewayService_getStatus_args.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        // let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        input.skip(ftype);
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

FreewayService_getStatus_args.prototype.write = function(output) {
    output.writeStructBegin('FreewayService_getStatus_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let FreewayService_getStatus_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined) {
            this.success = args.success;
        }
    }
};
FreewayService_getStatus_result.prototype = {};
FreewayService_getStatus_result.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 0:
                if (ftype == Thrift.Type.I32) {
                    this.success = input.readI32();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

FreewayService_getStatus_result.prototype.write = function(output) {
    output.writeStructBegin('FreewayService_getStatus_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.I32, 0);
        output.writeI32(this.success);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let FreewayService_getVersion_args = function() {};
FreewayService_getVersion_args.prototype = {};
FreewayService_getVersion_args.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        // let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        input.skip(ftype);
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

FreewayService_getVersion_args.prototype.write = function(output) {
    output.writeStructBegin('FreewayService_getVersion_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let FreewayService_getVersion_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined) {
            this.success = args.success;
        }
    }
};
FreewayService_getVersion_result.prototype = {};
FreewayService_getVersion_result.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 0:
                if (ftype == Thrift.Type.STRING) {
                    this.success = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

FreewayService_getVersion_result.prototype.write = function(output) {
    output.writeStructBegin('FreewayService_getVersion_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRING, 0);
        output.writeString(this.success);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let FreewayService_getUptime_args = function() {};
FreewayService_getUptime_args.prototype = {};
FreewayService_getUptime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        // let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        input.skip(ftype);
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

FreewayService_getUptime_args.prototype.write = function(output) {
    output.writeStructBegin('FreewayService_getUptime_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let FreewayService_getUptime_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined) {
            this.success = args.success;
        }
    }
};
FreewayService_getUptime_result.prototype = {};
FreewayService_getUptime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 0:
                if (ftype == Thrift.Type.I64) {
                    this.success = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

FreewayService_getUptime_result.prototype.write = function(output) {
    output.writeStructBegin('FreewayService_getUptime_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.I64, 0);
        output.writeI64(this.success);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let FreewayService_getCounter_args = function(args) {
    this.key = null;
    if (args) {
        if (args.key !== undefined) {
            this.key = args.key;
        }
    }
};
FreewayService_getCounter_args.prototype = {};
FreewayService_getCounter_args.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRING) {
                    this.key = input.readString();
                } else {
                    input.skip(ftype);
                }
                break;
            case 0:
                input.skip(ftype);
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

FreewayService_getCounter_args.prototype.write = function(output) {
    output.writeStructBegin('FreewayService_getCounter_args');
    if (this.key !== null && this.key !== undefined) {
        output.writeFieldBegin('key', Thrift.Type.STRING, 1);
        output.writeString(this.key);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let FreewayService_getCounter_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined) {
            this.success = args.success;
        }
    }
};
FreewayService_getCounter_result.prototype = {};
FreewayService_getCounter_result.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 0:
                if (ftype == Thrift.Type.I64) {
                    this.success = input.readI64();
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

FreewayService_getCounter_result.prototype.write = function(output) {
    output.writeStructBegin('FreewayService_getCounter_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.I64, 0);
        output.writeI64(this.success);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let FreewayService_getAgentConfig_args = function(args) {
    this.request = null;
    if (args) {
        if (args.request !== undefined) {
            this.request = args.request;
        }
    }
};
FreewayService_getAgentConfig_args.prototype = {};
FreewayService_getAgentConfig_args.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRUCT) {
                    this.request = new ttypes.GetConfigRequest();
                    this.request.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            case 0:
                input.skip(ftype);
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

FreewayService_getAgentConfig_args.prototype.write = function(output) {
    output.writeStructBegin('FreewayService_getAgentConfig_args');
    if (this.request !== null && this.request !== undefined) {
        output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
        this.request.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let FreewayService_getAgentConfig_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined) {
            this.success = args.success;
        }
    }
};
FreewayService_getAgentConfig_result.prototype = {};
FreewayService_getAgentConfig_result.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 0:
                if (ftype == Thrift.Type.STRUCT) {
                    this.success = new ttypes.GetConfigResponse();
                    this.success.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

FreewayService_getAgentConfig_result.prototype.write = function(output) {
    output.writeStructBegin('FreewayService_getAgentConfig_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let FreewayService_getAgentConfigV2_args = function(args) {
    this.request = null;
    if (args) {
        if (args.request !== undefined) {
            this.request = args.request;
        }
    }
};
FreewayService_getAgentConfigV2_args.prototype = {};
FreewayService_getAgentConfigV2_args.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 1:
                if (ftype == Thrift.Type.STRUCT) {
                    this.request = new ttypes.GetConfigRequest();
                    this.request.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            case 0:
                input.skip(ftype);
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

FreewayService_getAgentConfigV2_args.prototype.write = function(output) {
    output.writeStructBegin('FreewayService_getAgentConfigV2_args');
    if (this.request !== null && this.request !== undefined) {
        output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
        this.request.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let FreewayService_getAgentConfigV2_result = function(args) {
    this.success = null;
    if (args) {
        if (args.success !== undefined) {
            this.success = args.success;
        }
    }
};
FreewayService_getAgentConfigV2_result.prototype = {};
FreewayService_getAgentConfigV2_result.prototype.read = function(input) {
    input.readStructBegin();
    while (InfinityLoop) {
        let ret = input.readFieldBegin();
        // let fname = ret.fname;
        let ftype = ret.ftype;
        let fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        switch (fid) {
            case 0:
                if (ftype == Thrift.Type.STRUCT) {
                    this.success = new ttypes.GetConfigResponseV2();
                    this.success.read(input);
                } else {
                    input.skip(ftype);
                }
                break;
            default:
                input.skip(ftype);
        }
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

FreewayService_getAgentConfigV2_result.prototype.write = function(output) {
    output.writeStructBegin('FreewayService_getAgentConfigV2_result');
    if (this.success !== null && this.success !== undefined) {
        output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
        this.success.write(output);
        output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

let FreewayServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
FreewayServiceClient.prototype = {};
FreewayServiceClient.prototype.shutdown = function(callback) {
    this.seqid += 1;
    this._reqs[this.seqid] = callback;
    this.send_shutdown();
};

FreewayServiceClient.prototype.send_shutdown = function() {
    let output = new this.pClass(this.output);
    output.writeMessageBegin('shutdown', Thrift.MessageType.CALL, this.seqid);
    let args = new FreewayService_shutdown_args();
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

FreewayServiceClient.prototype.recv_shutdown = function(input, mtype, rseqid) {
    let callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        let x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    let result = new FreewayService_shutdown_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('shutdown failed: unknown result');
};
FreewayServiceClient.prototype.getName = function(callback) {
    this.seqid += 1;
    this._reqs[this.seqid] = callback;
    this.send_getName();
};

FreewayServiceClient.prototype.send_getName = function() {
    let output = new this.pClass(this.output);
    output.writeMessageBegin('getName', Thrift.MessageType.CALL, this.seqid);
    let args = new FreewayService_getName_args();
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

FreewayServiceClient.prototype.recv_getName = function(input, mtype, rseqid) {
    let callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        let x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    let result = new FreewayService_getName_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('getName failed: unknown result');
};
FreewayServiceClient.prototype.getStatus = function(callback) {
    this.seqid += 1;
    this._reqs[this.seqid] = callback;
    this.send_getStatus();
};

FreewayServiceClient.prototype.send_getStatus = function() {
    let output = new this.pClass(this.output);
    output.writeMessageBegin('getStatus', Thrift.MessageType.CALL, this.seqid);
    let args = new FreewayService_getStatus_args();
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

FreewayServiceClient.prototype.recv_getStatus = function(input, mtype, rseqid) {
    let callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        let x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    let result = new FreewayService_getStatus_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('getStatus failed: unknown result');
};
FreewayServiceClient.prototype.getVersion = function(callback) {
    this.seqid += 1;
    this._reqs[this.seqid] = callback;
    this.send_getVersion();
};

FreewayServiceClient.prototype.send_getVersion = function() {
    let output = new this.pClass(this.output);
    output.writeMessageBegin('getVersion', Thrift.MessageType.CALL, this.seqid);
    let args = new FreewayService_getVersion_args();
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

FreewayServiceClient.prototype.recv_getVersion = function(input, mtype, rseqid) {
    let callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        let x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    let result = new FreewayService_getVersion_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('getVersion failed: unknown result');
};
FreewayServiceClient.prototype.getUptime = function(callback) {
    this.seqid += 1;
    this._reqs[this.seqid] = callback;
    this.send_getUptime();
};

FreewayServiceClient.prototype.send_getUptime = function() {
    let output = new this.pClass(this.output);
    output.writeMessageBegin('getUptime', Thrift.MessageType.CALL, this.seqid);
    let args = new FreewayService_getUptime_args();
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

FreewayServiceClient.prototype.recv_getUptime = function(input, mtype, rseqid) {
    let callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        let x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    let result = new FreewayService_getUptime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('getUptime failed: unknown result');
};
FreewayServiceClient.prototype.getCounter = function(key, callback) {
    this.seqid += 1;
    this._reqs[this.seqid] = callback;
    this.send_getCounter(key);
};

FreewayServiceClient.prototype.send_getCounter = function(key) {
    let output = new this.pClass(this.output);
    output.writeMessageBegin('getCounter', Thrift.MessageType.CALL, this.seqid);
    let args = new FreewayService_getCounter_args();
    args.key = key;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

FreewayServiceClient.prototype.recv_getCounter = function(input, mtype, rseqid) {
    let callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        let x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    let result = new FreewayService_getCounter_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('getCounter failed: unknown result');
};
FreewayServiceClient.prototype.getAgentConfig = function(request, callback) {
    this.seqid += 1;
    this._reqs[this.seqid] = callback;
    this.send_getAgentConfig(request);
};

FreewayServiceClient.prototype.send_getAgentConfig = function(request) {
    let output = new this.pClass(this.output);
    output.writeMessageBegin('getAgentConfig', Thrift.MessageType.CALL, this.seqid);
    let args = new FreewayService_getAgentConfig_args();
    args.request = request;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

FreewayServiceClient.prototype.recv_getAgentConfig = function(input, mtype, rseqid) {
    let callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        let x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    let result = new FreewayService_getAgentConfig_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('getAgentConfig failed: unknown result');
};
FreewayServiceClient.prototype.getAgentConfigV2 = function(request, callback) {
    this.seqid += 1;
    this._reqs[this.seqid] = callback;
    this.send_getAgentConfigV2(request);
};

FreewayServiceClient.prototype.send_getAgentConfigV2 = function(request) {
    let output = new this.pClass(this.output);
    output.writeMessageBegin('getAgentConfigV2', Thrift.MessageType.CALL, this.seqid);
    let args = new FreewayService_getAgentConfigV2_args();
    args.request = request;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

FreewayServiceClient.prototype.recv_getAgentConfigV2 = function(input, mtype, rseqid) {
    let callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
        let x = new Thrift.TApplicationException();
        x.read(input);
        input.readMessageEnd();
        return callback(x);
    }
    let result = new FreewayService_getAgentConfigV2_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
        return callback(null, result.success);
    }
    return callback('getAgentConfigV2 failed: unknown result');
};
let FreewayServiceProcessor = exports.Processor = function(handler) {
    this._handler = handler
};
FreewayServiceProcessor.prototype.process = function(input, output) {
    let r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
        return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
        input.skip(Thrift.Type.STRUCT);
        input.readMessageEnd();
        let x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
        output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
        x.write(output);
        output.writeMessageEnd();
        output.flush();
    }
}

FreewayServiceProcessor.prototype.process_shutdown = function(seqid, input, output) {
    let args = new FreewayService_shutdown_args();
    args.read(input);
    input.readMessageEnd();
    this._handler.shutdown(function(err, result) {
        result = new FreewayService_shutdown_result((err != null ? err : {
            success: result
        }));
        output.writeMessageBegin("shutdown", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
    })
}

FreewayServiceProcessor.prototype.process_getName = function(seqid, input, output) {
    let args = new FreewayService_getName_args();
    args.read(input);
    input.readMessageEnd();
    this._handler.getName(function(err, result) {
        result = new FreewayService_getName_result((err != null ? err : {
            success: result
        }));
        output.writeMessageBegin("getName", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
    })
}

FreewayServiceProcessor.prototype.process_getStatus = function(seqid, input, output) {
    let args = new FreewayService_getStatus_args();
    args.read(input);
    input.readMessageEnd();
    this._handler.getStatus(function(err, result) {
        result = new FreewayService_getStatus_result((err != null ? err : {
            success: result
        }));
        output.writeMessageBegin("getStatus", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
    })
}

FreewayServiceProcessor.prototype.process_getVersion = function(seqid, input, output) {
    let args = new FreewayService_getVersion_args();
    args.read(input);
    input.readMessageEnd();
    this._handler.getVersion(function(err, result) {
        result = new FreewayService_getVersion_result((err != null ? err : {
            success: result
        }));
        output.writeMessageBegin("getVersion", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
    })
}

FreewayServiceProcessor.prototype.process_getUptime = function(seqid, input, output) {
    let args = new FreewayService_getUptime_args();
    args.read(input);
    input.readMessageEnd();
    this._handler.getUptime(function(err, result) {
        result = new FreewayService_getUptime_result((err != null ? err : {
            success: result
        }));
        output.writeMessageBegin("getUptime", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
    })
}

FreewayServiceProcessor.prototype.process_getCounter = function(seqid, input, output) {
    let args = new FreewayService_getCounter_args();
    args.read(input);
    input.readMessageEnd();
    this._handler.getCounter(args.key, function(err, result) {
        result = new FreewayService_getCounter_result((err != null ? err : {
            success: result
        }));
        output.writeMessageBegin("getCounter", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
    })
}

FreewayServiceProcessor.prototype.process_getAgentConfig = function(seqid, input, output) {
    let args = new FreewayService_getAgentConfig_args();
    args.read(input);
    input.readMessageEnd();
    this._handler.getAgentConfig(args.request, function(err, result) {
        result = new FreewayService_getAgentConfig_result((err != null ? err : {
            success: result
        }));
        output.writeMessageBegin("getAgentConfig", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
    })
}

FreewayServiceProcessor.prototype.process_getAgentConfigV2 = function(seqid, input, output) {
    let args = new FreewayService_getAgentConfigV2_args();
    args.read(input);
    input.readMessageEnd();
    this._handler.getAgentConfigV2(args.request, function(err, result) {
        result = new FreewayService_getAgentConfigV2_result((err != null ? err : {
            success: result
        }));
        output.writeMessageBegin("getAgentConfigV2", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
    })
}
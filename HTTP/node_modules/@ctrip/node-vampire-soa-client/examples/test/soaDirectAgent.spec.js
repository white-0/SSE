process.mainModule = {
    filename: __filename
};
const assert = require('chai').assert;
const nock = require('nock');
const proxyquire = require('proxyquire');
nock('http://127.0.0.1/nodejs/json')
    .post('/hello')
    .times(2)
    .reply(200, {
        ResponseStatus: {
            Timestamp: '/Date(1589772557210+0800)/',
            Ack: 'Success',
            Errors: [],
            Extension: [
                [Object],
                [Object],
                [Object]
            ]
        },
        IP: 'test case'
    })
nock('http://127.0.0.1/nodejs/json')
    .post('/hello1')
    .reply(400, 'test case');

nock('http://127.0.0.1/nodejs', {
        "reqheaders": {
            "content-type": "application/json",
            "connection": "keep-alive"
        }
    }).log(console.log).get('/_operationinfo?jsonType=json')
    .reply(200, [{
        "Name": "hello",
        "RequestMessage": {
            "Json": "{\"key\":\"String\"}"
        },
        "ResponseMessage": {
            "Json": "{\"key\":\"String\"}"
        }
    }, {
        "Name": "getInfo",
        "RequestMessage": {
            "Json": "{\"key\":\"String\"}"
        },
        "ResponseMessage": {
            "Json": "{\"key\":\"String\"}"
        }
    }, {
        "Name": "checkhealth",
        "RequestMessage": {
            "Json": "{}"
        },
        "ResponseMessage": {
            "Json": "{}"
        }
    }, {
        "Name": "vi/health",
        "RequestMessage": {
            "Json": "{}"
        },
        "ResponseMessage": {
            "Json": "{}"
        }
    }]);
nock('http://ws.soa.fws.qa.nt.ctripcorp.com/core/metadata/services', {}).log(console.log).get('/16264')
    .reply(200, {
        'serviceId': 'wireless.soa.nodesoatestserver.v1.nodesoatestserver'
    });

const promses = function (opts) {
    this.serviceCode = opts.serviceCode;
};

promses.prototype.hello = ({
    args,
    reqEphemeralParams
}) => {
    const opts = args;
    if (reqEphemeralParams) {
        return Promise.resolve({
            'ResponseStatus': {
                'Timestamp': '/Date(1591701068143+0800)/',
                'Ack': 'Success',
                'Errors': [],
                'Extension': []
            },
            'name': 'xiaoming',
            'age': '12',
            'SOA.ResponseHeaders': {
                'content-type': 'application/json'
            }
        })
    } else {
        return Promise.resolve({
            'ResponseStatus': {
                'Timestamp': '/Date(1591701068143+0800)/',
                'Ack': 'Success',
                'Errors': [],
                'Extension': []
            },
            'name': 'xiaoming',
            'age': '12'
        })
    }

}
promses.prototype.test = ({
    method,
    args,
    reqEphemeralParams
}) => {
    const opts = args;
    switch (opts.status) {
        case true: {
            return Promise.resolve({
                'ResponseStatus': {
                    'Timestamp': '/Date(1591701068143+0800)/',
                    'Ack': 'Error',
                    'Errors': [{
                        "Message": "method not support",
                        "ErrorCode": "404"
                    }],
                    'Extension': []
                }
            })
        }
        case false:
            return Promise.reject('Invalid Method Or Arguments')
        default:
            return Promise.reject();
    }
}
describe('soa client Agent UT', () => {
    describe('soa 直连客户端', () => {
        let soaDirectApi, SoaClient;
        before(async () => {
            SoaClient = proxyquire('../../index', {
                'SoaDirectAgent': promses
            })
            soaDirectApi = SoaClient.SoaDirectAgent('wireless.soa.nodesoatestserver.v1.nodesoatestserver');
        });
        it('invoke 时校验参数和方法名(参数和方法名有效),Ack:"Success"', (done) => {
            soaDirectApi.hello({
                args: {},
                skipValid: false,
            }).then((result) => {
                console.log(result);
                assert(typeof result === 'object');
                done();
            }).catch((err) => {
                console.log(err)
            });
        });
        it('invoke 时校验参数和方法名(参数或方法名无效),抛出异常：Invalid Method', (done) => {
            soaDirectApi.test({
                args: {
                    status: true
                },
                skipValid: false,
            }).then((result) => {
                done();
            }).catch((err) => {
                console.log('===。', err)
                assert(!!err === true);
                done()
            });
        });
        it('invoke 传递headers 指定响应报文包含headers', (done) => {
            soaDirectApi.hello({
                args: {},
                skipValid: true,
                reqEphemeralParams: {
                    headers: {
                        test: '111'
                    }
                },
                isResHeaders: true
            }).then((result) => {
                assert(!!result['SOA.ResponseHeaders'] === true);
                done();
            }).catch((err) => {
                throw err;
            })
        });
        after(() => {
            setTimeout(() => {
                process.exit(0)
            }, 2000)
        })
    });
});
describe('soa client Agent UT - ServiceCode', () => {
    describe('soa 直连客户端', () => {
        let soaDirectApi, SoaClient;
        before(async () => {
            SoaClient = proxyquire('../../index', {
                'SoaDirectAgent': promses
            })
            soaDirectApi = SoaClient.SoaDirectAgent({
                serviceCode: '16264'
            });
        });
        it('invoke 时校验参数和方法名(参数和方法名有效),Ack:"Success"', (done) => {
            soaDirectApi.hello({
                args: {},
                skipValid: false,
            }).then((result) => {
                console.log(result);
                assert(typeof result === 'object');
                done();
            }).catch((err) => {
                console.log(err)
            });
        });
        it('invoke 时校验参数和方法名(参数或方法名无效),抛出异常：Invalid Method', (done) => {
            soaDirectApi.test({
                args: {
                    status: true
                },
                skipValid: false,
            }).then((result) => {
                done();
            }).catch((err) => {
                console.log('===。', err)
                assert(!!err === true);
                done()
            });
        });
        it('invoke 传递headers 指定响应报文包含headers', (done) => {
            soaDirectApi.hello({
                args: {},
                skipValid: true,
                reqEphemeralParams: {
                    headers: {
                        test: '111'
                    }
                },
                isResHeaders: true
            }).then((result) => {
                assert(!!result['SOA.ResponseHeaders'] === true);
                done();
            }).catch((err) => {
                throw err;
            })
        });
        after(() => {
            setTimeout(() => {
                process.exit(0)
            }, 2000)
        })
    });
});
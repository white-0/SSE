process.mainModule = {
    filename: __filename
};
const assert = require('chai').assert;
const nock = require('nock');
const proxyquire = require('proxyquire');
nock('http://127.0.0.1/nodejs/json')
    .post('/hello')
    .times(2)
    .reply(200, {
        ResponseStatus: {
            Timestamp: '/Date(1589772557210+0800)/',
            Ack: 'Success',
            Errors: [],
            Extension: [
                [Object],
                [Object],
                [Object]
            ]
        },
        IP: 'test case'
    })
nock('http://127.0.0.1/nodejs/json')
    .post('/hello1')
    .reply(400, 'test case');

nock('http://127.0.0.1/nodejs', {
        "reqheaders": {
            "content-type": "application/json",
            "connection": "keep-alive"
        }
    }).log(console.log).get('/_operationinfo?jsonType=json')
    .reply(200, [{
        "Name": "hello",
        "RequestMessage": {
            "Json": "{\"key\":\"String\"}"
        },
        "ResponseMessage": {
            "Json": "{\"key\":\"String\"}"
        }
    }, {
        "Name": "getInfo",
        "RequestMessage": {
            "Json": "{\"key\":\"String\"}"
        },
        "ResponseMessage": {
            "Json": "{\"key\":\"String\"}"
        }
    }, {
        "Name": "checkhealth",
        "RequestMessage": {
            "Json": "{}"
        },
        "ResponseMessage": {
            "Json": "{}"
        }
    }, {
        "Name": "vi/health",
        "RequestMessage": {
            "Json": "{}"
        },
        "ResponseMessage": {
            "Json": "{}"
        }
    }]);
nock('http://ws.soa.fws.qa.nt.ctripcorp.com/core/metadata/services', {}).log(console.log).get('/16264')
    .reply(200, {
        'serviceId': 'wireless.soa.nodesoatestserver.v1.nodesoatestserver'
    });

class client {
    constructor({
        serviceId
    }) {
        this.serviceId = serviceId
    }

    init() {
        switch (this.serviceId) {
            case 'wireless.soa.nodesoatestserver.v1.nodesoatestserver':
                return Promise.resolve()
            default:
                return Promise.reject('None Available Server, Servers:')
        }
    }
    getUcsHeaders() {
        return ''
    }
    getServiceUrl(operationName, routeId) {
        switch (operationName) {
            case 'hello':
                return 'http://127.0.0.1/nodejs/'
            default:
                return 'http://127.0.0.1/nodejs/'
        }
    }
}
describe('soa client UT', () => {
    describe('soa 直连客户端', () => {
        let soaDirectApi, SoaClient;
        before(async () => {
            SoaClient = proxyquire('../../index', {
                '@ctrip/node-vampire-artemis': {
                    client: client
                }
            })
            soaDirectApi = new SoaClient.SoaDirectApi({
                serviceCode: '16264'
            });
            await soaDirectApi.init();
        });
        it('invoke 时校验参数和方法名(参数和方法名有效),Ack:"Success"', (done) => {
            soaDirectApi.invoke({
                method: 'hello',
                args: {},
                skipValid: false,
            }).then((result) => {
                assert(typeof result === 'object');
                done();
            }).catch((err) => {
                throw err;
            });
        });
        it('invoke 时校验参数和方法名(参数或方法名无效),抛出异常：Invalid Method (hello1)', (done) => {
            soaDirectApi.invoke({
                method: 'hello1',
                args: {},
                skipValid: false,
            }).then((result) => {
                done();
            }).catch((err) => {
                assert(!!err === true);
                done()
            });
        });
        it('invoke 传递headers 指定响应报文包含headers', (done) => {
            soaDirectApi.addEphemeralHeader({
                keys: ''
            });
            soaDirectApi.invoke({
                method: 'hello',
                args: {},
                skipValid: true,
                reqEphemeralParams: {
                    headers: {
                        test: '111'
                    }
                },
                isResHeaders: true
            }).then((result) => {
                assert(!!result['SOA.ResponseHeaders'] === true);
                done();
            }).catch((err) => {
                throw err;
            })
        });
        it('invoke 指定跳过响应报文的解析，返回Buffer', done => {
            soaDirectApi.invoke({
                method: 'hello',
                args: JSON.stringify({a:1}),
                skipBodyParse: true
            }).then((result) => {
                assert(Buffer.isBuffer(result))
                assert(JSON.parse(result.toString()).ResponseStatus.Ack === 'Success')
                done();
            }).catch((err) => {
                throw err;
            })
        });
        after(() => {
            setTimeout(() => {
                process.exit(0)
            }, 2000)
        })
    });
});
declare let util: {
    hasOwn(obj: Object, key: string): boolean;
    uid(): string;
    type(obj: Object): string;
    copy<T>(obj: T): T;
    getHostIp(): string;
    getHostName(): string;
    // getHostAddress(): string;
    getDiskInfo<T>(callback: (err: any, datas: Array<T>) => void): void;
    //getMicroSeconds(): number;
    //getNanoSeconds(): number;
    upperCaseFirstChar(str: string): string;
    repeat(str: string, times: number): any;
    fillZero(num: number, len: number): string;
    //isInt(num: any): boolean;
    //escapeString(str: string): string;
    formatReString(str: string): string;
    formatDateTime(dateTime?: string | number | object, format?: string): string;
    //stringify(val: any): string;
    //extendMap(...args: any[]): object;
    md5(str: string): string;
    md5Int(str: string): number;
    md5UnsignedInt(str: string): number;
    binarySearch(arr: Array<any>, val: number, start?: number, end?: number): string;
    intToBuff(num: number, len: number): Object;
    uIntToBuff(num: number, len: number): Object;
    doubleToBuff(num: number): Object;
    varint(num: number): Object;
    stringBuilder(lines: any, spliter?: any): string;
    enum(obj: Object, callback: (key: string, value: any, index: number) => void): void;
    objectToArray(obj: Object, callback: number | ((key: string , value: any, index: number) => any)): Array<any>;
    getStack(constructorOpt?: any): any;
    getModuleVersion(name: string): string;
    makeDir(top: string, callback: (err?: any) => void): void;
    readServerProperties(callback: (err: any, result: null | Object) => void): void;
    //getProperties(callback: (result: Object) => void): void;
    storagePath():string;
};
export default util;

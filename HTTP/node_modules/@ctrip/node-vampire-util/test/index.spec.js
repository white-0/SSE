const util = require('../index');
const chai = require('chai');
chai.use(require('chai-http'));
const expect = chai.expect;
const assert = chai.assert;

const NUM = 12345;
const UNUM = 0x12345;
const DNUM = 123.45;

describe('util', () => {
  it('hasOwn', (done) => {
    const obj = {
      'name': 'xx',
      'age': 18
    }

    expect(util.hasOwn(obj, 'name')).to.equal(true);
    expect(util.hasOwn(obj, 'address')).to.equal(false);
    done();
  });

  it('hasOwnProperty', (done) => {
    const obj = {
      'name': 'xx',
      'age': 18
    }

    expect(util.hasOwnProperty(obj, 'name')).to.equal(true);
    expect(util.hasOwnProperty(obj, 'address')).to.equal(false);
    done();
  });

  it('uid', (done) => {
    expect(util.uid()).to.match(/^uid/);
    done();
  });

  it('type', (done) => {
    let a;
    expect(util.type('string')).to.equal('string');
    expect(util.type({})).to.equal('object');
    expect(util.type([])).to.equal('array');
    expect(util.type(1)).to.equal('number');
    expect(util.type(true)).to.equal('boolean');
    expect(util.type(a)).to.equal('undefined');
    expect(util.type(null)).to.equal('null');
    expect(util.type(new Date())).to.equal('date');
    done();
  });

  describe('copy', () => {
    it('object', () => {
      const source = {
        'a': 1,
        'b': 2,
        'c': 3
      };

      let dest = util.copy(source);
      dest.a = 11;

      expect(Object.keys(dest).length).to.equal(Object.keys(source).length);
      expect(dest.a).to.equal(11);
      expect(source.a).to.equal(1);
    });

    it('array', () => {
      const source = [1, 2, 3];
      let dest = util.copy(source);
      expect(dest.length).to.equal(source.length);

    })
    it('date', () => {
      const source = new Date();
      let dest = util.copy(source);
      expect(dest.getTime()).to.equal(source.getTime())
    })
  });

  it('getHostIp', () => {
    let hostIp = util.getHostIp();
    expect(hostIp).to.be.an.ip;
  });

  it('getHostName', () => {
    let hostName = util.getHostName();
    expect(typeof hostName).to.equal('string');
  });

  it('getHostAddress', () => {
    let hostIp = util.getHostAddress();
    expect(hostIp).to.an.ip;
  });

  it('getDiskInfo', (done) => {
    util.getDiskInfo((err, result) => {
      if (err) {
        assert.fail(1);
        done();
      }
      assert.ok(1);
      done();
    });
  });

  it('getMicroSeconds', () => {
    expect(typeof util.getMicroSeconds()).to.equal('number');
  });

  it('getNanoSeconds', () => {
    expect(typeof util.getNanoSeconds()).to.equal('number');
  });

  // it('sleep', ()=>{
  //     util.sleep(500);
  // });

  // it('usleep', ()=>{
  //     util.usleep(5);
  // });

  it('upperCaseFirstChar', () => {
    expect(util.upperCaseFirstChar('abc')).to.equal('Abc');
  });

  it('repeat', () => {
    expect(util.repeat('a', 5)).to.equal('aaaaa');
  });

  it('fillZero', () => {
    expect(util.fillZero(9, 2)).to.equal('09');
  });

  it('isInt', () => {
    expect(util.isInt(1)).to.eq(true);
    expect(util.isInt(0.99)).to.eq(false);
    expect(util.isInt('aa')).to.eq(false);
    expect(util.isInt(-1)).to.eq(true);
  });

  it('formatReString', () => {
    expect(util.formatReString("a{b}")).to.eq('a\\{b\\}');
  });

  describe('util.formatDateTime', () => {
    // 在测试之前设置时区
    beforeEach(() => {
      // 将时区设置为东八区（北京时间）
      process.env.TZ = 'Asia/Shanghai';
    });

    // 在测试之后重置时区
    afterEach(() => {
      process.env.TZ = 'UTC';
    });

    it('should return a string in the correct format', () => {
      const dateTime = 1680577200000;
      const format = 'yyyy年MM月dd日 hh时mm分ss秒SSS毫秒';
      const expected = '2023年04月04日 11时00分00秒000毫秒';
  
      expect(util.formatDateTime(dateTime, format)).to.eq(expected);
    });
  
    it('should use the current date and time if no arguments are provided', () => {
      // 获取当前时间
      const now = new Date();
      // 将当前时间按照默认格式化选项进行格式化
      const expected = util.formatDateTime(now, 'yyyy-MM-dd hh:mm:ss');
  
      // 调用 `formatDateTime` 方法，不传入任何参数
      const result = util.formatDateTime();
      // 将当前时间和预期结果分别转换为字符串
      const resultStr = result.toString();
      const expectedStr = expected.toString();
  
      // 断言格式化后的结果与预期结果相同
      expect(resultStr).to.eq(expectedStr);
    });
  
    it('should return current date if the date is invalid', () => {
      // 传递一个无效的日期参数
      const dateTime = 'invalid date';
      // 预期结果为空字符串
      const expected = '';
  
      // 调用 `formatDateTime` 方法，并传递无效的日期参数
      const result = util.formatDateTime(dateTime);
  
      // 断言结果与预期结果相同
      expect(typeof result).to.eq('string');
    });
  });  

  describe('stringify', () => {
    it('string', () => {
      expect(util.stringify('test')).to.eq('test');
    });

    it('number', () => {
      expect(util.stringify(1)).to.eq('1');
    });

    it('date', () => {
      expect(util.stringify(new Date('2020-01-01'))).to.match(/^2020-01-01/);
    });

    it('object', () => {
      expect(util.stringify({
        a: 1,
        b: 2
      })).to.eq('{"a":1,"b":2}');
    })

    it('function', () => {
      const fn = function () {
        console.log('test');
      }
      expect(util.stringify(fn)).to.eq("[object Function]");
    })
  });

  it('extendMap', () => {
    const obj = {
      'data': {
        'a': 1,
        'b': 2
      },
      'test': 1
    }
    const extendedPart = {
      'data': {
        'c': 3,
        'a': 0
      }
    }

    let dest = util.extendMap(obj, extendedPart);
    expect(Object.keys(dest).length).to.eq(2);
    let data = JSON.parse(dest.data);
    expect(data.a).to.eq(0);
    expect(data.b).to.eq(undefined);
    expect(data.c).to.eq(3);
    expect(dest.test).to.eq(1);
  });

  it('md5', () => {
    console.log(util.md5('hello world'));
    expect(util.md5('hello world')).to.eq('5eb63bbbe01eeed093cb22bb8f5acdc3');
  });

  it('md5Int', () => {
    console.log(util.md5Int('hello world'));
    expect(util.md5Int('hello world')).to.eq(-1153714594);
  });

  it('md5UnsignedInt', () => {
    console.log(util.md5UnsignedInt('hello world'));
    expect(util.md5UnsignedInt('hello world')).to.eq(3141252702);
  });

  it('binarySearch', () => {
    const arr = [1, 3, 5, 6, 10];

    expect(util.binarySearch(arr, 4)).to.eq(-3);
    expect(util.binarySearch(arr, 5)).to.eq(2);
    expect(util.binarySearch(arr, 20)).to.eq(-6);
  });

  describe('Buff', () => {
    it('intToBuff', () => {
      const b1 = util.intToBuff(NUM, 6);
      const b2 = util.intToBuff(NUM, 8);
      expect(b1.toString()).to.eq('\u0000\u0000\u0000\u000009');
      expect(b2.toString()).to.eq('\u0000\u0000\u0000\u0000\u0000\u000009');
      expect(function () {
        util.intToBuff(NUM)
      }).to.throw(Error, 'Invalid Length');
    });

    it('uIntToBuff', () => {
      const b1 = util.uIntToBuff(UNUM, 6);
      const b2 = util.uIntToBuff(UNUM, 8);
      expect(b1.toString()).to.eq('\u0000\u0000\u0000\u0001#E');
      expect(b2.toString()).to.eq('\u0000\u0000\u0000\u0000\u0000\u0001#E');
      expect(function () {
        util.uIntToBuff(UNUM)
      }).to.throw(Error, 'Invalid Length');
    });

    it('doubleToBuff', () => {
      const b = util.doubleToBuff(DNUM);
      assert.ok(b);
    });

    it('varint', () => {
      const b = util.varint(12345678);
      assert.ok(b);
    });
  });

  it('stringBuilder', () => {
    const arr = [1, 2, 3, [4, 5, 6]];
    expect(util.stringBuilder(arr, ',')).to.eq('1,2,3,4,5,6')
  });

  it('enum', () => {
    const obj = {
      a: 1,
      b: 2,
      c: 3
    }
    util.enum(obj, (key, val, index) => {
      expect(['a', 'b', 'c'].indexOf(key)).to.least(0)
    });
  });

  it('objectToArray', () => {
    const obj = {
      a: 1,
      b: 2,
      c: 3
    }

    util.objectToArray(obj, (key, val, index) => {});
    assert.ok(1);
  });

  it('getStack', () => {
    util.getStack(new Error('test error'));
    assert.ok(1);
  });

  it('getModuleVersion', () => {
    // expect(util.getModuleVersion('@ctrip/node-vampire-appconfig')).to.not.eq(null);
    expect(util.getModuleVersion('@ctrip/node-vampire-appconfig1')).to.eq(null);
  });

  it('makeDir', () => {
    util.makeDir('makeDirTest', (err) => {
      if (err) {
        console.log(err);
        assert.fail(err);
        return false;
      }
      assert.ok(1);
    });
  });

  it('getProperties', () => {
    util.getProperties((data) => {
      if (data && Object.keys(data) == 0) {
        assert.ok('Invalid File: server.properties')
      } else {
        assert.ok(1);
      }

    })
  })
  it('storagePath', () => {
    const _url = util.storagePath();
    typeof _url === 'string'?assert.ok(1): assert.throws(() => {
    }, {}, 'Invalid storagePath')
  });
});

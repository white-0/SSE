"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAjaxPerformanceObserver = void 0;
exports.initGlobalAjaxPerformanceObserver = initGlobalAjaxPerformanceObserver;
require("@fastly/performance-observer-polyfill/polyfill");
var _metric = require("./metric");
var _constant = require("./constant");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var createAjaxPerformanceCallback = function createAjaxPerformanceCallback() {
  var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return function (entries) {
    var resourceEntries = entries.getEntriesByType(_constant.PERFORMANCE_ENTRY_RESOURCE);
    var _iterator = _createForOfIteratorHelper(resourceEntries),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _entry = _step.value;
        if (_entry.initiatorType !== _constant.XHR_INITIATOR_TYPE) {
          continue;
        }
        if (filters.length) {
          var _iterator2 = _createForOfIteratorHelper(filters),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var filter = _step2.value;
              if (!filter(_entry)) {
                continue;
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
        (0, _metric.trackAjaxTiming)(_entry);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  };
};
var createAjaxPerformanceObserver = exports.createAjaxPerformanceObserver = function createAjaxPerformanceObserver() {
  var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var observer = new PerformanceObserver(createAjaxPerformanceCallback(filters));
  observer.observe({
    entryTypes: [_constant.PERFORMANCE_ENTRY_RESOURCE]
  });
  return observer;
};
function initGlobalAjaxPerformanceObserver() {
  if (!window.__IBU_AJAX_PERFORMANCE_OBSERVER__) {
    window.__IBU_AJAX_PERFORMANCE_OBSERVER__ = createAjaxPerformanceObserver();
  }
}
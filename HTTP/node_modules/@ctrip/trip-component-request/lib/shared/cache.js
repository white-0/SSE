"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CacheManager = void 0;
exports.isEqual = isEqual;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function isEqual(valA, valB) {
  if (_typeof(valA) === _typeof(valB)) {
    if (_typeof(valA) === 'object' && valA !== null) {
      try {
        return JSON.stringify(valA) === JSON.stringify(valB);
      } catch (error) {
        return false;
      }
    }
    return valA === valB;
  }
  return false;
}
function sameMethod() {
  var methodA = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'GET';
  var methodB = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';
  return methodA && methodB && methodA.toUpperCase() === methodB.toUpperCase();
}
function sameOption(optA, optB) {
  return sameMethod(optA.method, optB.method) && optA.url === optB.url && isEqual(optA.data, optB.data);
}
var CacheManager = exports.CacheManager = /*#__PURE__*/function () {
  function CacheManager() {
    _classCallCheck(this, CacheManager);
    _defineProperty(this, "maxSize", void 0);
    _defineProperty(this, "cacheList", void 0);
    this.maxSize = 30;
    this.cacheList = [];
  }
  _createClass(CacheManager, [{
    key: "exist",
    value: function exist(opt) {
      return !!this.get(opt);
    }
  }, {
    key: "get",
    value: function get(opt) {
      var list = this.cacheList;
      for (var index = 0; index < list.length; index++) {
        var _list$index = list[index],
          option = _list$index.option,
          promise = _list$index.promise;
        if (sameOption(option, opt)) {
          return promise;
        }
      }
      return;
    }
  }, {
    key: "add",
    value: function add(opt, promise) {
      if (!this.exist(opt)) {
        this.cacheList.push({
          option: opt,
          promise: promise
        });
        if (this.cacheList.length > this.maxSize) {
          this.cacheList.shift();
        }
      }
    }
  }]);
  return CacheManager;
}();
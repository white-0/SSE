"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "buildQuery", {
  enumerable: true,
  get: function get() {
    return _tripComponentUtils.buildQuery;
  }
});
exports.isAbortable = isAbortable;
Object.defineProperty(exports, "parseQuery", {
  enumerable: true,
  get: function get() {
    return _tripComponentUtils.parseQuery;
  }
});
exports.promiseAbort = promiseAbort;
exports.promiseTimeout = promiseTimeout;
exports.validStatus = validStatus;
var _errors = require("./errors");
var _tripComponentUtils = require("@ctrip/trip-component-utils");
/**
 * 返回一个新的 promise, 在 time 内如果原来的 promise 没有 resolve，则 reject;
 * @param time 时间
 * @param promise promise
 */
function promiseTimeout(time, promise) {
  var resolved = false;
  return new Promise(function (resolve, reject) {
    promise.then(function (res) {
      resolved = true;
      resolve(res);
    }).catch(function (err) {
      resolved = true;
      reject(err);
    });
    setTimeout(function () {
      if (!resolved) {
        reject(new _errors.TimeoutError(time));
      }
    }, time);
  });
}
function promiseAbort(promise) {
  var promiseReject;
  var aborter = function aborter() {
    var _promiseReject;
    (_promiseReject = promiseReject) === null || _promiseReject === void 0 || _promiseReject(_errors.AbortError.MANUAL_ABORT_ERROR());
  };
  var abortablePromise = new Promise(function (resolve, reject) {
    promise.then(resolve, reject);
    promiseReject = reject;
  });
  abortablePromise.abort = aborter;
  return abortablePromise;
}
function isAbortable(promise) {
  return typeof promise.abort === 'function';
}
function validStatus(status, protocol) {
  return status >= 200 && status < 300 || status === 304 || protocol === 'file:' && status === 0;
}
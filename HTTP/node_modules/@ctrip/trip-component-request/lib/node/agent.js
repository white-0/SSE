"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSoaDirectAgent = exports.getSoaAgent = void 0;
const utils_1 = require("./utils");
const SoaAgentVampire = utils_1.lazyRequire('@ctrip/node-vampire-soa');
const SoaDirectAgentVampire = utils_1.lazyRequire('@ctrip/node-vampire-soa-client');
const CloudRpc = utils_1.lazyRequire('@ctrip/cloud-rpc');
// 自行处理 soa 错误+
// appConfig['SOA.HandleServiceErrorManually'] = true;
const soaAgentCache = new Map();
function getSoaAgent(serviceCode) {
    let agent = soaAgentCache.get(serviceCode);
    if (!agent) {
        agent = SoaAgentVampire.current.SoaAgent(serviceCode);
        soaAgentCache.set(serviceCode, agent);
    }
    return agent;
}
exports.getSoaAgent = getSoaAgent;
const soaDirectAgentCache = new Map();
function getSoaDirectAgent(serviceCode, opt = {}) {
    const { _cacheKey = '' } = opt;
    const cacheKey = `${serviceCode}${_cacheKey ? `_${_cacheKey}` : ''}`;
    let agent = soaDirectAgentCache.get(cacheKey);
    if (!agent) {
        // use direct agent first
        if (SoaDirectAgentVampire.current) {
            agent = new SoaDirectAgentVampire.current.SoaDirectApi(Object.assign(Object.assign({}, opt), { serviceCode }));
            soaDirectAgentCache.set(cacheKey, agent);
        }
        // use cloud rpc second, will be remove in the future.
        else if (CloudRpc.current) {
            // opt.serviceName must be exit!
            agent = new CloudRpc.current(Object.assign(Object.assign({}, opt), { serviceCode }));
            soaDirectAgentCache.set(cacheKey, agent);
        }
        else {
            throw Error('[Deps Error]: please install @ctrip/node-vampire-soa-client');
        }
    }
    return agent;
}
exports.getSoaDirectAgent = getSoaDirectAgent;
//# sourceMappingURL=agent.js.map
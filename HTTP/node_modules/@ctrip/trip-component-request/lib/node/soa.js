"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSoaAgent = void 0;
const defaults_1 = require("../shared/defaults");
const agent_1 = require("./agent");
const shared_1 = require("../shared");
exports.createSoaAgent = (serviceCode, options = {}) => {
    const { serviceName = '', soaOptions = {}, headKey = null, getHead = () => ({}), invalidResponse = defaults_1.defaultInvalidResponse, _cacheKey = '', } = options;
    const soaDirectAgent = agent_1.getSoaDirectAgent(String(serviceCode), Object.assign({ serviceName,
        _cacheKey }, soaOptions));
    const agent = (method, params, invokeOpt = {}) => {
        if (!method) {
            return shared_1.promiseAbort(Promise.reject(new Error('miss method')));
        }
        const { query = {}, timeout, head, headers, responseIncludeHeaders = false } = invokeOpt;
        const skipValid = true;
        const reqParams = {};
        if (headers) {
            reqParams.headers = headers;
        }
        if (timeout && timeout > 0) {
            reqParams.responseTimeout = timeout;
        }
        if (headKey && params && !(headKey in params)) {
            const commonHead = getHead(agent.getData());
            params[headKey] = Object.assign({}, commonHead || {}, head || {});
        }
        let promise;
        promise = soaDirectAgent.init().then(() => soaDirectAgent.invoke({
            method,
            args: params,
            skipValid,
            query: query,
            reqEphemeralParams: reqParams,
            isResHeaders: responseIncludeHeaders,
        }));
        promise = promise.then((res) => {
            if (invalidResponse) {
                invalidResponse(res, method, params, invokeOpt, { serviceCode: String(serviceCode) });
            }
            return res;
        });
        if (timeout) {
            promise = shared_1.promiseTimeout(timeout, promise);
        }
        const abortablePromise = shared_1.promiseAbort(promise);
        return abortablePromise;
    };
    agent._data = {};
    agent.setData = data => {
        agent._data = data;
    };
    agent.getData = () => agent._data;
    return agent;
};
//# sourceMappingURL=soa.js.map
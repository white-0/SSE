function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
import { buildQuery, promiseAbort } from '../shared/utils';
import { request } from './request';
import { defaultInvalidResponse } from '../shared/defaults';
var SOA_PREFIX = '/restapi/soa2';
function buildSoaUrl(serviceCode, method) {
  return "".concat(SOA_PREFIX, "/").concat(serviceCode, "/json/").concat(method);
}
export var createSoaAgent = function createSoaAgent(serviceCode) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$headKey = options.headKey,
    headKey = _options$headKey === void 0 ? null : _options$headKey,
    _options$getHead = options.getHead,
    getHead = _options$getHead === void 0 ? function () {
      return {};
    } : _options$getHead,
    _options$invalidRespo = options.invalidResponse,
    invalidResponse = _options$invalidRespo === void 0 ? defaultInvalidResponse : _options$invalidRespo,
    _options$getRequestUR = options.getRequestURL,
    getRequestURL = _options$getRequestUR === void 0 ? buildSoaUrl : _options$getRequestUR;
  var agent = function agent(method, params) {
    var invokeOpt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    if (!method) {
      return promiseAbort(Promise.reject(new Error('miss method')));
    }
    var query = invokeOpt.query,
      timeout = invokeOpt.timeout,
      head = invokeOpt.head,
      headers = invokeOpt.headers,
      _invokeOpt$responseIn = invokeOpt.responseIncludeHeaders,
      responseIncludeHeaders = _invokeOpt$responseIn === void 0 ? false : _invokeOpt$responseIn;
    var url = getRequestURL(serviceCode, method) + (query ? "?".concat(buildQuery(query)) : '');
    if (headKey && params && !(headKey in params)) {
      var commonHead = getHead(agent.getData());
      params[headKey] = Object.assign({}, commonHead || {}, head || {});
    }
    var promise = request({
      url: url,
      method: 'POST',
      data: params,
      timeout: timeout,
      headers: headers,
      transformResponse: function transformResponse(data, _ref) {
        var headers = _ref.headers;
        if (invalidResponse) {
          invalidResponse(data, method, params, invokeOpt, {
            serviceCode: String(serviceCode)
          });
        }
        if (responseIncludeHeaders && _typeof(data) === 'object' && data !== null) {
          data['SOA.ResponseHeaders'] = headers;
        }
        return data;
      }
    });
    return promise;
  };
  agent._data = {};
  agent.setData = function (data) {
    agent._data = data;
  };
  agent.getData = function () {
    return agent._data;
  };
  return agent;
};
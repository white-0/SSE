import { RequestOptions } from '../../interface';
import { RequestError } from '../../node';
export declare type AjaxRequestInfo = Omit<RequestOptions, 'cache'>;
declare type OmitPartial<P, K extends keyof P> = Partial<Omit<P, K>> & Pick<P, K>;
export declare type AjaxFailDetail = OmitPartial<AjaxRequestInfo, 'url'> & {
    responseHeaders?: Record<string, string>;
    response?: any;
};
export declare function trackAjaxFail(error: ProgressEvent<XMLHttpRequestEventTarget> | RequestError | Error, detail: AjaxFailDetail, _xhr?: XMLHttpRequest): void;
export declare type AjaxSuccessDetail = OmitPartial<AjaxRequestInfo, 'url'> & {
    responseHeaders?: Record<string, string>;
    response?: any;
};
export declare function trackAjaxSuccess(response: any, { url, responseHeaders }: AjaxSuccessDetail, xhr?: XMLHttpRequest): Promise<number>;
export declare function trackAjax(xhr: XMLHttpRequest, url: string): Promise<unknown>;
export {};

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { defaultInvalidResponse } from '../shared/defaults';
import {
// getRpcSoaAgent,
getSoaDirectAgent } from './agent';
import { promiseTimeout, promiseAbort } from '../shared';
export var createSoaAgent = function createSoaAgent(serviceCode) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$serviceName = options.serviceName,
    serviceName = _options$serviceName === void 0 ? '' : _options$serviceName,
    _options$soaOptions = options.soaOptions,
    soaOptions = _options$soaOptions === void 0 ? {} : _options$soaOptions,
    _options$headKey = options.headKey,
    headKey = _options$headKey === void 0 ? null : _options$headKey,
    _options$getHead = options.getHead,
    getHead = _options$getHead === void 0 ? function () {
      return {};
    } : _options$getHead,
    _options$invalidRespo = options.invalidResponse,
    invalidResponse = _options$invalidRespo === void 0 ? defaultInvalidResponse : _options$invalidRespo,
    _options$_cacheKey = options._cacheKey,
    _cacheKey = _options$_cacheKey === void 0 ? '' : _options$_cacheKey;
  var soaDirectAgent = getSoaDirectAgent(String(serviceCode), _objectSpread({
    serviceName: serviceName,
    _cacheKey: _cacheKey
  }, soaOptions));
  var agent = function agent(method, params) {
    var invokeOpt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    if (!method) {
      return promiseAbort(Promise.reject(new Error('miss method')));
    }
    var _invokeOpt$query = invokeOpt.query,
      query = _invokeOpt$query === void 0 ? {} : _invokeOpt$query,
      timeout = invokeOpt.timeout,
      head = invokeOpt.head,
      headers = invokeOpt.headers,
      _invokeOpt$responseIn = invokeOpt.responseIncludeHeaders,
      responseIncludeHeaders = _invokeOpt$responseIn === void 0 ? false : _invokeOpt$responseIn;
    var skipValid = true;
    var reqParams = {};
    if (headers) {
      reqParams.headers = headers;
    }
    if (timeout && timeout > 0) {
      reqParams.responseTimeout = timeout;
    }
    if (headKey && params && !(headKey in params)) {
      var commonHead = getHead(agent.getData());
      params[headKey] = Object.assign({}, commonHead || {}, head || {});
    }
    var promise;
    promise = soaDirectAgent.init().then(function () {
      return soaDirectAgent.invoke({
        method: method,
        args: params,
        skipValid: skipValid,
        query: query,
        reqEphemeralParams: reqParams,
        isResHeaders: responseIncludeHeaders
      });
    });
    promise = promise.then(function (res) {
      if (invalidResponse) {
        invalidResponse(res, method, params, invokeOpt, {
          serviceCode: String(serviceCode)
        });
      }
      return res;
    });
    if (timeout) {
      promise = promiseTimeout(timeout, promise);
    }
    var abortablePromise = promiseAbort(promise);
    return abortablePromise;
  };
  agent._data = {};
  agent.setData = function (data) {
    agent._data = data;
  };
  agent.getData = function () {
    return agent._data;
  };
  return agent;
};
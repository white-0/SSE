import axios from 'axios';
import { bindRequestMethods } from '../helper';
import { createRequestError, TimeoutError, AbortError } from '../shared/errors';
import { validStatus } from '../shared';
import { defaultErrorHandler } from '../shared/default-error-handler';
var ABORT_MESSAGE = 'request abort by user';
var _request = function _request(opt) {
  var dataType = opt.dataType,
    contentType = opt.contentType,
    _opt$headers = opt.headers,
    headers = _opt$headers === void 0 ? {} : _opt$headers,
    params = opt.params;
  var tokenSource = axios.CancelToken.source();
  if (contentType) {
    headers['Content-Type'] = contentType;
  }
  var axiosOptions = {
    url: opt.url,
    method: opt.method,
    data: opt.data,
    responseType: dataType === 'script' ? 'text' : dataType,
    timeout: opt.timeout,
    headers: headers,
    cancelToken: tokenSource.token,
    params: params
  };
  var promise = axios(axiosOptions).then(function (res) {
    if (validStatus(res.status)) {
      return res.data;
    }
    var err = new Error("response ".concat(opt.url, " status ").concat(res.status, " is not correct"));
    var requestError = createRequestError(err, opt, res);
    throw requestError;
  }, function (err) {
    var realError = err;
    // for timeout error
    if (err.message.indexOf('timeout') > -1) {
      realError = new TimeoutError(opt.timeout || 0, err.stack);
    } else if (err.message === ABORT_MESSAGE) {
      realError = AbortError.MANUAL_ABORT_ERROR();
    }
    var requestError = createRequestError(realError, opt);
    if (defaultErrorHandler) {
      defaultErrorHandler(requestError);
    } else {
      throw requestError;
    }
  });
  promise.abort = function () {
    tokenSource.cancel(ABORT_MESSAGE);
  };
  return promise;
};
var request = bindRequestMethods(_request);
export { request };
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { lazyRequire } from './utils';
var SoaAgentVampire = lazyRequire('@ctrip/node-vampire-soa');
var SoaDirectAgentVampire = lazyRequire('@ctrip/node-vampire-soa-client');
var CloudRpc = lazyRequire('@ctrip/cloud-rpc');

// 自行处理 soa 错误+
// appConfig['SOA.HandleServiceErrorManually'] = true;

var soaAgentCache = new Map();
export function getSoaAgent(serviceCode) {
  var agent = soaAgentCache.get(serviceCode);
  if (!agent) {
    agent = SoaAgentVampire.current.SoaAgent(serviceCode);
    soaAgentCache.set(serviceCode, agent);
  }
  return agent;
}
var soaDirectAgentCache = new Map();
export function getSoaDirectAgent(serviceCode) {
  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _opt$_cacheKey = opt._cacheKey,
    _cacheKey = _opt$_cacheKey === void 0 ? '' : _opt$_cacheKey;
  var cacheKey = "".concat(serviceCode).concat(_cacheKey ? "_".concat(_cacheKey) : '');
  var agent = soaDirectAgentCache.get(cacheKey);
  if (!agent) {
    // use direct agent first
    if (SoaDirectAgentVampire.current) {
      agent = new SoaDirectAgentVampire.current.SoaDirectApi(_objectSpread(_objectSpread({}, opt), {}, {
        serviceCode: serviceCode
      }));
      soaDirectAgentCache.set(cacheKey, agent);
    }
    // use cloud rpc second, will be remove in the future.
    else if (CloudRpc.current) {
      // opt.serviceName must be exit!
      agent = new CloudRpc.current(_objectSpread(_objectSpread({}, opt), {}, {
        serviceCode: serviceCode
      }));
      soaDirectAgentCache.set(cacheKey, agent);
    } else {
      throw Error('[Deps Error]: please install @ctrip/node-vampire-soa-client');
    }
  }
  return agent;
}
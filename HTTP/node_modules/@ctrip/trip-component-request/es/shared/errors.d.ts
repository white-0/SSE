import { RequestOptions, SoaResponse } from '../interface';
interface IRequestError<D extends any = any, T extends Error = Error> {
    url: string;
    option: PartialRequestOptions;
    status?: number;
    statusText?: string;
    headers?: Record<string, string>;
    data?: D;
    originError: T;
    isRequestError: boolean;
}
declare type PartialPick<T, K extends keyof T> = Pick<T, K> & Partial<Omit<T, K>>;
declare type RequestErrorDetail = Pick<RequestError, 'status' | 'statusText' | 'headers' | 'data'>;
declare type PartialRequestOptions = PartialPick<RequestOptions, 'method' | 'url'>;
export declare class RequestError extends Error implements IRequestError {
    url: string;
    option: PartialRequestOptions;
    status?: number | undefined;
    statusText?: string | undefined;
    headers?: Record<string, string> | undefined;
    data?: any;
    originError: Error;
    isRequestError: boolean;
    event?: ProgressEvent<XMLHttpRequest>;
    constructor(err: Error, opt: PartialRequestOptions, detail?: RequestErrorDetail);
}
export declare const createRequestError: (err: Error, opt: PartialRequestOptions, detail?: Pick<RequestError, 'status' | 'statusText' | 'headers' | 'data'>) => RequestError;
export declare class TimeoutError extends Error {
    constructor(time: number, stack?: Error['stack']);
}
export declare class AbortError extends Error {
    static MANUAL_ABORT_MESSAGE: string;
    static MANUAL_ABORT_ERROR: () => AbortError;
    isCancelByUser: boolean;
    constructor(reason?: string, stack?: Error['stack'], isAbortByUser?: boolean);
}
export declare class SoaResponseStatusError extends Error {
    response: any;
    request: any;
    constructor(response: SoaResponse<any>, requestDetail: {
        serviceCode?: string;
        method: string;
        params: any;
    });
}
export declare function isRequestError(error: Partial<RequestError>): error is RequestError;
export declare function isTimeoutError(error: IRequestError | Error): error is TimeoutError;
export declare function isAbortError(error: IRequestError | Error): error is AbortError;
export {};

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var USED_TRACE_ID = {
  RootMessageId: true,
  CLOGGING_TRACE_ID: true
};
export function findMessageTraceId(response) {
  var ids = {};
  try {
    if (_typeof(response) === 'object') {
      var status = response.ResponseStatus || response.responseStatus || response.ResponseStatusType;
      var extensions = status && (status.Extension || status.extension);
      if (extensions) {
        for (var index = 0; index < extensions.length; index++) {
          var extension = extensions[index];
          var key = extension.Id || extension.id;
          var val = extension.Value || extension.value;
          if (key && val && key in USED_TRACE_ID) {
            ids[key] = val;
          }
        }
      }
    }
  } catch (error) {}
  return ids;
}
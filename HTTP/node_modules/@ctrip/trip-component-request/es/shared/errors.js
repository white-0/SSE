var _class2;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _isNativeFunction(fn) { try { return Function.toString.call(fn).indexOf("[native code]") !== -1; } catch (e) { return typeof fn === "function"; } }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { findMessageTraceId } from './trace';
export var RequestError = /*#__PURE__*/function (_Error) {
  _inherits(RequestError, _Error);
  var _super = _createSuper(RequestError);
  function RequestError(err, opt) {
    var _this;
    var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    _classCallCheck(this, RequestError);
    _this = _super.call(this, '');
    _defineProperty(_assertThisInitialized(_this), "url", void 0);
    _defineProperty(_assertThisInitialized(_this), "option", void 0);
    _defineProperty(_assertThisInitialized(_this), "status", void 0);
    _defineProperty(_assertThisInitialized(_this), "statusText", void 0);
    _defineProperty(_assertThisInitialized(_this), "headers", void 0);
    _defineProperty(_assertThisInitialized(_this), "data", void 0);
    _defineProperty(_assertThisInitialized(_this), "originError", void 0);
    _defineProperty(_assertThisInitialized(_this), "isRequestError", void 0);
    _defineProperty(_assertThisInitialized(_this), "event", void 0);
    formateError(err, opt, detail);
    Object.assign(_assertThisInitialized(_this), err);
    _this.message = err.message;
    _this.stack = err.stack;
    _this.originError = err;
    _this.url = opt.url || '';
    _this.option = opt;
    _this.status = detail.status;
    _this.statusText = detail.statusText;
    _this.headers = detail.headers;
    _this.data = detail.data;
    _this.isRequestError = true;
    return _this;
  }
  return _createClass(RequestError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
function formateError(error, opt, detail) {
  try {
    error.message = "request ".concat(opt.method, " \"").concat(opt.url, "\" ").concat(detail.status || 'fail', ": ").concat(error.message);
    error.stack = error.stack || 'empty stack';
    if (detail.data) {
      var ids = findMessageTraceId(detail.data);
      if (ids.CLOGGING_TRACE_ID) {
        error.message += "\nCLOGGING_TRACE_ID: \"".concat(ids.CLOGGING_TRACE_ID, "\"");
      }
      if (ids.RootMessageId) {
        error.message += "\nRootMessageId: \"".concat(ids.RootMessageId, "\"");
      }
    }
  } catch (e) {
    console.error(e);
  }
}
export var createRequestError = function createRequestError(err, opt) {
  var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var requestError = isRequestError(err) ? err : new RequestError(err, opt, detail);
  return requestError;
};
export var TimeoutError = /*#__PURE__*/function (_Error2) {
  _inherits(TimeoutError, _Error2);
  var _super2 = _createSuper(TimeoutError);
  function TimeoutError(time, stack) {
    var _this2;
    _classCallCheck(this, TimeoutError);
    _this2 = _super2.call(this, "promise timeout of ".concat(time, "ms exceeded"));
    if (stack) {
      _this2.stack = stack;
    }
    return _this2;
  }
  return _createClass(TimeoutError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
export var AbortError = /*#__PURE__*/function (_Error3) {
  _inherits(AbortError, _Error3);
  var _super3 = _createSuper(AbortError);
  function AbortError() {
    var _this3;
    var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var stack = arguments.length > 1 ? arguments[1] : undefined;
    var isAbortByUser = arguments.length > 2 ? arguments[2] : undefined;
    _classCallCheck(this, AbortError);
    _this3 = _super3.call(this, "request aborted".concat(reason ? ", because: ".concat(reason) : ''));
    _defineProperty(_assertThisInitialized(_this3), "isCancelByUser", void 0);
    if (stack) {
      _this3.stack = stack;
    }
    _this3.isCancelByUser = isAbortByUser !== null && isAbortByUser !== void 0 ? isAbortByUser : reason === AbortError.MANUAL_ABORT_MESSAGE;
    return _this3;
  }
  return _createClass(AbortError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
_class2 = AbortError;
_defineProperty(AbortError, "MANUAL_ABORT_MESSAGE", 'user manual abort request');
_defineProperty(AbortError, "MANUAL_ABORT_ERROR", function () {
  return new _class2(_class2.MANUAL_ABORT_MESSAGE, undefined, true);
});
export var SoaResponseStatusError = /*#__PURE__*/function (_Error4) {
  _inherits(SoaResponseStatusError, _Error4);
  var _super4 = _createSuper(SoaResponseStatusError);
  function SoaResponseStatusError(response, requestDetail) {
    var _this4;
    _classCallCheck(this, SoaResponseStatusError);
    _this4 = _super4.call(this, "Soa \"".concat(requestDetail.serviceCode || 'UnknownService', ".").concat(requestDetail.method, "\" response status or code error"));
    _defineProperty(_assertThisInitialized(_this4), "response", void 0);
    _defineProperty(_assertThisInitialized(_this4), "request", void 0);
    _this4.request = requestDetail;
    _this4.response = response;
    return _this4;
  }
  return _createClass(SoaResponseStatusError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
export function isRequestError(error) {
  return typeof error.isRequestError === 'boolean';
}
export function isTimeoutError(error) {
  var realError = isRequestError(error) ? error.originError : error;
  return realError instanceof TimeoutError || realError.message.indexOf('timeout') > -1;
}
export function isAbortError(error) {
  var realError = isRequestError(error) ? error.originError : error;
  return realError instanceof AbortError || realError.message.indexOf('aborted') > -1;
}
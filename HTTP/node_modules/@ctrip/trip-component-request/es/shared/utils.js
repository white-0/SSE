import { TimeoutError, AbortError } from './errors';
export { buildQuery, parseQuery } from '@ctrip/trip-component-utils';
/**
 * 返回一个新的 promise, 在 time 内如果原来的 promise 没有 resolve，则 reject;
 * @param time 时间
 * @param promise promise
 */
export function promiseTimeout(time, promise) {
  var resolved = false;
  return new Promise(function (resolve, reject) {
    promise.then(function (res) {
      resolved = true;
      resolve(res);
    }).catch(function (err) {
      resolved = true;
      reject(err);
    });
    setTimeout(function () {
      if (!resolved) {
        reject(new TimeoutError(time));
      }
    }, time);
  });
}
export function promiseAbort(promise) {
  var promiseReject;
  var aborter = function aborter() {
    var _promiseReject;
    (_promiseReject = promiseReject) === null || _promiseReject === void 0 || _promiseReject(AbortError.MANUAL_ABORT_ERROR());
  };
  var abortablePromise = new Promise(function (resolve, reject) {
    promise.then(resolve, reject);
    promiseReject = reject;
  });
  abortablePromise.abort = aborter;
  return abortablePromise;
}
export function isAbortable(promise) {
  return typeof promise.abort === 'function';
}
export function validStatus(status, protocol) {
  return status >= 200 && status < 300 || status === 304 || protocol === 'file:' && status === 0;
}
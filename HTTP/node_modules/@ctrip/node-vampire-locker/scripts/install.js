const os = require('os');
const http = require('http');
const fs = require('fs');
const path = require('path');

let preBuildPath = '@ctrip/node-vampire-locker-prebuild-' + os.platform() + '-' + os.arch();

try {
    require.resolve(preBuildPath);
    console.log('[ PREBUILD ] PreBuild Version: ' + preBuildPath + ' is found');
} catch (e) {
    console.log('[ PREBUILD ] Missing PreBuild Version: ' + preBuildPath + ', Try Download.');
    console.log('[ PREBUILD ] If the previous step failed to download, please visit http://nodejs/ to contact us');
    downloadPrebuild();
}

function downloadPrebuild() {
    fs.mkdirSync(path.resolve(__dirname, '../build'), { recursive: true });
    const downloadDist = path.resolve(__dirname, '../build/locker.node');
    const packageJson = require('../package.json');
    const prebuildVersion = packageJson.optionalDependencies[preBuildPath] || 'latest';
    const downloadUrl = `http://unpkg.fx.ctripcorp.com/${preBuildPath}@${prebuildVersion}/locker.node`;
    download(downloadUrl, downloadDist, () => {
        console.log('[ PREBUILD ] Downloading PreBuild File: ' + downloadUrl + ' success.');
    }, () => {
        console.log('[ PREBUILD ] Downloading PreBuild File: ' + downloadUrl + ' failure. Try install ' + preBuildPath + ' manullay.');
        process.exit(1);
    });
}

function download(src, dist, onSuccess, onError) {
    http.get(src, function (response) {
        if (response.statusCode === 301 || response.statusCode === 302) {
            const newSrc = new URL(response.headers.location, src);
            return download(newSrc, dist, onSuccess, onError);
        }
        if (response.statusCode !== 200) {
            return onError && onError();
        }
        const file = fs.createWriteStream(dist);
        response.pipe(file);
        file.on('finish', () => {
            onSuccess && onSuccess();
        }).on('error', () => {
            onError && onError();
        });
    });
}
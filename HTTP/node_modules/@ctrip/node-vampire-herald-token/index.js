const os = require('os');
const fs = require('fs');
const clog = require('@ctrip/node-vampire-clogging');
class Token {
    constructor() {
        this.heraldEnvKey = "HERALD_ACCOUNT_ID";
    }
    getHeraldToken() {
        const heraldAccountID = process.env[this.heraldEnvKey];
        if (heraldAccountID == null || heraldAccountID == "") {
            clog.warn("Environment Variable HERALD_ACCOUNT_ID is null or empty");
            return null;
        }
        const heraldPath = this.getHeraldTokenPath(heraldAccountID);
        return this.readFile(heraldPath).then((data) => data).catch((e) => {
            clog.warn("Get IOException when read HERALD TOKEN: ", e);
            return null;
        });
    }
    getHeraldTokenPath(accountID) {
        let path = '';
        if (os.platform() === 'linux') {
            path = `/opt/settings/${accountID}/herald/HERALD_TOKEN`;
        }
        return path;
    }
    readFile(path) {
        return new Promise((resolve, reject) => {
            fs.readFile(path, {
                'encoding': 'utf8'
            }, (e, data) => e ? reject(e) : resolve(data));
        });
    }
}

module.exports = new Token();
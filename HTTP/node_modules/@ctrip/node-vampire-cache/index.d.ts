interface cache {
    increase(instance: any, name: string, increase_by?: number): void;

    exchange(instance: any, name: string, new_value: any): void;

    SIZE_DEFAULT: number,
    SIZE_64: number,
    SIZE_128: number,
    SIZE_256: number,
    SIZE_512: number,
    SIZE_1K: number,
    SIZE_2K: number,
    SIZE_4K: number,
    SIZE_8K: number,
    SIZE_16K: number,
    Cache: typeof _Cache,
    Locker: typeof _Locker
}

export class _Cache {
    constructor(name: string, size: number, blockSize?: number);

    [x: string]: any;
}

export class _Locker {
    constructor(name: string, appIsolated?: boolean, seq?: number);

    runSync: (callback: () => void) => void;

    run: (callback: (done: () => void) => void) => any;
}

export const _cache: cache;

export default _cache;

/**get dependency package info from current project */
// const globalUtil = require('util');
// const exec = require('child_process').exec;
// const spawn = require('child_process').spawn;
const util = require("@ctrip/node-vampire-util");
// const pkgVersion = require('./getPkgVersion');

function PkgInfo(opt) {
  /** init config */
  this.__opt = Object.assign(
    {
      depth: 1, //npm list depth,default is 1
    },
    opt || {}
  );
  /** pkg origin info(get from npm list)*/
  this.__orginInfo = {};
  /** reconstruct data(only keep package name and version) */
  this.__info = {};
  /** got npm list status */
  this.__infoFlag = false;
  /** default pkg key temporary solution(need to upgrade)*/
  this.__defaultPkgList = [
    "ctriputil",
    "@ctrip/node-vampire-appconfig",
    "@ctrip/node-vampire-abtest",
    "@ctrip/node-vampire-artemis",
    "@ctrip/node-vampire-cache",
    "@ctrip/node-vampire-cat",
    "@ctrip/node-vampire-bat",
    "@ctrip/node-vampire-ceph",
    "@ctrip/node-vampire-clogging",
    "@ctrip/node-vampire-dal",
    "@ctrip/node-vampire-foundation-framework",
    "@ctrip/node-vampire-hermes",
    "@ctrip/node-vampire-hermes-securebdp",
    "@ctrip/node-vampire-http",
    "@ctrip/node-vampire-metric",
    "@ctrip/node-vampire-qconfig",
    "@ctrip/node-vampire-soa",
    "@ctrip/node-vampire-soa-client",
    "@ctrip/node-vampire-soa-server",
    "@ctrip/node-vampire-util",
    "@ctrip/node-vampire-locker",
    "@ctrip/node-vampire-cache",
    "@ctrip/node-vampire-redis",
    "@ctrip/qconfig-client",
    "@ctrip/node-vampire-qmq",
    "@ctrip/node-vampire-triplog",
    "@ctrip/node-vampire-sso-filter",
    "@ctrip/node-vampire-schedule",
    "@ctrip/node-vampire-soa-server-middleware",
    "@ctrip/nfes",
    "@ctrip/nfes-core",
    "@ctrip/nfes-next",
    "@ctrip/tripcore",
  ];

  // this.pkgList = this.__defaultPkgList.concat(opt.pkgList || []);
  this.__init();
}

/** 获取package中的信息 *
PkgInfo.prototype.__initPromise = function() {
    return new Promise((resolve, reject) => {
        let result = [];
        const npmlistCmd = spawn(process.platform === 'win32' ? 'npm.cmd' : 'npm', ['list', '--silent', '--depth=' + this.__opt.depth, '--json', '--only=prod']);

        npmlistCmd.stdout.on('data', function(data) {
            result.push(data);
        });

        npmlistCmd.stderr.on('data', function(data) {
            reject(data.toString());
        });

        npmlistCmd.on('close', function(code) {
            // console.log('close: ', code);
            if (code == 0) {
                resolve(Buffer.concat(result).toString());
            } else {
                reject('exit with code ' + code);
            }
        });
    });
};
/******/

/** 读取所有package的信息，并处理设置到info中 *
PkgInfo.prototype.__init = function() {
    this.__initPromise().then((result) => {
        try {
            this.__orginInfo = JSON.parse(result);
            this.__info = getPkgDependencies(this.__orginInfo['dependencies']);
            this.__infoFlag = true;
        } catch (inner_error) {
            console.log('npm list parse json result error occured.');
        }
    }).catch(() => {
        console.log('npm list error occurred, see detail by "npm list".');
    });
};
/******/

PkgInfo.prototype.__init = function () {
  try {
    this.__info['nodejs'] = process.version.slice(1);

    try {
      if (require('module').builtinModules.includes('tripcore')) {
        this.__info['[tripcore]'] = require('tripcore').versions.tripcore.version;
      }
    } catch (e) {
      // ignore error
    }

    this.__defaultPkgList.forEach((item) => {
      let version = util.getModuleVersion(item);
      if (version) {
        this.__info[item.startsWith("@ctrip/") ? item.slice(7) : item] =
          version;
      }
    });
  } catch (e) {
    console.log("[ @ctrip/node-vampire-pkginfo ] Init Error: ", e);
  }
};

/** 设置某一条packge的信息
 * @param {String} key 依赖模块名称
 * @param {String} value 版本号
 * @return {String} 如果原本存在这个key，则返回更新之前的值。
 */
PkgInfo.prototype.setInfo = function (key, value, callback) {
  let info = this.__info;
  let originValue = info[key];
  this.__info[key] = value;
  callback && callback(originValue);
};

/**获取package信息 (根据)
 * @param {Object} options  配置信息
 * @param {String|Array} options.startsWith 以字符开头的包
 * @return {Object} 包信息列表
 */
PkgInfo.prototype.getInfo = function (opts, callback) {
  opts = opts || {};
  // let startsWith = opts['startsWith'] || null;
  let ret = this.__info;
  // if(this.__infoFlag && ){
  //     if (startsWith) {
  //         //可以接收字符串/数组方式的传参
  //         switch (util.type(startsWith)) {
  //             case 'string':
  //                 ret = this.__getInfoByStartWith(startsWith);
  //                 break;
  //             case 'array':
  //                 let newObj = {};
  //                 for (let i = 0, l = startsWith.length; i < l; i++) {
  //                     let currentObj = this.__getInfoByStartWith(startsWith[i]);
  //                     newObj = Object.assign(currentObj, newObj);
  //                 }
  //                 ret = newObj;
  //                 break;
  //             default:
  //                 ret = {};
  //                 break;
  //         }
  //     } else {
  //         ret = this.__info;
  //     }
  // }
  callback && callback(ret);
};

PkgInfo.prototype.__getInfoByStartWith = function (startsWith) {
  let info = this.__info;
  let newInfo = {};
  Object.getOwnPropertyNames(info).forEach((key) => {
    if (key.startsWith(startsWith)) {
      newInfo[key.startsWith("@ctrip/") ? key.slice(7) : key] = info[key];
    }
  });
  return newInfo;
};

// function getPkgDependencies(data) {
//     let obj = {};
//     Object.getOwnPropertyNames(data).forEach((key) => {
//         obj[key] = data[key]['version'];
//         if (data[key]['dependencies']) {
//             obj = Object.assign(getPkgDependencies(data[key]['dependencies']), obj);
//         }
//     });
//     return obj;
// }

module.exports = new PkgInfo();

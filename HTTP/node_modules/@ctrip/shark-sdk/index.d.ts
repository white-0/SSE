import 'http';

declare module 'http' {
  interface IncomingMessage {
    shark: shark.SharkContext;
  }
}

declare module 'koa' {
  interface BaseContext {
    shark: shark.SharkContext;
  }
}

interface SharkBaseContext {
  getLocale(): string;
  setLocale(locale: string);
  getGroup(): string;
  setGroup(group: string);
  getAll(appID: number|string): Record<string, string>;
  query(key: string, options?: {locale?: string, appID?: number|string, num?: number|string, group?: string, direct?: boolean }): string;
  getTranslation(key: string, options?: { appID?: number|string }): string;
  directGetTranslation(key: string, options?: { appID?: number|string }): string;
  DateTimeFormat(timezone: shark.Timezone): DateTimeFormatter;
  DurationFormat(): DurationFormatter;
  MeasurementFormat(): MeasurementFormatter;
  NameFormat(): NameFormatter;
  NumberFormat(): NumberFormatter;
  PhoneFormat(): PhoneFormatter;
  getPluralTranslation(key: string, num: string|number, options?: { appID?: number|string }): string;
}

interface DateTimeFormatter {
  mdShortString (timeStamp: string|number):string;
  mdFullString (timeStamp: string|number):string;
  mdeFullString (timeStamp: string|number):string;
  mdeShortString (timeStamp: string|number):string;
  mdhmFullString (timeStamp: string|number):string;
  mdhmShortString (timeStamp: string|number):string;
  mdhmsFullString (timeStamp: string|number):string;
  mdhmsShortString (timeStamp: string|number):string;
  ymFullString (timeStamp: string|number):string;
  ymShortString (timeStamp: string|number):string;
  ymdFullString (timeStamp: string|number):string;
  ymdShortString (timeStamp: string|number):string;
  ymdhmFullString (timeStamp: string|number):string;
  ymdhmShortString (timeStamp: string|number):string;
  ymdhmsFullString (timeStamp: string|number):string;
  ymdhmsShortString (timeStamp: string|number):string;
  ymdeFullString (timeStamp: string|number):string;
  ymdeShortString (timeStamp: string|number):string;
  ymdhmeFullString (timeStamp: string|number):string;
  ymdhmeShortString (timeStamp: string|number):string;
  ymdhmseFullString (timeStamp: string|number):string;
  ymdhmseShortString (timeStamp: string|number):string;
  hmeShortString (timeStamp: string|number):string;
  hmeFullString (timeStamp: string|number):string;
  hmseShortString (timeStamp: string|number):string;
  hmseFullString (timeStamp: string|number):string;
  eFullString (timeStamp: string|number):string;
  eShortString (timeStamp: string|number):string;
  mFullString (timeStamp: string|number):string;
  mShortString (timeStamp: string|number):string;
  hmString (timeStamp: string|number):string;
  hmsString (timeStamp: string|number):string;
  yString (timeStamp: string|number):string;
  mdhmeShortString (timeStamp: string|number):string;
  mdhmeFullString (timeStamp: string|number):string;
}

interface DurationFormatter {
  convertToString(
      duration: number|string,
      pattern: string,
      isAutoAbbr?: boolean,
      isFullName?: boolean
  ): string;
}

interface MeasurementFormatter {
  formatString(
      number: number|string,
      fromType: shark.L10N_UNIT,
      useGrouping?: boolean,
      minimumFractionDigits?: number,
      maximumFractionDigits?: number,
      extendOption?: {
        roundingMode: shark.L10N_ROUNDING_MODE,
        trimRedundantZero: true,
      }
  ): string;
  convert(
      number: number|string,
      fromType: shark.L10N_UNIT,
      toType: shark.L10N_UNIT,
      useGrouping?: boolean,
      minimumFractionDigits?: number,
      maximumFractionDigits?: number,
      extendOption?: {
        roundingMode: shark.L10N_ROUNDING_MODE,
        trimRedundantZero: true,
      }
  ): string;

  convertToPreferences(
      number: number|string,
      fromType: shark.L10N_UNIT,
      preferencesUnit?: shark.L10N_UNIT_COLLECTION,
      useGrouping?: boolean,
      minimumFractionDigits?: number,
      maximumFractionDigits?: number,
      extendOption?: {
        roundingMode: shark.L10N_ROUNDING_MODE,
        trimRedundantZero: true,
      }
  ): string;
}

declare enum CredentialType {
  IDCardCredentialType = 'IDCard',
  PassportCredentialType = 'Passport',
  DrivingCardCredentialType = 'DrivingCard',
  HomeReturnPermitCredentialType  = 'HRP',
  MTPCredentialType = 'MTP',
  UsualCredentialType = 'Usual',
  UsualNoMidNameCredentialType = 'UsualNoMidName',
}

declare type INameModel = {
  type: string;
  title: string;
  sample: string;
  sampleForEn: string;
};
interface NameFormatter {
  nameTypesWithCredentialType(credentialType: CredentialType): INameModel [];
}

interface NumberFormatter {
  decimalString (
    decimalNum: number|string,
    useGrouping?: boolean,
    minimumFractionDigits?: number,
    maximumFractionDigits?: number,
    extendOption?: {
      showPercentage?: boolean,
      numberFormatCustomized?: string,
      roundingMode?: shark.L10N_ROUNDING_MODE
    }
  ): string;

  shortDecimalString (
    decimalNum: number|string,
    useGrouping?: boolean,
    minimumFractionDigits?: number,
    maximumFractionDigits?: number,
    extendOption?: {
      showPercentage?: boolean,
      numberFormatCustomized?: string,
      roundingMode?: shark.L10N_ROUNDING_MODE,
      trimRedundantZero?: boolean,
    }
  ): string;

  currencyString (
    decimalNum: number|string,
    currency?: string,
    useGrouping?: boolean,
    minimumFractionDigits?: number,
    maximumFractionDigits?: number,
    extendOption?: {
      currencyFormatCustomized?: string,
      numberFormatCustomized?: string,
      roundingMode?: shark.L10N_ROUNDING_MODE
    }
  ): string

  specialCurrencyString (
    decimalNum: number|string,
    currency?: string,
    useGrouping?: boolean,
    minimumFractionDigits?: number,
    maximumFractionDigits?: number,
    extendOption?: {
      currencyFormatCustomized?: string,
      numberFormatCustomized?: string,
      roundingMode?: shark.L10N_ROUNDING_MODE
    }
  ): string
}

interface PhoneFormatter {
  validatePhoneNumber (regionCode: string | number, phoneNumber: string | number): boolean;
}

interface Options {
  appID?: number|string;
  logLevel?: shark.LOG_LEVEL;
}

declare namespace shark {
  export function init(options?: Options|null): Promise<any>;
  export function query(options: { key: string, locale: string, appID?: number|string, num?: number|string, group?: string, direct?: boolean }): string;
  export function getTranslation(key: string, locale?: string, group?: string, appID?: string|number): string;
  export function directGetTranslation(key: string, locale?: string, appID?: string|number): string;
  export function getAll(locale: string, group?: string, appID?: string|number): Record<string, string>;
  export function dump(locale: string, appID: string|number, pageID?: string|number): Record<string, string>;
  export function dumpKeys(locale: string, appID: string|number, pageID?: string|number): string [];
  export function getAppIdList(): number [];
  export function getLocaleList(): string [];
  export function registerUpdateEvent(callback: (event: UpdateEvent) => void): void;
  export function DateTimeFormat(locale: string, timezone?: Timezone): DateTimeFormatter;
  export function DurationFormat(locale: string): DurationFormatter;
  export function MeasurementFormat(locale: string): MeasurementFormatter;
  export function NameFormat(locale: string): NameFormatter;
  export function NumberFormat(locale: string): NumberFormatter;
  export function PhoneFormat(locale: string): PhoneFormatter;
  export function getPluralTranslation(key: string, locale?: string, num?: string|number, appID?: string|number): string;

  export type UpdateEvent = { appId: number, pageId: number, locale: string } [];
  export type Timezone = -12 | -11 | -10 | -9 | -8 | -7 | -6 | -5 | -4 | -3 | -2 | -1 | 0 |
    1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;

  export const middleware: (req: object, res: object, next: any) => any;
  export const koaMiddleware: (next: any) => any;
  export const koa2Middleware: (ctx: object, next: any) => Promise<any>;
  export type SharkContext = SharkBaseContext;

  export enum LOG_LEVEL { DEBUG = 0, INFO, WARNING, ERROR, NONE }
  export enum L10N_ROUNDING_MODE { DOWN, HALF_UP, HALF_EVEN, UP }
  export enum L10N_UNIT { Kilometer, Mile, SquareMeter, SquareFeet, Celsius, Fahrenheit, Meter, Feet, Kilogram, Pound }
  export enum L10N_UNIT_COLLECTION { MetricUnit, ImperialUnit }
}

export = shark;

'use strict'
const { EventEmitter } = require('events')
const is = require('is-type-of')
const plural = require('../plural')
const foundation = require('../common/foundation')
const helpers = require('../common/helpers')
const constants = require('../common/constants')
const logger = require('../log')
const store = require('../store')

class I18n extends EventEmitter {
  query (options) {
    const { key, locale, appID, num, group, direct, plugin } = is.isObject(options) ? options : {}

    if (!key || !locale) {
      return ''
    }

    const _appID = parseInt(appID || foundation.appID)

    let value = ''
    if (direct) {
      value = this.directGet(key, locale, _appID)
    } else if (num || is.isNumber(num)) {
      value = plural.getTemplate(key, locale, num, _appID)
    } else {
      value = this.get(key, locale, group, _appID)
    }

    return plugin
      ? `<i data-key='${key}' data-appid='${_appID}'>${value}</i>`
      : value
  }

  get (key, locale, group, appID) {
    locale = helpers.normalizeLocale(locale)
    group = helpers.normalizeGroup(group)
    appID = parseInt(appID || foundation.appID)

    const realAppID = group === constants.GROUPS.CTRIP
      ? appID + 1000000000
      : appID

    // 默认key
    const ret = store.get(realAppID, locale, key)
    logger.debug(appID, locale, key, ret)

    if (ret !== '') {
      return ret
    }

    // trip托底ctrip
    if (group === constants.GROUPS.CTRIP) {
      return this.get(key, locale, constants.GROUPS.TRIP, appID)
    }
    return ''
  }

  directGet (key, locale, appID) {
    locale = helpers.normalizeLocale(locale)
    appID = parseInt(appID || foundation.appID)

    return store.directGet(appID, locale, key)
  }

  getPlugin (key, locale, group, appID) {
    appID = parseInt(appID || foundation.appID)
    let value = this.get(key, locale, group, appID)
    if (is.isSymbol(value)) {
      value = ''
    }
    return `<i data-key='${key}' data-appid='${appID}'>${value}</i>`
  }

  getAll (locale, group, appID) {
    return new Proxy({}, {
      get: (target, key) => {
        if (!is.isString(key) || key === '') {
          return ''
        }
        return this.get(key, locale, group, appID)
      }
    })
  }

  getAllPlugin (locale, group, appID) {
    return new Proxy({}, {
      get: (target, key) => {
        if (!is.isString(key) || key === '') {
          return ''
        }
        return this.getPlugin(key, locale, group, appID)
      }
    })
  }

  dump (locale, appID, pageID = 0) {
    locale = helpers.normalizeLocale(locale)
    appID = parseInt(appID || foundation.appID)
    return store.dump(appID, locale, pageID)
  }

  dumpKeys (locale, appID, pageID = 0) {
    locale = helpers.normalizeLocale(locale)
    appID = parseInt(appID || foundation.appID)
    return store.dumpKeys(appID, locale, pageID)
  }

  getAppIDList () {
    return store.getAppIDList()
  }

  getLocaleList () {
    return store.getLocaleList()
  }
}

module.exports = new I18n()

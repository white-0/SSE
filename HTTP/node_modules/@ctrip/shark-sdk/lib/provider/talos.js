'use strict'
const cat = require('@ctrip/node-vampire-cat')
const pm2 = require('@ctrip/node-vampire-pm2')
const ignitionLog = require('../ignition/log')
const logger = require('../log')
const soa = require('../soa')
const store = require('../store')
const i18n = require('../i18n')
const { extractFullDataFromFile } = require('../util')
const foundation = require('../common/foundation')
const {
  INTERVALS,
  UPDATE_MODE,
  IPC_MESSAGE,
  CATEVENT_TYPE,
  UPDATE_EVENTS
} = require('../common/constants')

class TalosProvider {
  constructor () {
    this.fullUpdateDelay = INTERVALS.TALOS_FULL
    this.incrementalUpdateDelay = INTERVALS.TALOS_INCREMENTAL
    this.sourceUrl = INTERVALS.SOURCE_URL[foundation.idc] || INTERVALS.SOURCE_URL.SHA
    this.useFileLoader = true
    this.queryLogEnable = false
    this.issueQueryLogEnable = false
  }

  /**
   * 初始化全局配置
   */
  initUpdateConfiguration () {
    return soa.talos.getUpdateConfig().then(updateConfigResponse => {
      if (updateConfigResponse) {
        ignitionLog.indexedTags.system_config = 1
        logger.debug('init talos update configuration success!', updateConfigResponse)
      } else {
        updateConfigResponse = {}
        ignitionLog.indexedTags.system_config = 0
        logger.warning('init talos update configuration failed!')
      }
      ignitionLog.indexedTags.init_process.push('config')
      this.fullUpdateDelay = updateConfigResponse.fullUpdateDelay || INTERVALS.TALOS_FULL
      this.incrementalUpdateDelay = updateConfigResponse.incrementalUpdateDelay || INTERVALS.TALOS_INCREMENTAL
      this.sourceUrl = updateConfigResponse.sourceUrl || INTERVALS.SOURCE_URL[foundation.idc] || INTERVALS.SOURCE_URL.SHA
      this.useFileLoader = updateConfigResponse.useFileLoader
      this.queryLogEnable = updateConfigResponse.queryLogEnable
      this.issueQueryLogEnable = updateConfigResponse.issueQueryLogEnable
      store.updateLogEnable({
        queryLogEnable: this.queryLogEnable,
        issueQueryLogEnable: this.issueQueryLogEnable
      })
    }).catch(error => {
      logger.warning('init talos update configuration failed!', error)
    })
  }

  /**
   * 获取翻译数据结构
   */
  fetchSharkStore (appIDList, isIncremental) {
    const fetchData = isIncremental ? this.fetchIncrementalSharkStoreByAppId : this.fetchAllSharkStoreByAppId

    return appIDList.reduce(
      (promise, appID) => promise.then(result => fetchData.bind(this)(appID).then(Array.prototype.concat.bind(result))),
      Promise.resolve([])
    )
  }

  /**
   * 全量获取某个AppID的翻译结构
   */
  fetchAllSharkStoreByAppId (appID, offset = 0, trans = []) {
    return soa.talos.getAllTrans(appID, offset).then(
      translation => {
        trans.push(...translation.trans)
        return store.updateTranslation(UPDATE_MODE.FULL, translation)
      }
    ).then(data => {
      if (data.hasMore) {
        return this.fetchAllSharkStoreByAppId(appID, data.offset, trans)
      }
      logger.debug(`talos fetch ${appID} success`, data)
      return { appID, trans }
    }).catch(error => {
      logger.warning(`talos fetch ${appID} error`, error)
      throw error
    })
  }

  /**
   * 增量获取某个AppID的翻译结构
   */
  fetchIncrementalSharkStoreByAppId (appID, timestamp, list = []) {
    return soa.talos.getTrans(appID, timestamp).then(data => {
      pm2.broadcast(IPC_MESSAGE.TALOS_TRANS, data)
      list.push(...data.trans)
      return store.updateTranslation(UPDATE_MODE.INCREMENTAL, data)
    }).then(data => {
      if (data.updateEventData) {
        logger.debug('talos trigger update event', JSON.stringify(data.updateEventData))
        i18n.emit(UPDATE_EVENTS.KEYS, data.updateEventData)
      }

      if (data.hasMore) {
        logger.debug(`talos fetch incremental ${appID} (${data.timestamp}) success`)
        return this.fetchIncrementalSharkStoreByAppId(appID, data.timestamp, list)
      }
      logger.debug(`talos fetch incremental ${appID} success`, data)
      return { appID, timestamp: data.timestamp, trans: list }
    }).catch(error => {
      logger.warning(`talos fetch incremental ${appID} error`, error)
      throw error
    })
  }

  /**
   * 获取BaseLocale托底结构,同时取到当前应用的所有可用APPID
   */
  fetchBaseLocaleStore (isIncremental) {
    return soa.talos.getLocaleConfig().then(response => {
      if (isIncremental) {
        pm2.broadcast(IPC_MESSAGE.TALOS_BASE_LOCALE, response)
      }
      return store.updateBaseLocaleConfig(response)
    }).catch(error => {
      logger.warning('talos fetch baseLocale error', error)
      throw error
    })
  }

  /**
   * 从主进程获取全量翻译数据+baseLocale
   */
  consumeFullFromMaster () {
    cat.event(CATEVENT_TYPE.IPC, 'sharkStoreFull')
    pm2.on(IPC_MESSAGE.TALOS_FULL_TRANS, () => {
      foundation.fileLocker.run(done => {
        const fileResult = extractFullDataFromFile(foundation.appID)
        store.updateFullTranslationAndBaseLocaleConfig(fileResult)
          .then(() => {
            logger.debug('talos/file consume full success')
          })
          .catch(error => {
            logger.warning('talos/file consume full error', error)
          })
        done()
      })
    })
  }

  /**
   * 从主进程获取Talos翻译数据结构
   */
  consumeSharkStoreFromMaster () {
    cat.event(CATEVENT_TYPE.IPC, 'sharkStore')
    pm2.on(IPC_MESSAGE.TALOS_TRANS, response => {
      store.updateTranslation(UPDATE_MODE.INCREMENTAL, response)
        .then(data => {
          if (data.updateEventData) {
            logger.debug('talos trigger update event', JSON.stringify(data.updateEventData))
            i18n.emit(UPDATE_EVENTS.KEYS, data.updateEventData)
          }
          if (!data.hasMore) {
            logger.debug('talos consume trans success', data)
          }
        })
        .catch(error => {
          logger.warning('talos consume trans error', error)
        })
    })
  }

  /**
   * 从主进程获取Talos BaseLocale配置数据
   */
  consumeSharkBaseLocaleStoreFromMaster () {
    cat.event(CATEVENT_TYPE.IPC, 'baseLocale')
    pm2.on(IPC_MESSAGE.TALOS_BASE_LOCALE, response => {
      store.updateBaseLocaleConfig(response)
        .then(() => {
          logger.debug('talos consume baseLocale success', response)
        })
        .catch(error => {
          logger.warning('talos consume baseLocale error', error)
        })
    })
  }
}

module.exports = new TalosProvider()

'use strict'
const { SoaClientAgent } = require('@ctrip/node-vampire-standard-soa-client')
const cat = require('@ctrip/node-vampire-cat')
const logger = require('../log')
const { CATEVENT_TYPE, SOA_TIMEOUT_MILLISECONDS } = require('../common/constants')

class SOAClient {
  constructor (serviceConfig, timeoutMilliseconds) {
    /**
     * service code
     */
    this.serviceConfig = serviceConfig

    /**
     * timeout
     */
    this.timeoutMilliseconds = timeoutMilliseconds || SOA_TIMEOUT_MILLISECONDS
  }

  sendRequest (methodName, args) {
    cat.event(CATEVENT_TYPE.RPC, methodName)

    return SoaClientAgent(this.serviceConfig)[methodName]({ args })
      .then(res => {
        cat.event(CATEVENT_TYPE.RPC_END, methodName)
        return res
      }).catch(e => {
        logger.warning(e)
        throw e
      })
  }

  requestTimeout (methodName) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        const e = new Error(`soa ${JSON.stringify(this.serviceConfig)} request ${methodName} timeout`)
        reject(e)
      }, this.timeoutMilliseconds)
    })
  }

  invoke (methodName, requestBody) {
    return Promise.race([
      this.sendRequest(methodName, requestBody),
      this.requestTimeout(methodName)
    ])
  }
}

module.exports = SOAClient

'use strict'
const { ROUNDING_MODE, UnitCollection, Unit, CredentialType } = require('@ctrip/shark-l10n/lib/types')
const { DateTimeFormatter } = require('@ctrip/shark-l10n/lib/datetime')
const { DurationFormatter } = require('@ctrip/shark-l10n/lib/duration')
const { MeasurementFormatter } = require('@ctrip/shark-l10n/lib/measurement')
const { NameFormatter } = require('@ctrip/shark-l10n/lib/name')
const { NumberFormatter } = require('@ctrip/shark-l10n/lib/number')
const { PhoneFormatter } = require('@ctrip/shark-l10n/lib/phone')
const ignition = require('./ignition')
const i18n = require('./i18n')
const plural = require('./plural')
const context = require('./context')
const logger = require('./log')
const { UPDATE_EVENTS, L10N_APPID } = require('./common/constants')

class Shark {
  /**
   * init shark sdk
   * @param {object} options
   * @param {number} options.logLevel
   * @param {string|number} options.appID
   * @return {Promise}
   */
  init (options) {
    return ignition.init(options)
  }

  /**
   * log level
   */
  get LOG_LEVEL () {
    return logger.LOG_LEVEL
  }

  set LOG_LEVEL (args) {
    throw new Error('LOG_LEVEL is readonly')
  }

  /**
   * express middleware
   */
  get middleware () {
    return context.express
  }

  set middleware (args) {
    throw new Error('middleware is readonly')
  }

  /**
   * koa1 middleware
   */
  get koaMiddleware () {
    return context.koa
  }

  set koaMiddleware (args) {
    throw new Error('koaMiddleware is readonly')
  }

  /**
   * koa2 express
   */
  get koa2Middleware () {
    return context.koa2
  }

  set koa2Middleware (args) {
    throw new Error('koa2Middleware is readonly')
  }

  /**
   * query translation
   * @param {object} options
   * @param {string} options.key
   * @param {string} options.locale
   * @param {string|number} options.appID
   * @param {string|number} options.num
   * @param {string} options.group
   * @param {boolean} options.direct
   * @return {string}
   */
  query (options) {
    return i18n.query(options)
  }

  /**
   * get key translation
   */
  getTranslation (key, locale, group, appID) {
    return i18n.get(key, locale, group, appID)
  }

  /**
   * direct get key translation
   */
  directGetTranslation (key, locale, appID) {
    return i18n.directGet(key, locale, appID)
  }

  /**
   * dump js object
   */
  dump (locale, appID, pageID) {
    return i18n.dump(locale, appID, pageID)
  }

  /**
   * dump js keys
   */
  dumpKeys (locale, appID, pageID) {
    return i18n.dumpKeys(locale, appID, pageID)
  }

  /**
   * get appIDList
   */
  getAppIdList () {
    return i18n.getAppIDList()
  }

  /**
   * get appIDList
   */
  getAppIDList () {
    return i18n.getAppIDList()
  }

  /**
   * get locales
   */
  getLocaleList () {
    return i18n.getLocaleList()
  }

  /**
   * getAll function
   * @param {string} locale
   * @param {string} group
   * @param {string|number} appID
   */
  getAll (locale, group, appID) {
    return i18n.getAll(locale, group, appID)
  }

  /**
   * DateTimeFormat
   * @param {string} locale
   * @param {import('../index').Timezone} timezone -12~+12
   * @return {DateTimeFormatter}
   */
  DateTimeFormat (locale, timezone) {
    return new DateTimeFormatter(this.getAll(locale, null, L10N_APPID), timezone)
  }

  /**
   * DurationFormat
   */
  DurationFormat (locale) {
    return new DurationFormatter(this.getAll(locale, null, L10N_APPID))
  }

  /**
   * MeasurementFormat
   */
  MeasurementFormat (locale) {
    return new MeasurementFormatter(this.getAll(locale, null, L10N_APPID))
  }

  /**
   * NameFormat
   * @param {string} locale
   * @return {NameFormatter}
   */
  NameFormat (locale) {
    return new NameFormatter(this.getAll(locale, null, L10N_APPID))
  }

  /**
   * NumberFormat
   * @param {string} locale
   * @return {NumberFormatter}
   */
  NumberFormat (locale) {
    return new NumberFormatter(this.getAll(locale, null, L10N_APPID))
  }

  /**
   * PhoneFormat
   * @param {string} locale
   * @return {PhoneFormatter}
   */
  PhoneFormat (locale) {
    return new PhoneFormatter(this.getAll(locale, null, L10N_APPID))
  }

  /**
   * get plural
   * @param {string} key
   * @param {string} locale
   * @param {number} num
   * @param {string|number} appID
   * @return {string}
   */
  getPluralTranslation (key, locale, num, appID) {
    return plural.getTemplate(key, locale, num, appID)
  }

  /**
   * Register update event
   * @param {(event: { appId: string, pageId: string, locale: string }) => void} callback
   */
  registerUpdateEvent (callback) {
    i18n.addListener(UPDATE_EVENTS.KEYS, callback)
    return this
  }

  /**
   * L10N rounding mode enums
   */
  get L10N_ROUNDING_MODE () {
    return ROUNDING_MODE
  }

  set L10N_ROUNDING_MODE (args) {
    throw new Error('ROUNDING_MODE is readonly')
  }

  /**
   * L10N Measurement UNIT
   */
  get L10N_UNIT () {
    return Unit
  }

  set L10N_UNIT (args) {
    throw new Error('L10N_UNIT is readonly')
  }

  /**
   * L10N Measurement UNIT COLLECTION
   */
  get L10N_UNIT_COLLECTION () {
    return UnitCollection
  }

  set L10N_UNIT_COLLECTION (args) {
    throw new Error('L10N_UNIT_COLLECTION is readonly')
  }

  /**
   * L10N Name CredentialType COLLECTION
   */
  get L10N_CREDENTIAL_TYPE_COLLECTION () {
    return CredentialType
  }

  set L10N_CREDENTIAL_TYPE_COLLECTION (args) {
    throw new Error('L10N_UNIT_COLLECTION is readonly')
  }
}

module.exports = new Shark()

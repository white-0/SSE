'use strict'
const sizeof = require('object-sizeof')
const helpers = require('../common/helpers')
const logger = require('../log')
const is = require('is-type-of')
const pkg = require('../../package.json')
const foundation = require('../common/foundation')
const constants = require('../common/constants')

const SEPERATOR = '|'
const getTalosRequestHead = () => {
  return {
    appId: foundation.appID,
    version: pkg.version,
    sdk: 'Node',
    ip: foundation.clientIp,
    reqStage: foundation.ignited ? 0 : 1
  }
}

const globalConfig = {} // global config
const timestampMap = {} // app timestamp tag store
const hasMoreMap = {} // app hasMore tag store
let baseLocaleMap = {} // app baseLocale data store
let appIDList = [] // appID list
const transMap = {} // full translation data store
const transPageIDMap = {} // translation with pageID data store, for dump/dumpKeys
const transTmpMap = {} // tmp full translation data store
let recentUsedKeys = {} // recentUsed store
let undefinedKeys = {} // undefined store

module.exports = {
  initGlobals: (appID, sdkVersion, npmVersion, clientIp, role) => {
    globalConfig.appID = appID
    globalConfig.sdkVersion = sdkVersion
    globalConfig.npmVersion = npmVersion
    globalConfig.ip = clientIp
    globalConfig.role = role
  },

  queryLogEnable: false,
  issueQueryLogEnable: false,

  updateLogEnable: config => {
    this.queryLogEnable = config.queryLogEnable
    this.issueQueryLogEnable = config.issueQueryLogEnable
  },

  loggerWarning: (appID, msg) => {
    if (parseInt(appID) !== constants.L10N_APPID && this.issueQueryLogEnable) {
      logger.warning(msg)
    }
  },

  loggerInfo: (appID, msg) => {
    if (parseInt(appID) !== constants.L10N_APPID && this.queryLogEnable) {
      logger.info(msg)
    }
  },

  dumpMetric: () => {
    let count = 0
    Object.keys(transMap).forEach(appID => {
      Object.keys(transMap[appID]).forEach(key => {
        count += Object.keys(transMap[appID][key]).length
      })
    })

    return [{
      appId: foundation.appID,
      metric: 'shark.metric.version',
      dimension: 'value_double',
      value: pkg.version
    }, {
      appId: foundation.appID,
      metric: 'shark.metric.timestamp',
      dimension: 'value_long',
      value: (+Date.now()).toString()
    }, {
      appId: foundation.appID,
      metric: 'shark.metric.count',
      dimension: 'value_long',
      value: count.toString()
    }, {
      appId: foundation.appID,
      metric: 'shark.metric.memoryusage',
      dimension: 'value_long',
      value: sizeof(transMap).toString()
    }, {
      appId: foundation.appID,
      metric: 'shark.metric.memorymax',
      dimension: 'value_long',
      value: '1503238553'
    }]
  },

  dumpReportUsedKey: () => {
    const recentUsedKey = Object.keys(recentUsedKeys).map(k => {
      const [appID, locale, key] = k.split(SEPERATOR)
      return {
        appId: appID,
        key,
        locale,
        timestamp: +Date.now()
      }
    })
      .filter(v => v.locale !== constants.ORIGIN_LOCALE)
    recentUsedKeys = {}
    return recentUsedKey
  },

  dumpUndefinedKey: () => {
    const keyLog = Object.keys(undefinedKeys).map(k => {
      const [appID, locale, key, type] = k.split(SEPERATOR)
      return {
        appId: appID,
        key,
        type: parseInt(type),
        defaultValue: '',
        locale,
        callStack: '',
        timestamp: +Date.now()
      }
    })
      .filter(v => parseInt(v.appId) !== constants.L10N_APPID)
    undefinedKeys = {}
    return keyLog
  },

  encodeGetAllTransRequest: (appID, offset) => {
    return {
      head: getTalosRequestHead(),
      appId: appID,
      timestamp: 0,
      offset
    }
  },

  encodeGetTransRequest: (appID, timestamp) => {
    return {
      head: getTalosRequestHead(),
      appId: appID,
      timestamp: timestamp || timestampMap[appID] || 0,
      offset: 0
    }
  },

  encodeGetLocaleConfigRequest: () => {
    return {
      head: getTalosRequestHead()
    }
  },

  encodeGetUpdateConfigRequest: () => {
    return {
      head: getTalosRequestHead()
    }
  },

  get: function (appID, locale, key, noOriginDefault) {
    const _transMap = transMap[appID]

    if (_transMap) {
      if (_transMap[key]) {
        if (_transMap[key][locale]) {
          this.loggerInfo(appID, `appID:${appID},key:${key},locale:${locale} [${_transMap[key][locale]}]`)
          recentUsedKeys[[appID, locale, key].join(SEPERATOR)] = 1
          return _transMap[key][locale]
        }

        const localeMap = baseLocaleMap[appID] || {}

        if (!localeMap[locale]) {
          this.loggerWarning(appID, `appID:${appID},key:${key},locale:${locale} not config`)

          if (foundation.isPROD) {
            if (_transMap[key][constants.BASE_LOCALE]) {
              recentUsedKeys[[appID, constants.BASE_LOCALE, key].join(SEPERATOR)] = 1
              return _transMap[key][constants.BASE_LOCALE]
            }

            return ''
          }

          if (helpers.getCommonConfig(constants.QCONFIG.USE_ORIGIN) === '0' && !noOriginDefault) {
            if (_transMap[key][constants.BASE_LOCALE]) {
              recentUsedKeys[[appID, constants.BASE_LOCALE, key].join(SEPERATOR)] = 1
              return _transMap[key][constants.BASE_LOCALE]
            }

            return ''
          }

          if (_transMap[key][constants.BASE_LOCALE]) {
            recentUsedKeys[[appID, constants.BASE_LOCALE, key].join(SEPERATOR)] = 1
            return _transMap[key][constants.BASE_LOCALE]
          }

          if (_transMap[key][constants.ORIGIN_LOCALE]) {
            recentUsedKeys[[appID, constants.ORIGIN_LOCALE, key].join(SEPERATOR)] = 1
            return _transMap[key][constants.ORIGIN_LOCALE]
          }

          return ''
        }

        const { baseLocale, secondBaseLocale, defaultLocale } = localeMap[locale]

        if (baseLocale && _transMap[key][baseLocale]) {
          this.loggerInfo(appID, `appID:${appID},key:${key},locale:${locale},baseLocale:${baseLocale} [${_transMap[key][baseLocale]}]`)
          recentUsedKeys[[appID, baseLocale, key].join(SEPERATOR)] = 1
          return _transMap[key][baseLocale]
        }

        if (secondBaseLocale && _transMap[key][secondBaseLocale]) {
          this.loggerInfo(appID, `appID:${appID},key:${key},locale:${locale},secondBaseLocale:${secondBaseLocale} [${_transMap[key][secondBaseLocale]}]`)
          recentUsedKeys[[appID, secondBaseLocale, key].join(SEPERATOR)] = 1
          return _transMap[key][secondBaseLocale]
        }

        if (defaultLocale && _transMap[key][defaultLocale]) {
          this.loggerInfo(appID, `appID:${appID},key:${key},locale:${locale},defaultLocale:${defaultLocale} [${_transMap[key][defaultLocale]}]`)
          if (locale.split('-')[0] !== defaultLocale.split('-')[0]) {
            undefinedKeys[[appID, locale, key, 3].join(SEPERATOR)] = 1
          }
          recentUsedKeys[[appID, defaultLocale, key].join(SEPERATOR)] = 1
          return _transMap[key][defaultLocale]
        }

        if (_transMap[key].isConfigKey && _transMap[key][constants.BASE_LOCALE]) {
          this.loggerInfo(appID, `appID:${appID},key:${key},locale:${locale},globalBaseLocale:${constants.BASE_LOCALE} [${_transMap[key][constants.BASE_LOCALE]}]`)
          if (locale.split('-')[0] !== constants.BASE_LOCALE.split('-')[0]) {
            undefinedKeys[[appID, locale, key, 3].join(SEPERATOR)] = 1
          }
          recentUsedKeys[[appID, constants.BASE_LOCALE, key].join(SEPERATOR)] = 1
          return _transMap[key][constants.BASE_LOCALE]
        }

        if (!foundation.isPROD && helpers.getCommonConfig(constants.QCONFIG.USE_ORIGIN) !== '0' && !noOriginDefault && _transMap[key][constants.ORIGIN_LOCALE]) {
          this.loggerInfo(appID, `appID:${appID},key:${key},locale:${locale},globalBaseLocale:${constants.ORIGIN_LOCALE} [${_transMap[key][constants.ORIGIN_LOCALE]}]`)
          undefinedKeys[[appID, locale, key, 3].join(SEPERATOR)] = 1
          recentUsedKeys[[appID, constants.ORIGIN_LOCALE, key].join(SEPERATOR)] = 1
          return _transMap[key][constants.ORIGIN_LOCALE]
        }

        this.loggerWarning(appID, `appID:${appID},key:${key},locale:${locale} not translate`)
        undefinedKeys[[appID, locale, key, 2].join(SEPERATOR)] = 1
        return ''
      }

      this.loggerWarning(appID, `appID:${appID},key:${key} not found`)
      undefinedKeys[[appID, locale, key, 1].join(SEPERATOR)] = 1
      return ''
    }

    this.loggerWarning(appID, `${appID} reference not found`)
    undefinedKeys[[appID, locale, key, 4].join(SEPERATOR)] = 1
    return ''
  },

  directGet: function (appID, locale, key) {
    const _transMap = transMap[appID]

    if (_transMap) {
      if (_transMap[key]) {
        if (_transMap[key][locale]) {
          this.loggerInfo(appID, `appID:${appID},key:${key},locale:${locale} [${_transMap[key][locale]}]`)
          recentUsedKeys[[appID, locale, key].join(SEPERATOR)] = 1
          return _transMap[key][locale]
        }

        this.loggerWarning(appID, `appID:${appID},key:${key},locale:${locale} not found(direct)`)
        undefinedKeys[[appID, locale, key, 2].join(SEPERATOR)] = 1
        return ''
      }

      this.loggerWarning(appID, `appID:${appID},key:${key} not found`)
      undefinedKeys[[appID, locale, key, 1].join(SEPERATOR)] = 1
      return ''
    }

    this.loggerWarning(appID, `${appID} reference not found`)
    undefinedKeys[[appID, locale, key, 4].join(SEPERATOR)] = 1
    return ''
  },

  getPlural: function (appID, locale, originKey, pluralKey) {
    const _transMap = transMap[appID]

    if (_transMap) {
      const localeMap = baseLocaleMap[appID] || {}
      const { baseLocale, secondBaseLocale, defaultLocale } = localeMap[locale] || {}
      const pluralList = [
        {
          plural: true,
          key: pluralKey,
          locale
        },
        {
          key: originKey,
          locale
        },
        {
          plural: true,
          key: pluralKey,
          locale: baseLocale
        },
        {
          key: originKey,
          locale: baseLocale
        },
        {
          plural: true,
          key: pluralKey,
          locale: secondBaseLocale
        },
        {
          key: originKey,
          locale: secondBaseLocale
        },
        {
          plural: true,
          key: pluralKey,
          locale: defaultLocale
        },
        {
          key: originKey,
          locale: defaultLocale
        }
      ]

      const originKeyMap = (_transMap[originKey] || {})
      const pluralKeyMap = (_transMap[pluralKey] || {})

      if (pluralKeyMap && pluralKeyMap.isConfigKey) {
        pluralList.push({
          plural: true,
          key: pluralKey,
          locale: constants.BASE_LOCALE
        })
      }

      if (originKeyMap && originKeyMap.isConfigKey) {
        pluralList.push({
          key: originKey,
          locale: constants.BASE_LOCALE
        })
      }

      const val = {}

      for (let i = 0; i < pluralList.length; i++) {
        const pluralRule = pluralList[i]
        if (!pluralRule.locale) {
          continue
        }

        const keyMap = pluralRule.plural ? pluralKeyMap : originKeyMap
        const value = (keyMap || {})[pluralRule.locale]
        if (value) {
          this.loggerInfo(appID, `appID:${appID},key:${pluralRule.key},locale:${locale},pluralLocale:${pluralRule.locale} [${value}]`)
          Object.assign(
            val,
            pluralRule,
            {
              value
            }
          )
          break
        }
      }

      if (val.value) {
        if (locale.split('-')[0] !== val.locale.split('-')[0]) {
          undefinedKeys[[appID, locale, originKey, 3].join(SEPERATOR)] = 1
        }
        recentUsedKeys[[appID, val.locale, val.key].join(SEPERATOR)] = 1
        return val.value
      } else {
        if (_transMap[originKey]) {
          this.loggerWarning(appID, `appID:${appID},key:${originKey},locale:${locale} not translate`)
          undefinedKeys[[appID, locale, originKey, 2].join(SEPERATOR)] = 1
        } else {
          this.loggerWarning(appID, `appID:${appID},key:${originKey} not found`)
          undefinedKeys[[appID, locale, originKey, 1].join(SEPERATOR)] = 1
        }

        return ''
      }
    }

    this.loggerWarning(appID, `${appID} reference not found`)
    undefinedKeys[[appID, locale, originKey, 4].join(SEPERATOR)] = 1
    return ''
  },

  getBaseLocale: (appID, locale) => {
    const localeMap = baseLocaleMap[appID] || {}
    return localeMap[locale] && localeMap[locale].baseLocale
  },

  getSecondBaseLocale: (appID, locale) => {
    const localeMap = baseLocaleMap[appID] || {}
    return localeMap[locale] && localeMap[locale].secondBaseLocale
  },

  getDefaultLocale: (appID, locale) => {
    const localeMap = baseLocaleMap[appID] || {}
    return localeMap[locale] && localeMap[locale].defaultLocale
  },

  dump: function (appID, locale, pageID) {
    const result = {}
    const _transMap = (
      (is.isNumber(pageID) || is.isString(pageID)) &&
      parseInt(pageID) > 0
    )
      ? ((transPageIDMap[appID] || {})[pageID] || {})
      : (transMap[appID] || {})

    Object.keys(_transMap).forEach(key => {
      const trans = this.get(appID, locale, key, true)
      if (trans) {
        result[key] = trans
      }
    })

    return result
  },

  dumpKeys: function (appID, locale, pageID) {
    const result = []
    const _transMap = (
      (is.isNumber(pageID) || is.isString(pageID)) &&
      parseInt(pageID) > 0
    )
      ? ((transPageIDMap[appID] || {})[pageID] || {})
      : (transMap[appID] || {})

    Object.keys(_transMap).forEach(key => {
      const trans = this.get(appID, locale, key, true)
      if (trans) {
        result.push(key)
      }
    })

    return result
  },

  getAppIDList: () => appIDList,

  getLocaleList: () => {
    const localeMap = baseLocaleMap[globalConfig.appID] || {}
    return Object.keys(localeMap)
  },

  updateTranslation: (mode, data, cb) => {
    if (data && data.appId) {
      timestampMap[data.appId] = data.timestamp
      if (mode === constants.UPDATE_MODE.FULL) {
        // full load
        if (hasMoreMap[data.appId]) {
          // non-first full load
          transTmpMap[data.appId] = (transTmpMap[data.appId] || []).concat(data.trans || [])
        } else {
          // first full load
          transTmpMap[data.appId] = data.trans || []
        }

        // apply full data to store
        if (!data.hasMore) {
          const _transMap = {}
          const _transPageIDMap = {}
          transTmpMap[data.appId].forEach(({ locale, key, value, pageId, isConfigKey }) => {
            if (!_transMap[key]) {
              _transMap[key] = {}
            }
            _transMap[key][locale] = value
            _transMap[key].isConfigKey = isConfigKey

            if (!_transPageIDMap[pageId]) {
              _transPageIDMap[pageId] = {}
            }
            _transPageIDMap[pageId][key] = 1
          })
          transMap[data.appId] = _transMap
          transPageIDMap[data.appId] = _transPageIDMap
          delete transTmpMap[data.appId]
        }

        // set hasMore tag
        hasMoreMap[data.appId] = data.hasMore
      } else if (mode === constants.UPDATE_MODE.INCREMENTAL) {
        // incremental load
        if (!transMap[data.appId]) {
          transMap[data.appId] = {}
        }
        if (!transPageIDMap[data.appId]) {
          transPageIDMap[data.appId] = {}
        }

        (data.trans || []).forEach(({ locale, key, value, pageId, isConfigKey }) => {
          if (!transMap[data.appId][key]) {
            transMap[data.appId][key] = {}
          }
          transMap[data.appId][key][locale] = value
          transMap[data.appId][key].isConfigKey = isConfigKey

          if (!transPageIDMap[data.appId][pageId]) {
            transPageIDMap[data.appId][pageId] = {}
          }
          transPageIDMap[data.appId][pageId][key] = 1
        })
      }
      cb(null, data)
    } else {
      // eslint-disable-next-line n/no-callback-literal
      cb('receive empty translation')
    }
  },

  updateBaseLocaleConfig: (data, cb) => {
    if (data && data.localeConfigs && data.localeConfigs.length) {
      const _baseLocaleMap = {}
      const _appIDList = []
      data.localeConfigs.forEach(({ appId, localeMappings }) => {
        _baseLocaleMap[appId] = {}
        _appIDList.push(parseInt(appId))
        localeMappings.forEach(({ locale, baseLocale, secondBaseLocale, defaultLocale }) => {
          _baseLocaleMap[appId][locale] = { baseLocale, secondBaseLocale, defaultLocale }
        })
      })

      baseLocaleMap = _baseLocaleMap
      appIDList = _appIDList

      // destroy non-reference app data
      Object.keys(transMap).forEach(appID => {
        if (!appIDList.includes(parseInt(appID))) {
          delete transMap[appID]
        }
      })
      Object.keys(timestampMap).forEach(appID => {
        if (!appIDList.includes(parseInt(appID))) {
          delete timestampMap[appID]
        }
      })
      Object.keys(hasMoreMap).forEach(appID => {
        if (!appIDList.includes(parseInt(appID))) {
          delete hasMoreMap[appID]
        }
      })

      cb(null, appIDList)
    } else {
      // eslint-disable-next-line n/no-callback-literal
      cb('receive empty localeConfigs')
    }
  }
}

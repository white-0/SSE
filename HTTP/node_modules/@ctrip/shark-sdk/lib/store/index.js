'use strict'
const logger = require('../log')
const addon = require('./addon')
const { UPDATE_MODE } = require('../common/constants')

/**
 * Shark存储结构的封装
 */
class SharkStore {
  get (appID, locale, key) {
    return addon.get(appID, locale, key)
  }

  directGet (appID, locale, key) {
    return addon.directGet(appID, locale, key)
  }

  getPlural (appID, locale, originKey, pluralKey) {
    return addon.getPlural(appID, locale, originKey, pluralKey)
  }

  getBaseLocale (appID, locale) {
    return addon.getBaseLocale(appID, locale)
  }

  getSecondBaseLocale (appID, locale) {
    return addon.getSecondBaseLocale(appID, locale)
  }

  getDefaultLocale (appID, locale) {
    return addon.getDefaultLocale(appID, locale)
  }

  dump (appID, locale, pageID = 0) {
    return addon.dump(appID, locale, pageID)
  }

  dumpKeys (appID, locale, pageID = 0) {
    return addon.dumpKeys(appID, locale, pageID)
  }

  getAppIDList () {
    return addon.getAppIDList()
  }

  getLocaleList () {
    return addon.getLocaleList()
  }

  /**
   * update logEnable config
   */
  updateLogEnable (config) {
    addon.updateLogEnable({
      queryLogEnable: config.queryLogEnable,
      issueQueryLogEnable: config.issueQueryLogEnable
    })
  }

  /**
   * Talos更新翻译结构
   */
  updateTranslation (mode, data) {
    return new Promise((resolve, reject) => {
      addon.updateTranslation(mode, data, (error, data) => {
        if (error) {
          logger.warning('talos update translation', error)
          return reject(error)
        }
        resolve(data)
      })
    })
  }

  /**
   * Talos更新Locale托底结构
   */
  updateBaseLocaleConfig (data) {
    return new Promise((resolve, reject) => {
      addon.updateBaseLocaleConfig(data, (error, appIDList) => {
        if (error) {
          logger.warning('talos update locale', error)
          return reject(error)
        }
        resolve([appIDList, data])
      })
    })
  }

  /**
   * 一次性更新全量翻译+baseLocale
   */
  updateFullTranslationAndBaseLocaleConfig (data) {
    return Promise.all([
      this.updateBaseLocaleConfig({
        localeConfigs: data.config
      }),
      Promise.all(
        Object.keys(data.translations).map(appID => {
          return this.updateTranslation(UPDATE_MODE.FULL, {
            hasMore: false,
            appId: appID,
            timestamp: data.translations[appID].timestamp,
            trans: data.translations[appID].translation
          })
        })
      )
    ])
  }
}

module.exports = new SharkStore()

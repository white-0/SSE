'use strict'
const { PluralRule } = require('@ctrip/shark-l10n/lib/plural/rules')
const { PluralNum } = require('@ctrip/shark-l10n/lib/plural/number')
const helpers = require('../common/helpers')
const foundation = require('../common/foundation')
const store = require('../store')
const logger = require('../log')
const PLURAL_KEY = Symbol('SHARK#PLURAL_KEY')

module.exports = {
  /**
   * 根据{num}获得对应的单复数文案模板
   */
  getTemplate (key, locale, num, appID) {
    locale = helpers.normalizeLocale(locale)
    appID = parseInt(appID || foundation.appID)
    const pluralKey = this[PLURAL_KEY](key, locale, num)

    return store.getPlural(appID, locale, key, pluralKey)
  },

  /**
   * 获取带shark_plugin的输出
   */
  getTemplatePlugin (key, locale, num, appID) {
    appID = parseInt(appID || foundation.appID)
    const value = this.getTemplate(key, locale, num, appID)
    return `<i data-key='${key}' data-appid='${appID}'>${value}</i>`
  },

  /**
   * 获取带包含复数的key
   */
  [PLURAL_KEY] (key, locale, num) {
    const rule = new PluralRule(locale)
    const pluralNum = new PluralNum(num)

    for (let i = 0; i < rule.size; i++) {
      if (rule.canMatch(i)(
        pluralNum.integer,
        pluralNum.fraction,
        pluralNum.fractionBitsCount
      )) {
        const pluralKey = `${key}${rule.getSuffix(i)}`
        logger.debug('getPlural', key, locale, num, pluralNum, pluralKey)
        return pluralKey
      }
    }

    return key
  }
}

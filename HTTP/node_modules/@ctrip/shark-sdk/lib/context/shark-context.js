'use strict'
const is = require('is-type-of')
const cookie = require('cookie')
const { DateTimeFormatter } = require('@ctrip/shark-l10n/lib/datetime')
const { DurationFormatter } = require('@ctrip/shark-l10n/lib/duration')
const { MeasurementFormatter } = require('@ctrip/shark-l10n/lib/measurement')
const { NameFormatter } = require('@ctrip/shark-l10n/lib/name')
const { NumberFormatter } = require('@ctrip/shark-l10n/lib/number')
const { PhoneFormatter } = require('@ctrip/shark-l10n/lib/phone')
const constants = require('../common/constants')
const helpers = require('../common/helpers')
const i18n = require('../i18n')
const plural = require('../plural')
const REQ = Symbol('SHARK#REQUEST')
const RES = Symbol('SHARK#RESPONSE')
const GROUP = Symbol('SHARK#CONTEXT_GROUP')
const LOCALE = Symbol('SHARK#CONTEXT_LOCALE')
const ENABLE_PLUGIN = Symbol('SHARK#CONTEXT_ENABLE_PLUGIN')

/**
 * Shark请求上下文对象
 */
class SharkContext {
  constructor (req, res, cargo) {
    this[REQ] = req
    this[RES] = res
    this[GROUP] = constants.CONTEXT_DEFAULT.GROUP
    this[LOCALE] = constants.CONTEXT_DEFAULT.LOCALE
    // 为了兼容老代码
    this.DateTimeFormat = this.DateTimeFormat.bind(this)
    this.DurationFormat = this.DurationFormat.bind(this)
    this.MeasurementFormat = this.MeasurementFormat.bind(this)
    this.NameFormat = this.NameFormat.bind(this)
    this.NumberFormat = this.NumberFormat.bind(this)
    this.PhoneFormat = this.PhoneFormat.bind(this)

    // initial locale/group by cargo
    if (is.isObject(cargo)) {
      // locale
      if (is.isFunction(cargo.getLocale)) {
        this.setLocale(cargo.getLocale())
      } else if (is.isFunction(cargo.getRawCurrentLocale)) {
        this.setLocale(cargo.getRawCurrentLocale())
      }
      // group
      if (is.isFunction(cargo.getGroup)) {
        this.setGroup(cargo.getGroup())
      }
    }

    // parse cookies
    let cookies
    if (!this[REQ].cookies || !is.isObject(this[REQ].cookies)) {
      const cookieStr = (this[REQ].headers || {}).cookie
      if (cookieStr) {
        cookies = cookie.parse(cookieStr)
      }
    } else {
      cookies = this[REQ].cookies
    }
    this[ENABLE_PLUGIN] = (cookies && cookies[constants.PLUGIN_COOKIE])
  }

  getLocale () {
    return this[LOCALE]
  }

  setLocale (locale) {
    this[LOCALE] = helpers.normalizeLocale(locale)
  }

  getGroup () {
    return this[GROUP]
  }

  setGroup (group) {
    this[GROUP] = helpers.normalizeGroup(group)
  }

  getAll (appID) {
    return this[ENABLE_PLUGIN]
      ? i18n.getAllPlugin(this[LOCALE], this[GROUP], appID)
      : i18n.getAll(this[LOCALE], this[GROUP], appID)
  }

  /**
   * query translation
   * @param key
   * @param options
   * @param {string|number} options.appID
   * @param {string|number} options.num
   * @param {string} options.group
   * @param {boolean} options.direct
   * @return {string}
   */
  query (key, options) {
    options = is.isObject(options) ? options : {}
    return i18n.query(Object.assign({}, options, {
      key,
      locale: this[LOCALE],
      group: this[GROUP],
      plugin: this[ENABLE_PLUGIN]
    }))
  }

  /**
   * get translation by key
   * @param {string} key transKey
   * @param {{ appID: number | string }} name description
   * @return {string} translation
   */
  getTranslation (key, options) {
    options = is.isObject(options) ? options : {}
    return this[ENABLE_PLUGIN]
      ? i18n.getPlugin(key, this[LOCALE], this[GROUP], options.appID || options.appId)
      : i18n.get(key, this[LOCALE], this[GROUP], options.appID || options.appId)
  }

  /**
   * directGet translation by key
   * @param {string} key transKey
   * @param {{ appID: number | string }} name description
   * @return {string} translation
   */
  directGetTranslation (key, options) {
    options = is.isObject(options) ? options : {}
    return i18n.directGet(key, this[LOCALE], options.appID || options.appId)
  }

  /**
   * @param {import('../../index').Timezone | null} timezone
   */
  DateTimeFormat (timezone) {
    return new DateTimeFormatter(this.getAll(constants.L10N_APPID), timezone)
  }

  DurationFormat () {
    return new DurationFormatter(this.getAll(constants.L10N_APPID))
  }

  MeasurementFormat () {
    return new MeasurementFormatter(this.getAll(constants.L10N_APPID))
  }

  NameFormat () {
    return new NameFormatter(this.getAll(constants.L10N_APPID))
  }

  NumberFormat () {
    return new NumberFormatter(this.getAll(constants.L10N_APPID))
  }

  PhoneFormat () {
    return new PhoneFormatter(this.getAll(constants.L10N_APPID))
  }

  /**
   * get translation with number and plural
   * @param {string} key transKey
   * @param {number} num count
   * @param {{ appID: number | string }} name description
   * @return {string} translation
   */
  getPluralTranslation (key, num, options) {
    options = is.isObject(options) ? options : {}
    return this[ENABLE_PLUGIN]
      ? plural.getTemplatePlugin(key, this[LOCALE], num, options.appID || options.appId)
      : plural.getTemplate(key, this[LOCALE], num, options.appID || options.appId)
  }
}

module.exports = SharkContext

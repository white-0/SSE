'use strict'
const pm2 = require('@ctrip/node-vampire-pm2')
const cat = require('@ctrip/node-vampire-cat')
const AbstractTimer = require('./abstract-timer')
const talos = require('../provider/talos')
const file = require('../provider/file')
const logger = require('../log')
const { writeFullDataToFile } = require('../util')
const foundation = require('../common/foundation')
const { CAT_NAME, CATSPAN_TYPE, IPC_MESSAGE, CATEVENT_TYPE } = require('../common/constants')
const pkg = require('../../package.json')

class TalosFullTimer extends AbstractTimer {
  constructor () {
    const delay = talos.fullUpdateDelay
    super(delay, delay)
  }

  run () {
    return new Promise(resolve => {
      cat.span(CAT_NAME, CATSPAN_TYPE.FULL_UPDATE).run(done => {
        file.fetchFullDataStore()
          .then(data => {
            if (data) {
              logger.debug('file-timer full update success')
              cat.event(CATEVENT_TYPE.FULL_DATA, 'file', {
                sharkAppID: foundation.appID,
                version: pkg.version
              })
              resolve()
              done()
              return
            }

            return talos.fetchBaseLocaleStore()
              .then(([appIds, config]) => Promise.all([
                talos.fetchSharkStore(appIds),
                config
              ]))
              .then(([translations, config]) => {
                const fullResult = {
                  config: config.localeConfigs,
                  translations: {}
                }
                translations.forEach(({ appID, trans }) => {
                  fullResult.translations[appID] = {
                    timestamp: trans.length ? trans[trans.length - 1].lastChangeTime : 0,
                    translation: trans
                  }
                })

                logger.debug('talos-timer full update success')
                cat.event(CATEVENT_TYPE.FULL_DATA, 'talos', {
                  sharkAppID: foundation.appID,
                  version: pkg.version
                })

                return new Promise(_resolve => {
                  foundation.fileLocker.run(done => {
                    writeFullDataToFile(foundation.appID, fullResult)
                      .then(() => {
                        _resolve()
                        done()
                      })
                  })
                })
              })
              .then(() => {
                pm2.broadcast(IPC_MESSAGE.TALOS_FULL_TRANS)
                resolve()
                done()
              })
              .catch(error => {
                logger.warning('talos-timer full update fail', error)
                cat.event(CATEVENT_TYPE.FULL_DATA, 'fail', {
                  sharkAppID: foundation.appID,
                  version: pkg.version
                })
                resolve()
                done()
              })
          })
          .catch(error => {
            logger.warning('talos-timer full update fail', error)
            resolve()
            done()
          })
      })
    })
  }
}

module.exports = TalosFullTimer

'use strict'
const bfj = require('bfj')
const cat = require('@ctrip/node-vampire-cat')
const AbstractTimer = require('./abstract-timer')
const talos = require('../provider/talos')
const logger = require('../log')
const { CAT_NAME, CATSPAN_TYPE, FILE_CONFIG_FILENAME, FILE_META_FILENAME } = require('../common/constants')
const foundation = require('../common/foundation')
const { generateDirPath, cleanRequire, appendIncrementalTransToFile } = require('../util')

class TalosTimer extends AbstractTimer {
  constructor () {
    const delay = talos.incrementalUpdateDelay
    super(delay, delay)
  }

  run () {
    // append incremental trans to file cache
    return new Promise(resolve => {
      foundation.fileLocker.run(lockDone => {
        cat.span(CAT_NAME, CATSPAN_TYPE.UPDATE).run(catDone => {
          const dir = generateDirPath(foundation.appID)
          const meta = cleanRequire(`${dir}/${FILE_META_FILENAME}`)
          const appendPromiseList = []

          talos.fetchBaseLocaleStore(true)
            .then(([appIds, config]) => {
              appendPromiseList.push(
                bfj.write(`${dir}/${FILE_CONFIG_FILENAME}`, config.localeConfigs)
              )

              return talos.fetchSharkStore(appIds, true)
            })
            .then(data => {
              data
                .filter(v => v.trans.length)
                .forEach(({ appID, timestamp, trans }) => {
                  meta.timestamp[appID] = timestamp
                  appendPromiseList.push(
                    appendIncrementalTransToFile(`${dir}/${appID}.json`, trans)
                  )
                })

              appendPromiseList.push(bfj.write(`${dir}/${FILE_META_FILENAME}`, meta))

              return Promise.all(appendPromiseList).then(() => {
                logger.debug('talos-timer incremental update success')
                resolve()
                catDone()
                lockDone()
              })
            })
            .catch(error => {
              logger.warning('talos-timer incremental update fail', error)
              resolve()
              catDone()
              lockDone()
            })
        })
      })
    })
  }
}

module.exports = TalosTimer

'use strict'
const fs = require('fs')
const Locker = require('@ctrip/node-vampire-locker')
const pm2 = require('@ctrip/node-vampire-pm2')
const {
  IGNITION_TIMEOUT_MILLISECONDS,
  IPC_MESSAGE,
  ROLE, FILE_META_FILENAME
} = require('../common/constants')
const foundation = require('../common/foundation')
const talos = require('../provider/talos')
const BaseIgnition = require('./base')
const store = require('../store')
const { generateDirPath, generateFileLockerID, cleanRequire, extractFullDataFromFile } = require('../util')

const FIRE_UP = Symbol.for('SHARK#IGNITION_FIRE_UP')
const IGNITION_READ_FILE = Symbol.for('SHARK#IGNITION_READ_FILE')

class SlaveIgnition extends BaseIgnition {
  constructor () {
    super(
      IGNITION_TIMEOUT_MILLISECONDS.SLAVE,
      ROLE.SLAVE
    )
  }

  [IGNITION_READ_FILE] () {
    return new Promise(resolve => {
      foundation.fileLocker.run(done => {
        try {
          const filePath = `${generateDirPath(foundation.appID)}/${FILE_META_FILENAME}`
          fs.accessSync(filePath, fs.constants.R_OK | fs.constants.W_OK)
          const meta = cleanRequire(filePath)
          if (meta && meta.ignited) {
            resolve(extractFullDataFromFile(foundation.appID))
          } else {
            resolve()
          }
          done()
        } catch {
          resolve()
          done()
        }
      })
    })
  }

  [FIRE_UP] () {
    foundation.fileLocker = new Locker(generateFileLockerID(foundation.appID))

    // 从进程点火/全量轮询/增量更新轮询从主进程消费
    return this[IGNITION_READ_FILE]()
      .then(fileResult => {
        if (fileResult) {
          return fileResult
        } else {
          return new Promise(resolve => {
            pm2.once(IPC_MESSAGE.TALOS_FULL_TRANS, resolve)
          }).then(() => this[IGNITION_READ_FILE]())
        }
      })
      .then(fileResult => store.updateFullTranslationAndBaseLocaleConfig(fileResult))
      .then(() => {
        // start listener
        talos.consumeSharkBaseLocaleStoreFromMaster()
        talos.consumeSharkStoreFromMaster()
        talos.consumeFullFromMaster()
      })
  }
}

module.exports = SlaveIgnition

const path = require('path');
const util = require('@ctrip/node-vampire-util');

let appConfigFile = process.env.__CTRIP_APP_CONFIG_FILE__;
let appConfigDir = process.env.__CTRIP_APP_CONFIG_DIR__;
let appConfig = null;
let appConfigErrors = [];

if (appConfigFile) {
    try {
        appConfig = require(appConfigFile);
    } catch (e) {
        //将错误抛出。有些情况并非appConfigFile找不到，而是appConfigFile中有报错。
        console.log('Load App Config Fail, ' + appConfigFile);
        throw e;
    }
} else {
    const entry = (require.main && require.main.filename) ||
        (process.argv[1] && path.resolve(process.cwd(), process.argv[1])) ||
        null;
    if (!appConfigDir) {
        if (require.main && require.main.soaAppConfig) {
            // soaAppConfig 目前用于轻应用第一版传入配置，后续要废弃
            // 使用 __CTRIP_APP_CONFIG_DIR__ 替换
            appConfigDir = path.dirname(require.main.soaAppConfig);
        } else if (entry) {
            // esm模块没有require
            // entry获取当前执行文件，如 pm2, mocha 等
            appConfigDir = path.dirname(entry);
        } else {
            appConfigDir = process.cwd();
        }
    }
    let originAppConfigFile = path.resolve(appConfigDir, 'app.config.js');
    let infinityLoop = true;
    while (infinityLoop) {
        appConfigFile = path.resolve(appConfigDir, 'app.config.js');
        try {
            appConfig = require(appConfigFile);
            break;
        } catch (e) {
            appConfigErrors.push({
                file: appConfigFile,
                code: e.code
            });
            let t = path.dirname(appConfigDir);
            if (!t || t == appConfigDir) {
                // 当所有的异常都是MODULE_NOT_FOUND，表明用户没有写app.config.js，那么默认从环境变量获取配置
                if (appConfigErrors.length && !appConfigErrors.some(err => err.code !== 'MODULE_NOT_FOUND')) {
                    appConfigFile = path.resolve(__dirname, 'default.config.js');
                    appConfig = require(appConfigFile);
                    console.log('[ Vampire-AppConfig ]', 'Load App Config From Environment');
                    break;
                } else {
                    throw new Error('Load App Config Fail, ' + originAppConfigFile);
                }
            } else {
                appConfigDir = t;
            }
        }
    }
}

if (appConfigFile) {
    console.log('[ Vampire-AppConfig ]', 'Load App Config Success, ' + appConfigFile);
}

if (util.type(appConfig) != 'object') {
    throw new Error('Invalid App Config');
}

// Proxy
let ignoreModifiedKeys = ['__esModule'];
let ignoreCaseConfigKeys = ['appid', 'env'];
let validEnvs = ['fws', 'lpt', 'uat', 'prod'];
//注意：此处prod 的转换和在app.config.js中转换不同，因为该文件需将将pro/prod/prd都转换成prod
function standardEnv(env) {
    const ENV_MAP = {
        'dev': 'fws',
        'fat': 'fws',
        'fws': 'fws',
        'uat_nt': 'uat',
        'uat': 'uat',
        'lpt': 'lpt',
        'pro': 'prod',
        'prod': 'prod',
        'prd': 'prod',
    };
    env = env && env.toLowerCase();
    return ENV_MAP[env] || env
}

function createProxy(target) {
    return new Proxy(target, {
        get: (target, key) => {
            let ret = null;
            if (util.type(key) == 'string') {
                let lowerCaseKey = key.toLowerCase();
                if (ignoreCaseConfigKeys.indexOf(lowerCaseKey) != -1) {
                    if (util.hasOwn(target, lowerCaseKey)) {
                        ret = target[lowerCaseKey];
                    }
                } else {
                    if (util.hasOwn(target, key)) {
                        ret = target[key];
                    }
                }
            } else {
                ret = target[key];
            }
            return ret;
        },
        set: (target, key, value) => {
            if (ignoreModifiedKeys.includes(key)) {
                return;
            }
            let lowerCaseKey = key.toLowerCase();
            if (ignoreCaseConfigKeys.indexOf(lowerCaseKey) != -1) {
                if (lowerCaseKey == 'appid') {
                    if (value && util.type(value) == 'string' && /^\d+$/.test(value)) {
                        target[lowerCaseKey] = value;
                    } else {
                        throw new Error('Invalid AppID,AppID type must be a string and consist of numbers');
                    }
                } else if (lowerCaseKey == 'env') {
                    if (value && util.type(value) == 'string') {
                        let lowerCaseValue = standardEnv(value.toLowerCase());
                        if (validEnvs.indexOf(lowerCaseValue) != -1) {
                            target[lowerCaseKey] = lowerCaseValue;
                        } else {
                            throw new Error('Invalid Env: ' + value + ', valid values are ' + validEnvs.join(', '));
                        }
                    } else {
                        throw new Error('Invalid Env, valid values are ' + validEnvs.join(', '));
                    }
                } else {
                    if (value === null) {
                        delete target[lowerCaseKey];
                    } else {
                        target[lowerCaseKey] = value;
                    }
                }
            } else {
                if (value === null) {
                    delete target[key];
                } else {
                    target[key] = value;
                }
            }
            return true;
        }
    });
}

function getAppID() {
    return process.env.FUNCTION_ID || process.env.PAAS_APP_APPID || process.env.app_id;
}

function getEnv() {
    return process.env.ENV || process.env.PAAS_ENV || process.env.env;
}

// User App Config
let userAppConfig = createProxy({});
Object.getOwnPropertyNames(appConfig).forEach((key) => {
    userAppConfig[key] = appConfig[key];
});

// Default App Config
let defaultAppConfig = {};
validEnvs.forEach((env) => {
    defaultAppConfig[env] = createProxy({});
});

// Runtime App Config
// 格式同用户级配置，可用于框架默认配置或配置合并
// 轻应用: serverless.yml => serverless.config.js
// 优先级 user > runtime > default
let runtimeAppConfig = createProxy({});

// Export App Config
let exportAppConfig = new Proxy({
    setDefaultConfig: (key, value) => {
        let lowerCaseKey = key.toLowerCase();
        if (lowerCaseKey == 'env' && value == null) {
            throw new Error('Env Can\'t Remove By "setDefaultConfig"');
        }
        validEnvs.forEach((env) => {
            defaultAppConfig[env][key] = value;
        });
    },
    setDefaultConfigByEnv: (key, value) => {
        let lowerCaseKey = key.toLowerCase();
        if (lowerCaseKey == 'env') {
            throw new Error('Env Must Set By "setDefaultConfig"');
        }
        if (value === null) {
            validEnvs.forEach((env) => {
                defaultAppConfig[env][key] = value;
            });
        } else if (util.type(value) == 'object') {
            Object.getOwnPropertyNames(value).forEach((env) => {
                let lowerCaseEnv = standardEnv(env.toLowerCase());
                if (validEnvs.indexOf(lowerCaseEnv) != -1) {
                    defaultAppConfig[lowerCaseEnv][key] = value[env];
                } else {
                    console.log('[ Vampire-AppConfig ] Set Default Config By Env Key: ' + key + ', Skip Invalid Env: ' + env);
                }
            });
        } else {
            throw new Error('Invalid Default Config Value Type');
        }
    },
    setRuntimeConfig: (config) => {
        Object.getOwnPropertyNames(config).forEach(key => {
            runtimeAppConfig[key] = config[key];
        });
    }
}, {
    get: (target, key) => {
        if (util.hasOwn(target, key)) {
            return target[key];
        }
        let ret = userAppConfig[key];
        if (ret === null) {
            ret = runtimeAppConfig[key];
        }
        if (ret === null) {
            ret = defaultAppConfig[userAppConfig.env || defaultAppConfig.prod.env][key];
        }
        return ret;
    },
    set: (target, key, value) => {
        let lowerCaseKey = key.toLowerCase();
        if (lowerCaseKey == 'env' || lowerCaseKey == 'appid') {
            throw new Error('Invalid App Config Key');
        } else {
            userAppConfig[key] = value;
        }
        return true;
    },
    ownKeys() {
        const defaultAppConfigByEnv = defaultAppConfig[userAppConfig.env || defaultAppConfig.prod.env];
        const obj = Object.assign({}, defaultAppConfigByEnv, userAppConfig);
        const keys = Object.keys(obj).concat('AppId', 'AppID', 'appID', 'appId', 'ENV', 'Env');
        return keys;
    },
    getOwnPropertyDescriptor(target, name) {
        return {
            value: this.get(target, name),
            configurable: true,
            enumerable: true
        };
    }
});

let defaultAppId = getAppID()
if (defaultAppId && /^\d+$/.test(defaultAppId)) {
    exportAppConfig.setDefaultConfig('appid', defaultAppId);
}

let defaultEnv = standardEnv(getEnv())
if (defaultEnv && validEnvs.includes(defaultEnv)) {
    exportAppConfig.setDefaultConfig('env', defaultEnv);
} else {
    exportAppConfig.setDefaultConfig('env', 'fws');
}

exportAppConfig.setDefaultConfig('appConfigFile', appConfigFile);

if (!exportAppConfig.appid) {
    throw new Error('Invalid AppID : Missing `AppID` key');
}
if (getAppID() && exportAppConfig.AppID != getAppID()) {
    throw new Error(`The current 'Appid'(${exportAppConfig.AppID}) in app.config.js is inconsistent with the Appid (${getAppID()}) in the environment variable, please confirm!`);
}
module.exports = exportAppConfig;
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.viApiHandler = void 0;
const node_vampire_hook_1 = require("@ctrip/node-vampire-hook");
const node_vampire_appconfig_1 = __importDefault(require("@ctrip/node-vampire-appconfig"));
const node_vampire_cat_1 = __importDefault(require("@ctrip/node-vampire-cat"));
const AppInfo_1 = require("./util/AppInfo");
const depsInfo_1 = require("./util/depsInfo/depsInfo");
const HostInfo_1 = require("./util/HostInfo");
const Status_1 = require("./util/Status");
const IgniteManager_1 = require("./IgniteManager");
const SimpleLogger_1 = require("./util/SimpleLogger");
const LogFile_1 = require("./util/LogFile");
require("./ignite/CtripEnvIgnite");
const cas_1 = require("./util/cas");
const node_vampire_metric_1 = __importDefault(require("@ctrip/node-vampire-metric"));
const node_vampire_http_1 = __importDefault(require("@ctrip/node-vampire-http"));
const config_1 = require("./util/config");
const package_json_1 = __importDefault(require("../package.json"));
const version = package_json_1.default.version;
let metric, _timeout;
let _igniteStatus;
const chackHealthUrl = [
    /^.*?\/vi\/health$/,
    /^.*?\/slbhealthcheck.html$/,
    /^.*?\/slbhealthcheck$/,
    /^.*?\/healthcheck$/
];
class ViApiHandler {
    constructor() { }
    async init() {
        this.initServerHook();
        this.realtimeStatus = () => AppInfo_1.appInfo.getStatus();
        this.igniteStatus = () => {
            if (!_igniteStatus && node_vampire_appconfig_1.default['vi.ignite']) {
                _igniteStatus = IgniteManager_1.IgniteManager.ignite().then(() => {
                    return AppInfo_1.appInfo.getStatus();
                });
            }
            return _igniteStatus;
        };
        await this.igniteStatus();
        //depsInfo.loadDeps();
    }
    initServerHook() {
        const _this = this;
        return node_vampire_hook_1.serverHook.on('request', function (req, res, handler) {
            try {
                const protocol = req.headers['x-ctrip-isssl'] ? 'https' : 'http';
                const urlParse = new URL(req.url || '', `${protocol}://${req.headers.host}`);
                const path = urlParse.pathname;
                const obj = {
                    '^.*?/component/fieldmeta$': () => {
                        res.end(JSON.stringify(config_1.FIELD_META));
                    },
                    '^.*?/component/vi.hostinfo$': () => {
                        return HostInfo_1.hostInfo.then((hostInfo) => {
                            res.end(hostInfo);
                        });
                    },
                    '^.*?/component/vi.appinfo$': () => {
                        return AppInfo_1.appInfo.getData().then((appInfo) => {
                            res.end(appInfo);
                        });
                    },
                    '^.*?/vi/api/analyzer/deps$': () => {
                        return depsInfo_1.depsInfo.loadDeps().then((data) => {
                            res.setHeader('content-type', 'text/plain;charset=UTF-8');
                            res.writeHead(200, {
                                'Access-Control-Allow-Origin': '*'
                            });
                            res.end(data);
                        }).catch((err) => {
                            (0, LogFile_1.log)(err);
                            res.end(err);
                        });
                    },
                    '^/vi/index.html$': () => {
                        try {
                            (0, node_vampire_http_1.default)(node_vampire_appconfig_1.default['loadhtml.url'] + '/index.html', {
                                contentType: 'response',
                                headers: {
                                    'content-type': 'text/html'
                                }
                            }).then((ret) => {
                                const body = ret.body.toString();
                                res.setHeader('Content-Type', 'text/html');
                                res.end(body);
                            }).catch((err) => {
                                (0, LogFile_1.log)('loadhtml error:' + err);
                                res.end();
                            });
                        }
                        catch (err) {
                            (0, LogFile_1.log)('cas validate error:' + err);
                            res.statusCode = 404;
                            res.end();
                        }
                    },
                    '^.*?/vi/api/analyzer/deps.html$': () => {
                        try {
                            (0, node_vampire_http_1.default)(node_vampire_appconfig_1.default['loadhtml.url'] + '/deps', {
                                contentType: 'response',
                                headers: {
                                    'content-type': 'text/html'
                                }
                            }).then((ret) => {
                                const body = ret.body.toString();
                                res.setHeader('Content-Type', 'text/html');
                                res.end(body);
                            }).catch((err) => {
                                (0, LogFile_1.log)('loadhtml error:' + err);
                                res.end();
                            });
                        }
                        catch (err) {
                            (0, LogFile_1.log)('cas validate error:' + err);
                            res.statusCode = 404;
                            res.end();
                        }
                    },
                    '^/vi.ignitestatus$': () => {
                        res.setHeader('Access-Control-Allow-Origin', '*');
                        res.end(SimpleLogger_1.simpleLogger.msgContainer.join('##ignite##'));
                    },
                    '^/vi/api/component/vi.ignitestatus$': () => {
                        res.setHeader('Access-Control-Allow-Origin', '*');
                        res.end(JSON.stringify(SimpleLogger_1.simpleLogger.result()));
                    },
                };
                let matchPath;
                Object.keys(obj).forEach((item) => {
                    if (new RegExp(item).test(path)) {
                        matchPath = item;
                    }
                });
                if (matchPath) {
                    res.statusCode = 200;
                    return (0, cas_1.auth)(req, res).then(() => {
                        obj[matchPath]();
                        return true;
                    }).catch(() => {
                        (0, cas_1.login)(req, res);
                        return true;
                    });
                }
                else if (_this.isHealthCheckUrl(path)) {
                    if (node_vampire_appconfig_1.default['vi.ignite']) {
                        metric.add(1, {
                            appid: node_vampire_appconfig_1.default['appId'],
                            version: version
                        });
                        const reStatus = _this.executeService(path);
                        res.statusCode = reStatus.responseCode;
                        res.end(reStatus.rtn);
                        return true;
                    }
                    return handler;
                }
                else {
                    return handler;
                }
            }
            catch (err) {
                (0, LogFile_1.log)(err);
                node_vampire_cat_1.default.error(err, `url: ${req.url},host: ${req.headers.host}`);
                return handler;
            }
        });
    }
    isHealthCheckUrl(pathname) {
        for (const _key of chackHealthUrl) {
            if (_key.test(pathname))
                return true;
        }
        return false;
    }
    executeService(path) {
        let responseCode = 502;
        let rtn = null;
        try {
            switch (path.split('/').pop()) {
                case "slbhealthcheck.html":
                case "health":
                case "slbhealthcheck":
                case "healthcheck":
                    responseCode = Status_1.IniteStatus[AppInfo_1.appInfo.getStatus()];
                    rtn = AppInfo_1.appInfo.getStatus();
                    break;
                default:
                    break;
            }
        }
        catch (err) {
            (0, LogFile_1.log)(err);
            rtn = err + '';
        }
        return { rtn, responseCode };
    }
}
exports.viApiHandler = new ViApiHandler();
function checkServer() {
    const serverList = node_vampire_hook_1.serverHook.getServers().length > 0 && node_vampire_hook_1.serverHook.getServers();
    let isListenServer = false;
    while (serverList.length > 0) {
        const _server = serverList.shift();
        if (_server.address && _server.address() && _server.address().port) {
            metric = new node_vampire_metric_1.default({
                name: 'node.vampire.vi.iginte.count',
                tags: {
                    'appid': '',
                    'version': ''
                },
                interval: 6000
            });
            metric.start();
            exports.viApiHandler.init();
            isListenServer = true;
            clearTimeout(_timeout);
            return;
        }
    }
    if (!isListenServer) {
        _timeout = setTimeout(checkServer, 500).unref();
    }
    else {
        clearTimeout(_timeout);
    }
}
checkServer();

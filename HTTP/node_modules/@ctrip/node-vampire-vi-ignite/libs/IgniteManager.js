"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IgniteManager = void 0;
const Status_1 = require("./util/Status");
const LogHelper_1 = require("./util/LogHelper");
const SimpleLogger_1 = require("./util/SimpleLogger");
const AppInfo_1 = require("./util/AppInfo");
const LogFile_1 = require("./util/LogFile");
const node_vampire_cat_1 = __importDefault(require("@ctrip/node-vampire-cat"));
const runInGlobalContextAsync = node_vampire_cat_1.default.runInGlobalContextAsync || async function (fn) { await fn(); };
const node_vampire_appconfig_1 = __importDefault(require("@ctrip/node-vampire-appconfig"));
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const CtripIgnitePlugin_1 = require("./ignite/CtripIgnitePlugin");
class IgniteManager {
    constructor() {
    }
    /**
     * vi ignite
     */
    static async ignite() {
        if (IgniteManager.igniteStatus == Status_1.Status[0]) {
            const startTime = new Date();
            SimpleLogger_1.simpleLogger.startTime = node_vampire_util_1.default.formatDateTime(startTime, 'yyyy-MM-dd hh:mm:ss:SSS');
            SimpleLogger_1.simpleLogger.info('Begin ignite');
            SimpleLogger_1.simpleLogger.blankLine();
            SimpleLogger_1.simpleLogger.info('Current EnApp is ' + node_vampire_appconfig_1.default['appId']);
            SimpleLogger_1.simpleLogger.info('Current EnHost is ' + node_vampire_util_1.default.getHostIp());
            SimpleLogger_1.simpleLogger.info('Current EnPid is ' + process.pid);
            SimpleLogger_1.simpleLogger.info("AppInfo ready");
            AppInfo_1.appInfo.setAppStatus(Status_1.AppStatus[1]);
            try {
                let igniteList = (0, CtripIgnitePlugin_1.getIgniteList)();
                let igniteStatus = Status_1.Status[0];
                while (igniteList[0]) {
                    SimpleLogger_1.simpleLogger.currentPluginIndex++;
                    const item = igniteList.shift();
                    await runInGlobalContextAsync(async () => {
                        await node_vampire_cat_1.default.span('VI.ignite', item.igniteName).run(async (done) => {
                            node_vampire_cat_1.default.event('VI.ignitePlugin', item.igniteName);
                            SimpleLogger_1.simpleLogger.infos.push({ id: item.igniteName, className: item.igniteName, before: [], after: [] });
                            SimpleLogger_1.simpleLogger.blankLine();
                            SimpleLogger_1.simpleLogger.info(LogHelper_1.LogHelper.beginBlock('execute plugin', { 'id': item.igniteName, 'name': item.igniteName + '-' + item.igniteType }));
                            let outcome = false;
                            try {
                                outcome = await item.run();
                                if (!outcome) {
                                    SimpleLogger_1.simpleLogger.error('Ignite Plugin ' + item.igniteName + ' finish execute, but return false');
                                    AppInfo_1.appInfo.setAppStatus(Status_1.AppStatus[3]);
                                    IgniteManager.igniteStatus = Status_1.Status[3];
                                    igniteStatus = Status_1.Status[3];
                                }
                                return;
                            }
                            catch (err) {
                                SimpleLogger_1.simpleLogger.error('Ignite Plugin ' + item.igniteName + ' execute failed', err);
                                AppInfo_1.appInfo.setAppStatus(Status_1.AppStatus[3]);
                                IgniteManager.igniteStatus = Status_1.Status[3];
                                igniteStatus = Status_1.Status[3];
                                return;
                            }
                            finally {
                                SimpleLogger_1.simpleLogger.info(LogHelper_1.LogHelper.endBlock('execute plugin', ['isPass', outcome]));
                                done();
                            }
                        });
                    });
                }
                if (igniteStatus != Status_1.Status[3]) {
                    IgniteManager.igniteStatus = Status_1.Status[2];
                    AppInfo_1.appInfo.setAppStatus(Status_1.AppStatus[2]);
                }
            }
            catch (error) {
                SimpleLogger_1.simpleLogger.error("Execute ignite plugins failed", error);
                IgniteManager.igniteStatus = Status_1.Status[3];
                AppInfo_1.appInfo.setAppStatus(Status_1.AppStatus[3]);
            }
            finally {
                (0, CtripIgnitePlugin_1.isEndIgnited)(true); // 点火结束，不可再注册点火
                SimpleLogger_1.simpleLogger.blankLine();
                SimpleLogger_1.simpleLogger.info("End ignite");
                SimpleLogger_1.simpleLogger.blankLine();
                const cost = new Date().getTime() - startTime.getTime();
                AppInfo_1.appInfo.setLatestNews('Ignite end. result:' + IgniteManager.igniteStatus + ', cost:' + cost + 'ms');
                (0, LogFile_1.log)('vi ingite result: ' + AppInfo_1.appInfo.getStatus() + ' ====');
                SimpleLogger_1.simpleLogger.status = IgniteManager.igniteStatus;
                SimpleLogger_1.simpleLogger.cost = cost;
            }
        }
    }
    /**
     * reset ignite status
     */
    static reset() {
        AppInfo_1.appInfo.setAppStatus(Status_1.AppStatus[0]);
        IgniteManager.igniteStatus = Status_1.Status[0];
    }
}
exports.IgniteManager = IgniteManager;
IgniteManager.igniteStatus = Status_1.Status[0];

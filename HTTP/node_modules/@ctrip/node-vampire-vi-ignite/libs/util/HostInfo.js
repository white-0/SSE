"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hostInfo = exports.HostInfo = void 0;
const os_1 = __importDefault(require("os"));
const node_vampire_hostinfo_1 = __importDefault(require("@ctrip/node-vampire-hostinfo"));
const node_vampire_appconfig_1 = __importDefault(require("@ctrip/node-vampire-appconfig"));
const node_vampire_foundation_framework_1 = __importDefault(require("@ctrip/node-vampire-foundation-framework"));
let isLinux = os_1.default.platform() == 'linux';
let isDocker = os_1.default.platform() == 'linux' && process.env['CDOS_CPUS'];
let _env = '';
node_vampire_foundation_framework_1.default.getEnv().then((env) => _env = env);
const { getDockerCpuInfo, getCpuInfo, getMemoryInfo, getFileDescriptorStatus, getNetInfo } = node_vampire_hostinfo_1.default;
class HostInfo {
    constructor() {
        this.hostName = os_1.default.hostname();
        this.docker_CPU_Usage = 0; //"Docker  CPU使用率"
        this.docker_Processors = 0; // 'dockder  CPU核数'
        this.process_number = 0; // 'Pm2进程数'
        this.docker_CPU_Throttle_Time = 0; // 'Docker  CPU被限制的时间（单位：m)'
        this.docker_CPU_Throttle_Count = 0; //'Docker  CPU被限制的次数'
        this.docker_Total_Memory = 0; //'Docker 内存总量'
        this.docker_Used_RSS_Memory = ''; // 'Docker 已使用内存(RSS)'
        this.open_File_Descriptor_Count = 0; //打开的文件描述符数目(仅类unix系统有值)
        this.max_File_Descriptor_Count = 0; //最大文件描述符数目(仅类unix系统有值)
        this.os = os_1.default.type(); // '操作系统'
        this.idc = ''; // '服务器所在数据中心'
        this.node_Version = process.version.slice(1); //'当前nodejs版本信息'
        this.env = `Env[from:AppConfig]: ${node_vampire_appconfig_1.default['Env']}, Env[from:Docker]: ${_env}`; //'当前环境'
    }
    loadInfo() {
        let cpu = {};
        let memory = {};
        let fileDescriptor = {};
        let net = {};
        let pArr = [];
        if (isDocker) {
            pArr.push(new Promise((resolve) => {
                getDockerCpuInfo((dockerCpuInfo) => {
                    cpu = dockerCpuInfo;
                    resolve();
                });
            }));
        }
        else {
            pArr.push(new Promise((resolve) => {
                getCpuInfo(function (cpuInfo) {
                    cpu = cpuInfo;
                    resolve();
                });
            }));
        }
        pArr.push(new Promise((resolve) => {
            getMemoryInfo((memoryInfo) => {
                memory = memoryInfo;
                resolve();
            });
        }));
        if (isLinux) {
            pArr.push(new Promise((resolve) => {
                getFileDescriptorStatus(function (fileDescriptorStatus) {
                    fileDescriptor = fileDescriptorStatus;
                    resolve();
                });
            }));
            pArr.push(new Promise((resolve) => {
                getNetInfo(function (netInfo) {
                    net = netInfo;
                    resolve();
                });
            }));
        }
        return Promise.all(pArr).then(() => {
            this.docker_CPU_Usage = cpu.usage * 10;
            this.docker_CPU_Throttle_Time = cpu.dockerThrottledTime / 1e9;
            this.docker_CPU_Throttle_Count = cpu.dockerThrottledCount;
            this.docker_Total_Memory = memory.total;
            this.docker_Used_RSS_Memory = memory.rss;
            this.docker_Processors = isDocker ? cpu.dockerCount : cpu.count;
            this.open_File_Descriptor_Count = fileDescriptor.open;
            this.max_File_Descriptor_Count = fileDescriptor.max;
            return JSON.stringify({
                HostName: this.hostName,
                guestCpuUsage: this.docker_CPU_Usage,
                processNumber: this.process_number,
                guestCpuCore: this.docker_Processors,
                systemCpuThrottledTime: this.docker_CPU_Throttle_Time,
                systemCpuThrottledCount: this.docker_CPU_Throttle_Count,
                guestTotalMem: this.docker_Total_Memory,
                rssMem: this.docker_Used_RSS_Memory,
                idc: this.idc,
                nodeVersion: this.node_Version,
                openFileDescriptorCount: this.open_File_Descriptor_Count,
                maxFileDescriptorCount: this.max_File_Descriptor_Count,
                env: this.env,
                OSName: this.os,
                processEnv: process.env
            });
        }).catch(() => {
            //empty
            return JSON.stringify({
                HostName: this.hostName,
                guestCpuUsage: this.docker_CPU_Usage,
                processNumber: this.process_number,
                guestCpuCore: this.docker_Processors,
                systemCpuThrottledTime: this.docker_CPU_Throttle_Time,
                systemCpuThrottledCount: this.docker_CPU_Throttle_Count,
                guestTotalMem: this.docker_Total_Memory,
                rssMem: this.docker_Used_RSS_Memory,
                idc: this.idc,
                nodeVersion: this.node_Version,
                openFileDescriptorCount: this.open_File_Descriptor_Count,
                maxFileDescriptorCount: this.max_File_Descriptor_Count,
                env: this.env,
                OSName: this.os,
                processEnv: process.env
            });
        });
    }
}
exports.HostInfo = HostInfo;
exports.hostInfo = new HostInfo().loadInfo();

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogHelper = void 0;
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const node_vampire_triplog_1 = require("@ctrip/node-vampire-triplog");
const LogFile_1 = require("./LogFile");
class LogHelper {
    constructor() {
    }
    static beginBlock(title, params) {
        let rtn = LogHelper.SPECIALINFOPREFIX + 'Begin ' + title + '@?';
        if (!params) {
            return rtn;
        }
        for (const key in params) {
            rtn += key + '=' + params[key] + '&';
        }
        return rtn.substring(0, rtn.length - 1);
    }
    static endBlock(title, params) {
        let rtn = '#@#End ' + title + '@?';
        if (params) {
            for (let item = 0; item < params.length; item++) {
                rtn += params[item] + '=';
                ++item;
                rtn += params[item] + '&';
            }
            if (params.length >= 2) {
                return rtn.substring(0, rtn.length - 1);
            }
        }
        return rtn;
    }
    static createMessage(msg, date) {
        return msg + '<time>' + node_vampire_util_1.default.formatDateTime(date) + "</time>";
    }
    static info(data) {
        (0, LogFile_1.log)(data);
        node_vampire_triplog_1.tripLog.custom({ title: 'Node-Vi.Ignite', message: data, addInfo: {}, type: 'info' });
    }
    static warn(data) {
        (0, LogFile_1.log)(data);
        node_vampire_triplog_1.tripLog.custom({ title: 'Node-Vi.Ignite', message: data, addInfo: {}, type: 'warn' });
    }
    static error(data) {
        (0, LogFile_1.log)(data);
        node_vampire_triplog_1.tripLog.custom({ title: 'Node-Vi.Ignite', message: data, addInfo: {}, type: 'error' });
    }
}
exports.LogHelper = LogHelper;
LogHelper.SPECIALINFOPREFIX = '#@#';
LogHelper.HASTIME = '@#@#@';

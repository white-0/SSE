"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.login = exports.auth = void 0;
const config_1 = require("./config");
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const node_vampire_http_1 = __importDefault(require("@ctrip/node-vampire-http"));
const node_vampire_foundation_framework_1 = __importDefault(require("@ctrip/node-vampire-foundation-framework"));
const node_vampire_appconfig_1 = __importDefault(require("@ctrip/node-vampire-appconfig"));
const tldjs_1 = __importDefault(require("tldjs"));
let sso2CasHost = null;
if (typeof config_1.CONFIG['sso2.CasHost'][node_vampire_appconfig_1.default.env] === 'string') {
    sso2CasHost = config_1.CONFIG['sso2.CasHost'][node_vampire_appconfig_1.default.env];
}
else {
    const region = node_vampire_foundation_framework_1.default.getServerPropertiesSync('region');
    sso2CasHost = config_1.CONFIG['sso2.CasHost'][node_vampire_appconfig_1.default.env][region] || config_1.CONFIG['sso2.CasHost'][node_vampire_appconfig_1.default.env]['SHA'];
}
function getCookieByName(req) {
    let ret;
    if (req.headers.cookie) {
        let re = new RegExp('(^|; ?)' + node_vampire_util_1.default.formatReString(encodeURIComponent(config_1.CONFIG['cookieName'][node_vampire_appconfig_1.default.env])) + '(=([^;]*)|;|$)');
        let arr = req.headers.cookie.match(re);
        if (arr) {
            ret = decodeURIComponent(arr[3] || '');
        }
    }
    return ret;
}
function auth(req, res) {
    let cookieValue = getCookieByName(req);
    const protocol = req.headers['x-ctrip-isssl'] ? 'https' : 'http';
    const urlObj = new URL(req.url || '', `${protocol}://${req.headers.host}`);
    const redirectUrl = protocol + '//' + req.headers.host + urlObj.pathname;
    return (0, node_vampire_http_1.default)(sso2CasHost + '/json/checkSession', {
        rejectUnauthorized: false,
        contentType: 'json'
    }, JSON.stringify({
        cookieValue,
        redirectUrl,
        appId: node_vampire_appconfig_1.default['AppId']
    })).then(ret => {
        if (ret && ret.returnCode === 0 && ret.userAttr) {
            return;
        }
        else {
            throw ret.returnCode;
        }
    }).catch(() => {
        const ticket = urlObj.searchParams.get('ticket');
        if (!ticket) {
            throw new Error('Invalid Ticket');
        }
        return validTicket(ticket).then(({ cookieValue, cookieExpire }) => __setCookie(req, res, cookieValue, cookieExpire));
    });
}
exports.auth = auth;
function validTicket(ticket) {
    return (0, node_vampire_http_1.default)(sso2CasHost + '/json/validTicket', {
        rejectUnauthorized: false,
        contentType: 'json',
    }, JSON.stringify({
        ticket
    })).then(ret => {
        if (ret && ret.returnCode === 0) {
            return { cookieValue: ret.cookieValue, cookieExpire: ret.cookieExpire };
        }
        throw ret.returnCode;
    });
}
function __setCookie(req, res, cookie, expire) {
    const domain = __getDomain(req);
    let cookies = res.getHeader('Set-Cookie') || [];
    if (node_vampire_util_1.default.type(cookies) === 'string') {
        cookies = cookies.split(';');
    }
    let cookieString = config_1.CONFIG['cookieName'][node_vampire_appconfig_1.default.env] + '=' + cookie + '; path=/; Max-Age=' + (expire - Date.now()) / 1000 + '; domain=' + domain + '; HttpOnly';
    if (req.headers['x-ctrip-isssl']) {
        cookieString += '; SameSite=None; Secure';
    }
    cookies.push(cookieString);
    res.setHeader('Set-Cookie', cookies);
}
function __getDomain(req) {
    let domain = (req.headers.host || '').replace(/:.*$/, '');
    let isValidDomain = /\./.test(domain);
    if (!/^\d+\.\d+\.\d+\.\d+$/.test(domain) && isValidDomain) {
        domain = '.' + (tldjs_1.default.getDomain(domain) || domain);
    }
    return domain;
}
function login(req, res) {
    return auth(req, res).catch(() => {
        const urlObj = new URL(req.url || '', `http://${req.headers.host}`);
        const ticket = urlObj.searchParams.get('ticket');
        if (ticket) {
            if (res.headersSent) {
                return;
            }
            const redirect_url = new URL(urlObj.href);
            redirect_url.searchParams.delete('ticket');
            res.writeHead(302, {
                'Content-Type': 'text/plain; charset=utf-8',
                'Location': redirect_url
            });
            res.end();
        }
        else {
            res.writeHead(200, {
                'Content-Type': 'text/html; charset=utf-8',
                'Cache-Control': 'no-cache'
            });
            res.end([
                '<!DOCTYPE html>',
                '<html xmlns="http://www.w3.org/1999/xhtml">',
                '<head>',
                '<meta http-equiv="content-type" content="text/html; charset=UTF-8" />',
                '<title>CtripCas</title>',
                '</head>',
                '<body>',
                'Redirect To Login Page',
                '<script>',
                'var url=null;',
                'if (!window.URL) {',
                '	console.log("Unsupported Browser");',
                '} else {',
                '   url= new URL(location.href);',
                '	url.searchParams.delete("ticket");',
                '	url.hash="";',
                '}',
                '	location.href=' + JSON.stringify(config_1.CONFIG['CasHost'][node_vampire_appconfig_1.default.env] + '/session/check?service=') + ' + encodeURIComponent(url) + ' + '"&appId=' + node_vampire_appconfig_1.default['AppId'] + '";',
                '</script>',
                '</body>',
                '</html>'
            ].join('\r\n'));
        }
    });
}
exports.login = login;

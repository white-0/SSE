"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.depsInfo = void 0;
const pkgList_1 = require("./pkgList");
const LogFile_1 = require("../LogFile");
const fs_1 = __importDefault(require("fs"));
let flag = 0;
class DepsInfo {
    constructor() {
    }
    loadDeps() {
        if (!this.load) {
            this.load = Promise.all([this._loadDeps(), this._loadGlobalDeps(), this._loadLayerDeps()]).then(([deps, globalDeps, layerDeps]) => {
                return JSON.stringify({ deps, globalDeps, layerDeps });
            });
        }
        return this.load;
    }
    _loadDeps(dir, retryTimes) {
        dir = dir || process.cwd();
        return (0, pkgList_1.parseDeps)(dir).then((depsObj) => {
            this.depsObj = depsObj.deps && this._parseDeps(depsObj.deps) || [];
            return this.depsObj;
        }).catch((err) => {
            (0, LogFile_1.log)('[@ctrip/node-vampire-vi-ignite] deps err: ' + err);
            retryTimes = retryTimes || 0;
            retryTimes++;
            if (retryTimes < 3)
                this._loadDeps(dir, retryTimes);
            throw err;
        });
    }
    _loadGlobalDeps() {
        if (!require('module').builtinModules.includes('tripcore')) {
            return Promise.resolve([]);
        }
        const tripcore = require('tripcore');
        const dir = tripcore.__dirname;
        return this._loadDeps(dir);
    }
    _loadLayerDeps() {
        if (!require('module').builtinModules.includes('tripcore')) {
            return Promise.resolve([]);
        }
        if (fs_1.default.existsSync('/opt/layers/nodejs'))
            return this._loadDeps('/opt/layers/nodejs');
        return Promise.resolve([]);
    }
    _parseDeps(deps, result = []) {
        for (let _key of deps) {
            if (!_key.version) {
                continue;
            }
            const obj = { title: _key.package, key: _key.keyName + ':' + _key.version + flag++, filePath: _key.dir, deduped: _key.deduped };
            if (_key && _key['deps']) {
                obj.children = [];
                this._parseDeps(_key['deps'], obj.children);
            }
            result.push(obj);
        }
        return result;
    }
}
exports.depsInfo = new DepsInfo();

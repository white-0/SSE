"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.simpleLogger = exports.SimpleLogger = void 0;
const LogHelper_1 = require("./LogHelper");
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
class SimpleLogger {
    constructor() {
        this._regExp = /(.*)<time>(.+)<\/time>$/;
        this.msgContainer = [];
        this.cost = 0;
        this.status = null;
        this.startTime = null;
        this.currentPluginIndex = 0;
        this.infos = [];
    }
    blankLine() {
        this.msgContainer.push('\r\n');
    }
    info(msg) {
        let time = null;
        if (this._regExp.test(msg)) {
            time = RegExp.$2;
            msg = RegExp.$1;
        }
        if (msg.startsWith('#@#')) {
            LogHelper_1.LogHelper.info(msg + ' #' + node_vampire_util_1.default.formatDateTime(new Date(), 'yyyy-MM-dd hh:mm:ss:SSS'));
            this.msgContainer.push(msg + ' #' + node_vampire_util_1.default.formatDateTime(new Date(), 'yyyy-MM-dd hh:mm:ss:SSS'));
        }
        else {
            LogHelper_1.LogHelper.info('[INFO] ' + (time === null ? node_vampire_util_1.default.formatDateTime(new Date(), 'yyyy-MM-dd hh:mm:ss:SSS') : time) + ' - ' + msg + '\r\n');
            this.msgContainer.push('[INFO] ' + (time === null ? node_vampire_util_1.default.formatDateTime(new Date(), 'yyyy-MM-dd hh:mm:ss:SSS') : time) + ' - ' + msg);
        }
    }
    warn(msg) {
        let time = null;
        if (this._regExp.test(msg)) {
            msg.match(this._regExp);
            time = RegExp.$2;
            msg = RegExp.$1;
        }
        LogHelper_1.LogHelper.warn('[WARN] ' + (time === null ? node_vampire_util_1.default.formatDateTime(new Date(), 'yyyy-MM-dd hh:mm:ss:SSS') : time) + ' - ' + msg + '\r\n');
        this.msgContainer.push('[WARN] ' + (time === null ? node_vampire_util_1.default.formatDateTime(new Date(), 'yyyy-MM-dd hh:mm:ss:SSS') : time) + ' - ' + msg);
    }
    error(msg, err) {
        let time = null;
        if (this._regExp.test(msg)) {
            msg.match(this._regExp);
            time = RegExp.$2;
            msg = RegExp.$1;
        }
        let stack;
        switch (node_vampire_util_1.default.type(err)) {
            case 'object':
                stack = JSON.stringify(err);
                break;
            default:
                stack = err;
                break;
        }
        LogHelper_1.LogHelper.error('[ERROR] ' + (time === null ? node_vampire_util_1.default.formatDateTime(new Date(), 'yyyy-MM-dd hh:mm:ss:SSS') : time) + ' - ' + msg + (stack ? (' - ' + stack) : '') + '\r\n');
        this.msgContainer.push('[ERROR] ' + (time === null ? node_vampire_util_1.default.formatDateTime(new Date(), 'yyyy-MM-dd hh:mm:ss:SSS') : time) + ' - ' + msg + (stack ? (' - ' + stack) : ''));
    }
    result() {
        return { status: this.status, startTime: this.startTime, cost: this.cost, infos: this.infos, messages: this.msgContainer, currentPluginIndex: this.currentPluginIndex - 1 };
    }
}
exports.SimpleLogger = SimpleLogger;
exports.simpleLogger = new SimpleLogger();

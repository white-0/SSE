const {
    Console
} = require("console");
const {
    Transform
} = require("stream");

const LINE_WRAP = Buffer.from("\n");
const colors = ['LOG', 'ERROR', 'INFO', 'WARN', 'DEBUG', 'ERROR'];

// 针对注入的环境变量TCONSOLE_DEBUG做分类，支持模糊匹配和严格匹配如:vampire:redis,vampire:*
const MATCH_ENV = [];
if (process.env['TCONSOLE_DEBUG']) {
    try {
        const _debug = process.env['TCONSOLE_DEBUG'] || '';
        _debug.split(',').forEach((x) => {
            x = x.replace(/\*/g, '.*?');
            const name = new RegExp('^' + x + '$');
            MATCH_ENV.push(name);
        });
    } catch (e) {
        //empty
    }
}

// 日志等级
const CONSOLE_LEVEL_CONFIG = Object.create(null);
CONSOLE_LEVEL_CONFIG["debug"] = {
    level: "DEBUG",
    default: false,
    envs: ["TCONSOLE_DEBUG"],
};
CONSOLE_LEVEL_CONFIG["info"] = {
    level: "INFO",
    default: false,
    envs: ["TCONSOLE_DEBUG"],
};
CONSOLE_LEVEL_CONFIG["warn"] = {
    level: "WARN",
    default: true,
    envs: ["TCONSOLE_WARN", "TCONSOLE_DEBUG"],
};
CONSOLE_LEVEL_CONFIG["error"] = {
    level: "ERROR",
    default: true,
    envs: ["TCONSOLE_ERROR", "TCONSOLE_DEBUG"],
};
CONSOLE_LEVEL_CONFIG["log"] = {
    level: "LOG",
    default: false,
    envs: ["TCONSOLE_DEBUG"],
};
CONSOLE_LEVEL_CONFIG["time"] = {
    level: "TIME",
    default: false,
    envs: ["TCONSOLE_DEBUG"],
};
CONSOLE_LEVEL_CONFIG["timeEnd"] = {
    level: "TIME",
    default: false,
    envs: ["TCONSOLE_DEBUG"],
};

class LinePrefixTransform extends Transform {
    constructor(linePrefix, stream) {
        super();
        this.current = null;
        this.lineBegin = true;
        this.linePrefix = linePrefix || "";
        this.isTTY = stream.isTTY;
        this.pipe(stream, {
            end: false
        });
    }
    writePrefix() {
        const color = colors.indexOf((this.current || '').trim());
        const colorCode = '\u001B[3' + (color < 8 ? color : '8;5;' + color);
        const prefix = `${colorCode};5m${this.current}:[ ${this.linePrefix} ] \u001B[0m`;
        this.push(prefix);
    }
    _transform(chunk, encoding, callback) {
        let i = 0,
            j = -1;
        while ((j = chunk.indexOf(LINE_WRAP, i)) != -1) {
            if (this.lineBegin) {
                this.writePrefix();
            }
            this.push(chunk.slice(i, j + 1));
            i = j + 1;
            this.lineBegin = true;
        }
        if (i < chunk.length) {
            if (this.lineBegin) {
                this.writePrefix();
            }
            this.push(chunk.slice(i));
            this.lineBegin = false;
        }
        callback();
    }
}
const MAX_LEVEL_LENGTH = Math.max.apply(
    Math,
    Object.values(CONSOLE_LEVEL_CONFIG).map((x) => x.level.length)
);

function matchConsoleLevel(method) {
    let config = CONSOLE_LEVEL_CONFIG[method];
    if (config) {
        if (config.default) {
            return !config.envs.some((x) => process.env[x] == "0");
        } else {
            return config.envs.some((x) => process.env[x] == "1");
        }
    } else {
        return true;
    }
}

function getConsoleLevel(method) {
    let level = "LOG";
    if (method in CONSOLE_LEVEL_CONFIG) {
        level = CONSOLE_LEVEL_CONFIG[method].level.toUpperCase();
    }
    return level.padStart(MAX_LEVEL_LENGTH, " ");
}

class ConsleExt extends Console {
    constructor(...args) {
        super(...args);
    }
    async debugRun(fn) {
        if (matchConsoleLevel("debug")) {
            try {
                await fn();
            } catch (e) {
                this.error(e);
            }
        }
    }
    async infoRun(fn) {
        if (matchConsoleLevel("info")) {
            try {
                await fn();
            } catch (e) {
                this.error(e);
            }
        }
    }
}

class TConsole {
    constructor(linePrefix, opts) {
        let outStream = new LinePrefixTransform(linePrefix, process.stdout);
        let errStream = new LinePrefixTransform(linePrefix, process.stderr);
        let tConsole = new ConsleExt(
            Object.assign({}, opts, {
                stdout: outStream,
                stderr: errStream,
            })
        );
        const mCLevelByEnv = MATCH_ENV.filter((x) => x.test(linePrefix));

        let tConsoleProxy = new Proxy(tConsole, {
            get: function (target, prop) {
                if (prop in CONSOLE_LEVEL_CONFIG) {
                    return function (...args) {
                        // 当环境变量匹配时，或未指定环境变量时输出
                        if (MATCH_ENV.length == 0 && matchConsoleLevel(prop) || mCLevelByEnv.length > 0) {
                            outStream.current = errStream.current = getConsoleLevel(prop);
                            return target[prop].apply(target, args);
                        }
                    };
                } else {
                    return target[prop];
                }
            },
        });
        return tConsoleProxy;
    }
}

// 保证单例
const CONSOLE_CACHE = Object.create(null);
module.exports = (linePrefix, opts) => {
    if (!CONSOLE_CACHE[linePrefix]) {
        CONSOLE_CACHE[linePrefix] = new TConsole(linePrefix, opts);
    }
    return CONSOLE_CACHE[linePrefix];
}
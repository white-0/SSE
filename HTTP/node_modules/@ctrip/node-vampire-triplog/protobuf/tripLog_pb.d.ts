// package: 
// file: clog.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
type _wrappers_ = { [x: string]: jspb.Map<string, string> }
type FieldValue = string | number | boolean | Uint8Array | FieldValueArray | undefined;
interface FieldValueArray extends Array<FieldValue> {}
export class LogEvent extends jspb.Message {
    static setField(message: LogEvent,fieldNumber: number,
        value: FieldValue): void
    propertiesMap?:_wrappers_;
    getId(): number;
    setId(value: number): LogEvent;
    getLoglevel(): LogLevel;
    setLoglevel(value: LogLevel): LogEvent;
    getTimestamp(): number;
    setTimestamp(value: number): LogEvent;
    getLoggername(): string;
    setLoggername(value: string): LogEvent;
    getThreadid(): number;
    setThreadid(value: number): LogEvent;
    getThreadname(): string;
    setThreadname(value: string): LogEvent;

    getPropertiesMap(): jspb.Map<string, string>;
    clearPropertiesMap(): void;
    getMessage(): Uint8Array | string;
    getMessage_asU8(): Uint8Array;
    getMessage_asB64(): string;
    setMessage(value: Uint8Array | string): LogEvent;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): LogEvent.AsObject;
    static toObject(includeInstance: boolean, msg: LogEvent): LogEvent.AsObject;
    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };
    static serializeBinaryToWriter(message: LogEvent, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): LogEvent;
    static deserializeBinaryFromReader(message: LogEvent, reader: jspb.BinaryReader): LogEvent;
}

export namespace LogEvent {
    export type AsObject = {
        id: number,
        loglevel: LogLevel,
        timestamp: number,
        loggername: string,
        threadid: number,
        threadname: string,

        propertiesMap: Array<[string, string]>,
        message: Uint8Array | string,
    }
}
type _wrappersLogBatch_ = { [x: string]: jspb.Map<string, string> }

export class LogBatch extends jspb.Message {
    wrappers_: _wrappersLogBatch_;
    getDomain(): string;
    setDomain(value: string): LogBatch;

    getPropertiesMap(): jspb.Map<string, string>;
    clearPropertiesMap(): void;
    getSize(): number;
    setSize(value: number): LogBatch;
    clearLogsList(): void;
    getLogsList(): Array<LogEvent>;
    setLogsList(value: Array<LogEvent>): LogBatch;
    addLogs(value?: LogEvent, index?: number): LogEvent;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): LogBatch.AsObject;
    static toObject(includeInstance: boolean, msg: LogBatch): LogBatch.AsObject;
    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };
    static serializeBinaryToWriter(message: LogBatch, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): LogBatch;
    static deserializeBinaryFromReader(message: LogBatch, reader: jspb.BinaryReader): LogBatch;
}

export namespace LogBatch {
    export type AsObject = {
        domain: string,

        propertiesMap: Array<[string, string]>,
        size: number,
        logsList: Array<LogEvent.AsObject>,
    }
}

export class SendResult extends jspb.Message {
    getResult(): SendResult.ResultCode;
    setResult(value: SendResult.ResultCode): SendResult;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SendResult.AsObject;
    static toObject(includeInstance: boolean, msg: SendResult): SendResult.AsObject;
    static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
    static extensionsBinary: { [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message> };
    static serializeBinaryToWriter(message: SendResult, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SendResult;
    static deserializeBinaryFromReader(message: SendResult, reader: jspb.BinaryReader): SendResult;
}

export namespace SendResult {
    export type AsObject = {
        result: SendResult.ResultCode,
    }

    export enum ResultCode {
        SUCCESS = 0,
        SHOULD_RETRY = 1,
        FAILED = 2,
    }

}

export enum LogLevel {
    ERROR = 0,
    WARN = 1,
    INFO = 2,
    DEBUG = 3,
    TRACE = 4,
}

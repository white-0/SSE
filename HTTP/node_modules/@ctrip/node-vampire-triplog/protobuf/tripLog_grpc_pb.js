// GENERATED CODE -- DO NOT EDIT!

'use strict';
var grpc = require('@grpc/grpc-js');
var clog_pb = require('./tripLog_pb.js');

function serialize_LogBatch(arg) {
  if (!(arg instanceof clog_pb.LogBatch)) {
    throw new Error('Expected argument of type LogBatch');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_LogBatch(buffer_arg) {
  return clog_pb.LogBatch.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_SendResult(arg) {
  if (!(arg instanceof clog_pb.SendResult)) {
    throw new Error('Expected argument of type SendResult');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_SendResult(buffer_arg) {
  return clog_pb.SendResult.deserializeBinary(new Uint8Array(buffer_arg));
}


function wrap(fn) {
  return function (...args) {
    try {
      return fn(...args);
    } catch (e) {
      return "";
    }
  }
}

var LogSenderService = exports.LogSenderService = {
  send: {
    path: '/LogSender/send',
    requestStream: false,
    responseStream: false,
    requestType: clog_pb.LogBatch,
    responseType: clog_pb.SendResult,
    requestSerialize: wrap(serialize_LogBatch),
    requestDeserialize: wrap(deserialize_LogBatch),
    responseSerialize: wrap(serialize_SendResult),
    responseDeserialize: wrap(deserialize_SendResult),
  },
};

exports.LogSenderClient = grpc.makeGenericClientConstructor(LogSenderService);
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tripBootstrapServers = void 0;
const appConfig_1 = __importDefault(require("./appConfig"));
const node_vampire_appconfig_1 = __importDefault(require("@ctrip/node-vampire-appconfig"));
const node_vampire_http_1 = __importDefault(require("@ctrip/node-vampire-http"));
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const node_vampire_foundation_framework_1 = __importDefault(require("@ctrip/node-vampire-foundation-framework"));
class TripBootstrapServers {
    constructor() {
        this.bootstrapServerList = [];
        this.bootstrapServerPort = null;
        this.getServerPromise = null;
    }
    fetchBootstrapServers() {
        return appConfig_1.default().then((reqUrl) => {
            const reqBody = {
                'properties': {
                    'idc': (node_vampire_foundation_framework_1.default.getServerPropertiesSync('idc') || "NTGXH"),
                    'host.name': node_vampire_util_1.default.getHostName(),
                    'env': (node_vampire_foundation_framework_1.default.getServerPropertiesSync('env') || node_vampire_appconfig_1.default['env']),
                    'app.id': node_vampire_foundation_framework_1.default.getAppID(),
                    'host.address': node_vampire_foundation_framework_1.default.getHostIP(),
                    'az': node_vampire_foundation_framework_1.default.getServerPropertiesSync('az'),
                    'region': node_vampire_foundation_framework_1.default.getServerPropertiesSync('region')
                }
            };
            return node_vampire_http_1.default(reqUrl, { 'contentType': 'json' }, JSON.stringify(reqBody)).then((result) => {
                if (result && result.bootstrapServers && result.bootstrapServers.length > 0) {
                    this.bootstrapServerList = result.bootstrapServers;
                    this.bootstrapServerPort = result.port || 9300;
                }
                return;
            }).catch((err) => {
                return Promise.reject(`[@ctrip/node-vampire-triplog] fetchBootstrapServers error,${err}`);
            });
        }).catch((err) => {
            return Promise.reject(`[@ctrip/node-vampire-triplog] fetchBootstrapServers error,${err}`);
        });
    }
}
exports.tripBootstrapServers = new TripBootstrapServers();

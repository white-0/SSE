"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_vampire_foundation_framework_1 = __importDefault(require("@ctrip/node-vampire-foundation-framework"));
const bootstrap_server = {
    'fws': 'http://triplog.bootstrap.fx.fws.qa.nt.ctripcorp.com/api/bootstrap',
    'lpt': 'http://triplog.bootstrap.fx.fws.qa.nt.ctripcorp.com/api/bootstrap',
    'uat': 'http://triplog.bootstrap.fx.uat.qa.nt.ctripcorp.com/api/bootstrap',
    'pro': 'http://triplog.bootstrap.fx.ctripcorp.com/api/bootstrap',
    'pci': 'http://triplog.pci.tooling.bootstrap.fx.ctripcorp.com/api/bootstrap'
};
function getTripBootstrapServers() {
    return Promise.all([
        node_vampire_foundation_framework_1.default.getEnv(),
        node_vampire_foundation_framework_1.default.getConfig("*"),
    ]).then((args) => {
        let env = args[0];
        if (node_vampire_foundation_framework_1.default.configNeedToBeUpdated) {
            let url = args[1]["triplog.bootstrap"];
            if (url) {
                if (!url.startsWith('http')) {
                    url = 'http://' + url;
                }
                if (!url.endsWith('/')) {
                    url += '/';
                }
                return url;
            }
        }
        let url = node_vampire_foundation_framework_1.default.getServerPropertiesSync('pci') === 'true' ? bootstrap_server['pci'] : bootstrap_server[env];
        return url;
    }).catch(e => {
        console.log('[ @ctrip/node-vampire-triplog ] Invalid Bootstrap Host,', e);
        return Promise.reject(e);
    });
}
exports.default = getTripBootstrapServers;

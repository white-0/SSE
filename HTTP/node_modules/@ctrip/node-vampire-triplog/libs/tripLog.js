"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tripLog = void 0;
const events_1 = require("events");
const node_vampire_appconfig_1 = __importDefault(require("@ctrip/node-vampire-appconfig"));
const tripLog_pb_1 = require("../protobuf/tripLog_pb");
const commonConstants_1 = require("./utils/commonConstants");
const messageQueue_1 = require("./utils/messageQueue");
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const node_vampire_cache_1 = __importDefault(require("@ctrip/node-vampire-cache"));
const node_vampire_locker_1 = __importDefault(require("@ctrip/node-vampire-locker"));
const node_vampire_cat_1 = __importDefault(require("@ctrip/node-vampire-cat"));
const Cache = node_vampire_cache_1.default.Cache;
const cacheName = 'node-vampire-triplog-' + node_vampire_appconfig_1.default['AppID'];
const lockerName = 'node-vampire-triplog-' + node_vampire_appconfig_1.default['AppID'];
let store = new Cache(cacheName, 512 * 1024);
let locker = new node_vampire_locker_1.default(lockerName);
let maxMsgSeq = 2147483647;
locker.lockSync();
if (!store[getHourString() + '-hour']) {
    store[getHourString() + '-hour'] = Math.floor(maxMsgSeq / 60) * (new Date()).getMinutes();
}
locker.unlockSync();
function getHourString() {
    return Math.floor((+new Date()) / 3600000).toString();
}
class TripLog extends events_1.EventEmitter {
    constructor() {
        super();
    }
    /**
     * @param 全链路上下文传递;会跨链路传递到下游，影响后续整个链路的调用，使用前请考虑清楚，通常只用于 traceId , orderId 字段，慎用！！！
     * @param {String} name
     * @param {any} value
     */
    setTraceContext(name, value) {
        let currentSpan = node_vampire_cat_1.default.getActiveSpan();
        if (currentSpan) {
            const traceContext = currentSpan.getTraceContext && currentSpan.getTraceContext(true);
            if (!Object.keys(traceContext.getContext()).includes('triplog-' + name)) {
                traceContext.add('triplog-' + name, value);
            }
            else {
                console.log(`[@ctrip/node-vampire-triplog] set traceContext failed,because triplog-${name} already exists`);
            }
        }
    }
    /**
     * 新增一条clog日志
     * @param {Object} data 一条clogging数据
     * @param {String} data.type 类型
     * @param {String} data.title 标题
     * @param {any} data.message 消息内容
     * @param {Object} data.addInfo 额外信息
     * @param {boolean=} data.scenario 是否发送ck
     */
    custom(data) {
        data = node_vampire_util_1.default.copy(data);
        if (commonConstants_1.TRIPLOGGING_MESSAGE_TYPES.indexOf(data.type) == -1) {
            data.type = 'info';
        }
        if ((typeof data.addInfo) != 'object') {
            data.addInfo = {};
        }
        messageQueue_1.messageQueue.addToQueue(this.logEventConverter(data));
    }
    logEventConverter(data) {
        let logEvent = new tripLog_pb_1.LogEvent();
        const newData = this.rebuildData(data, logEvent);
        logEvent.setId(this.cloggingId());
        logEvent.setLoglevel(tripLog_pb_1.LogLevel[newData.type.toLocaleUpperCase()]);
        logEvent.setLoggername(data.name || data.source || 'Nodejs');
        logEvent.setThreadid(process.pid);
        logEvent.setThreadname('Nodejs');
        logEvent.setTimestamp(new Date().getTime());
        logEvent.setMessage(Buffer.from(newData.message, 'utf-8'));
        return logEvent;
    }
    /**
    * 整理数据
    * @param {Object} data 一条clogging数据
    * @param {String} data.type 类型
    * @param {String} data.title 标题
    * @param {Array} data.message 消息内容
    * @param {Object} data.addInfo 额外信息
    * @param {boolean} data.scenario 是否发送ck
    * @return {Object} newData
    */
    rebuildData(data, logEvent) {
        data.title = this.sliceString(data.title, commonConstants_1.LIMIT_RANGE.DEFAULT_MAX_TAG_TITLE_LENGTH);
        if (data.type.toLocaleUpperCase() === 'ERROR') {
            if (data.message) {
                data.addInfo[commonConstants_1.constants.KEY_EXCEPTION] = 'Error';
                data.message = this.extendException(data.message);
                //记录cat日志
                node_vampire_cat_1.default.error('[triplog-Error]:' + (data.title || data.name), data.message);
            }
        }
        // 避免用户指定了__scenario 
        if (data.scenario && data.addInfo[commonConstants_1.constants.KEY_LOG_SCENARIO]) {
            throw new Error("[@ctirp/node-vampire-cat] don't add tag `__scenario`,when specifying scenario");
        }
        if (data.scenario && typeof data.scenario === 'string') {
            data.addInfo[commonConstants_1.constants.KEY_LOG_SCENARIO] = data.scenario;
        }
        if (data.scenario && typeof data.scenario === 'boolean') {
            data.addInfo[commonConstants_1.constants.KEY_LOG_SCENARIO] = data.title;
        }
        try {
            this.catLink(data.addInfo);
        }
        catch (err) {
            node_vampire_cat_1.default.event('triplog.catLink.error', err);
        }
        data.message = this.sliceString(data.message, commonConstants_1.LIMIT_RANGE.DEFAULT_MAX_MESSAGE_LENGTH) || '';
        let attributes = Object.assign({}, data.addInfo);
        for (let key in attributes) {
            if (node_vampire_util_1.default.hasOwn(attributes, key)) {
                let tempKey = this.sliceString(key, commonConstants_1.LIMIT_RANGE.DEFAULT_MAX_TAG_KEY_LENGTH);
                logEvent.getPropertiesMap().set(tempKey, this.sliceString(attributes[key], commonConstants_1.LIMIT_RANGE.DEFAULT_MAX_TAG_VALUE_LENGTH));
            }
        }
        if (data.title) {
            logEvent.getPropertiesMap().set('title', data.title);
        }
        return data;
    }
    /**
     *
     * @param value
     * @param maxLen
     * @returns
     */
    extendException(err) {
        let message = null;
        switch (node_vampire_util_1.default.type(err)) {
            case "error":
                message = (err.message || 'Error') + '\r\n----\r\n' + err.stack;
                break;
            case "string":
            case "number":
                message = "" + err;
                break;
            case "array":
            case "object":
                message = JSON.stringify(err);
                break;
            case "date":
                message = err.toLocaleString();
                break;
            default:
                message = "" + err;
                break;
        }
        return message;
    }
    /** 长度限制功能
    **  防止传入进来的数据格式不是string或者空，做一下转换。后续还要做长度校验发送
    * @param {String|Object|Error} value 原始值
    * @param {Number} maxLen 最大长度
    * @return {String} newValue 截取长度之后的新值
    */
    sliceString(value, maxLen) {
        if (typeof value == 'undefined') {
            return 'N/A';
        }
        switch (node_vampire_util_1.default.type(value)) {
            case 'string':
                break;
            case 'object':
                value = JSON.stringify(value);
                break;
            default:
                value = '' + value;
                break;
        }
        return value.slice(0, maxLen);
    }
    /**
   * 获取Id
   * @return {Object} id
   */
    cloggingId() {
        let msgSeq = 0;
        let hourStr = getHourString();
        msgSeq = node_vampire_cache_1.default.increase(store, hourStr + '-hour', 1) % maxMsgSeq;
        return msgSeq;
    }
    /**
     * clog 日志在和cat日志串联,一些关键性tag
     */
    catLink(tags) {
        let markNewSpan = false;
        let currentSpan = null;
        if (node_vampire_cat_1.default.getActiveSpan()) {
            currentSpan = node_vampire_cat_1.default.getActiveSpan();
        }
        if (currentSpan) {
            !currentSpan.__properties && (currentSpan.__properties = {});
            if (node_vampire_cat_1.default.setPropertiesToRootActiveSpan) {
                node_vampire_cat_1.default.setPropertiesToRootActiveSpan('Cat.LinkType', 'marker');
            }
            else { //兼容老版本1.0.108及以下
                Object.assign((currentSpan.__root || currentSpan).__properties, { 'Cat.LinkType': 'marker' });
            }
            const messgeId = (currentSpan.__root && currentSpan.__root.__outerIds) ? currentSpan.__root.__outerIds['x-cat-id'] : (currentSpan && currentSpan.__messageId); //父节点的messageId;
            const traceContext = currentSpan.getTraceContext && currentSpan.getTraceContext(true).getContext();
            let markerId = 0;
            const _traceContext = currentSpan.getTraceContext && currentSpan.getTraceContext(true);
            if (_traceContext && _traceContext.increaseMarkerId) {
                _traceContext && _traceContext.increaseMarkerId();
                markerId = _traceContext.markerId || 0;
            }
            else {
                if (!currentSpan.__root.markerId) {
                    currentSpan.__root.markerId = 0;
                }
                markerId = currentSpan.__root.markerId++;
            }
            for (let item in traceContext) {
                if (item.startsWith('triplog-') && Object.prototype.hasOwnProperty.call(traceContext, item)) {
                    tags[item.substr(8)] = traceContext[item];
                }
            }
            if (tags[commonConstants_1.constants.KEY_LOG_SCENARIO]) {
                const scenario = tags[commonConstants_1.constants.KEY_LOG_SCENARIO];
                if (scenario != commonConstants_1.constants.LABEL_DEFAULT) {
                    this.setScenario(scenario, currentSpan);
                    node_vampire_cat_1.default.event('__Clickhouse__', scenario, String(markerId));
                }
                else {
                    node_vampire_cat_1.default.event('__CLOG__', '__DEFAULT__', String(markerId));
                }
            }
            else {
                node_vampire_cat_1.default.event('__CLOG__', '__DEFAULT__', String(markerId));
            }
            tags[commonConstants_1.constants.KEY_CAT_MESSAGE_ID] = messgeId;
            tags[commonConstants_1.constants.KEY_CAT_MARKER_ID] = String(markerId);
            markNewSpan && currentSpan.end();
        }
    }
    setScenario(scenario, currentSpan) {
        if (!currentSpan)
            return;
        if (!currentSpan.__properties) {
            currentSpan.__properties = {};
        }
        const m_scenarios = currentSpan.__properties[commonConstants_1.constants.SCENARIOS_KEYS];
        let ret = scenario;
        if (m_scenarios) {
            ret = m_scenarios + '|' + scenario;
        }
        currentSpan.__properties[commonConstants_1.constants.SCENARIOS_KEYS] = ret;
    }
}
exports.tripLog = new TripLog();

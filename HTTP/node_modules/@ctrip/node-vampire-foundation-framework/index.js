/**
 * 参考java foundation-framework(http://conf.ctripcorp.com/pages/viewpage.action?pageId=74102518)
 * server.properties内容样例(已经转换为json格式)
 * {
	'idc': 'FRA-AWS',
	'env': 'PRO',
	'subEnv': '',
	'region': 'FRA-AWS',
	'tooling': false,
	'pci': false,
	'corp': 'CTRIP',
	'host_type': 'docker',
	'bigdata': false
}
 * region.properties内容样例
 metadata_domain=metadata.fraaws.tripws.com
 */
const
    fs = require('fs'),
    os = require('os'),
    ipaddr = require('./ipaddr'),
    appConfig = require('@ctrip/node-vampire-appconfig'),
    sendHttpRequest = require('@ctrip/node-vampire-http');
const console = require('@ctrip/node-vampire-console')('vampire:foundationframework');


function getEnvAndSubEnv() {
    let env = process.env.ENV || process.env.PAAS_ENV || process.env.env || null,
        subenv = process.env.subenv || process.env.SUBENV || null;
    if (env) {
        switch (env.toUpperCase()) {
            case 'FWS':
                env = 'FWS';
                subenv = null;
                break;
            case 'LPT':
                env = 'LPT';
                subenv = null;
                break;
            case 'FAT':
                env = 'FAT';
                break;
            case 'PROD':
                env = 'PRO';
                subenv = null;
                break;
            default:
                subenv = null;
        }
    }
    subenv && (subenv = subenv.toLowerCase());
    if (env === '[object Object]') { // 兼容本地pm2启动的情况下process.env.env===‘[object]’
        env = null;
    }
    return {
        env,
        subenv
    }
}

/** 同步获取serverProperties中所有的配置项(从环境变量里获取)
 * @param {String} key 配置项名称。如果key为*，则返回所有的配置项内容
 * @returns {String} value 配置项内容 || undefined
 */
function getServerPropertiesSync(key) {
    const {
        subenv,
        env
    } = getEnvAndSubEnv();
    // if (os.platform() != 'linux') {
    const cdos_region = process.env.CDOS_REGION || null,
        cdos_az = process.env.CDOS_AZ || null;
    let _az = null;
    if (cdos_region && cdos_az) { // az整改之后将不会执行到这里，暂不需要处理
        _az = cdos_region + '-' + cdos_az;
    }
    const srever_properties = {
        idc: process.env.CDOS_IDC || process.env.region || process.env.CDOS_REGION || null, //2022/12/7 兼容云函数
        region: process.env.region || process.env.CDOS_REGION || null, //2022/12/7 兼容云函数
        subenv,
        az: process.env.CDOS_AZ || _az,
        netsd: process.env.CDOS_SECURITY_DOMAIN || null,
        netfunc: process.env.CDOS_NETWORK_FUNCTION || null,
        tenant: process.env.TENANT || null,
        cloudprovider: process.env.CLOUDPROVIDER || null,
        env,
        tooling: process.env.tooling || 'false',
        pci: process.env.pci || 'false',
        corp: process.env.corp || 'CTRIP',
        host_type: 'docker'
    }
    return key ? srever_properties[key] : srever_properties;
    //}
}


let
    SERVER_PROPERTIES_PATH = '/opt/settings/server.properties',
    REGION_PROPERTIES_PATH = '/opt/settings/region.properties',
    DEFAULT_SERVER_PROPERTIES = {
        'env': getServerPropertiesSync('env') || appConfig['Env'],
        'subenv': getServerPropertiesSync('subenv') || '',
        'idc': getServerPropertiesSync('idc') || '',
        'region': getServerPropertiesSync('region') || '',
        'tooling': getServerPropertiesSync('tooling') === 'true',
        'pci': getServerPropertiesSync('pci') === 'true',
        'corp': getServerPropertiesSync('corp') || 'CTRIP',
        'host_type': 'docker',
        'bigdata': false
    }; // 设置默认值


/**为了兼容开发人员本地环境，如果发现不是linux系统（即不是docker）的话，则读取项目目录下的server.properties和region.properties
 * 如果能将本地docker话，这段代码可以删除
 */
if (os.platform() != 'linux') {
    const path = require('path');
    SERVER_PROPERTIES_PATH = path.join(require.main ? path.dirname(require.main.filename) : process.cwd(), 'server.properties');
    REGION_PROPERTIES_PATH = path.join(require.main ? path.dirname(require.main.filename) : process.cwd(), 'region.properties');
}
/******** */

const convertPropertiesToJson = (str) => {
    /* 将properties文件内容转换为json格式 **/
    let serverConfig = {};
    if (str) {
        str.toString().replace(/^(.*?)=(.*?)$/gm, function (_, key, value) {
            if (key.toLowerCase() === 'subenv') {
                // value = value.replace(/[^(A-Za-z0-9)]/g, ''); fat-1不需要转换成fat1
                key = key.toLowerCase();
            }
            if (value == 'true') {
                value = true;
            } else if (value == 'false') {
                value = false;
            }
            serverConfig[key] = value;
        });
    }
    return serverConfig;
};

const readFile = (path) => new Promise((resolve, reject) => {
    fs.readFile(path, {
        'encoding': 'utf8'
    }, (e, data) => e ? reject(e) : resolve(convertPropertiesToJson(data)));
});

const ENV_MAP = {
    'dev': 'fws',
    'fat': 'fws',
    'fws': 'fws',
    'uat_nt': 'uat',
    'uat': 'uat',
    'lpt': 'lpt',
    'pro': 'pro',
    'prod': 'pro',
    'prd': 'pro',
};
class foundationFramework {
    constructor() {
        this.serverProperties = DEFAULT_SERVER_PROPERTIES; // server.properties 中的内容
        this.regionProperties = {}; // region.properties 中的内容
        if (process.env.METADATA_DOMAIN) {
            this.regionProperties = {
                metadata_domain: process.env.METADATA_DOMAIN
            }
        }
        this.metaDataConfig = {}; // 从 metadata_domain 远端获取的内容

        /*If configs need to be updated.
         * Default is false, unless renew configs are successful fetched from metadata_domain
         */
        this.configNeedToBeUpdated = false;
        this.isFileExist = false;
        this.init();
    }

    init() {
        this.initPromise = Promise.all([
            readFile(SERVER_PROPERTIES_PATH).then((properties) => {
                this.serverProperties = properties;
                this.isFileExist = true;
            }, () => {
                console.log('Use default value for server.properties');
            }),
            readFile(REGION_PROPERTIES_PATH).then((properties) => {
                this.regionProperties = properties;
            }, () => {
                console.log('Use default value for region.properties');
            })
        ]).then(() => {
            const {
                metadata_domain
            } = this.regionProperties;

            if (!metadata_domain) {
                return;
            }

            const body = JSON.stringify(this.serverProperties);

            return sendHttpRequest(`http://${metadata_domain}/api/ctrip/metadata.json`, {
                    body
                })
                .then((result) => {
                    try {
                        const {
                            status,
                            data
                        } = JSON.parse(result) || {};

                        if (status !== 0 || !data) { // 接口返回的状态不正确 或者 没数据
                            throw new Error('metadata server return failed.');
                        }

                        this.configNeedToBeUpdated = true;
                        this.metaDataConfig = data;
                    } catch (e) { // 解析返回结果时出错
                        console.error('Parse metadata response failed: ', e);
                        console.error('The raw metadata response is: ', result);
                        return Promise.reject(e);
                    }
                }, (e) => { // 请求 metadata 出错
                    console.error(`Request metadata error: `, e);
                    return Promise.reject(e);
                })
        });
    }

    /** 获取AppID
     *  从app.config.js中获取
     * @returns {String} value app.config.js中的AppID值
     */
    getAppID() {
        return appConfig['AppID'];
    }

    /** 获取Env(与java保持一致) 为了保持一致，统一转为小写
     * 1. 读取server.properties中local配置项
     * 2. 如果local=true，则从app.config.js中读取
     * 3. 否则，从server.properties中读取env的配置项*/
    getEnv() {
        return this.getServerProperties('env').then((env) => {
            env = env && env.toLowerCase();
            return ENV_MAP[env] || env;
        });
    }

    getSubEnv() {
        return this.getServerProperties('subenv');
    }

    /** 获取IDC **/
    getIDC() {
        return this.getServerProperties('idc');
    }

    /**获取zone。目前暂时是获取idc，后面server.properties加上了zone的属性再改 */
    getZone() {
        return this.getServerProperties('idc');
    }

    /**
     * 获取Host IP
     */
    getHostIP() {
        const ip = process.env['CDOS_POD_IP'] || process.env['ip'];

        // docker 容器内部有相关的环境变量, 保存当前容器的IP地址
        if (ip) {
            return ip;
        }

        // 如果没有上面的环境变量, 则自动获取
        const infs = [].concat.apply([], Object.values(os.networkInterfaces()))
            .filter((inf) => !(inf.internal || inf.family !== 'IPv4')) // 过滤掉内部 和 非IPv4 的地址
            .map(({
                address
            }) => address); // 只取 IP 地址

        if (infs.length === 0) {
            return '127.0.0.1';
        }

        const internal = infs.find((address) => /^(10|172|192\.168)\./.test(address)); // 优先查找符合正则要求的IP地址
        return internal ? internal : infs[0];
    }

    /** 获取serverProperties中所有的配置项
     * @param {String} key 配置项名称。如果key为*，则返回所有的配置项内容
     * @returns {String} value 配置项内容 || undefined
     */
    getServerProperties(key) {
        return this.initPromise.then(() => {
            let _serverProperties = null;
            /**
             * 为什么要这么判断：
             * 为了向下兼容，优先级按照一下顺序:server.properties > app.config.js > process.env(process.env是为了兼容云函数没有server.properties文件)
             */
            if (this.isFileExist) {
                _serverProperties = this.serverProperties;
            } else {
                const _envProperties = this.getServerPropertiesSync();
                _serverProperties = Object.keys(_envProperties)
                    .filter((key) => _envProperties[key] !== null && _envProperties[key] !== undefined)
                    .reduce((acc, key) => ({
                        ...acc,
                        [key]: _envProperties[key] === 'true' ? true : (_envProperties[key] === 'false' ? false : _envProperties[key])
                    }), {});
                _serverProperties['env'] = DEFAULT_SERVER_PROPERTIES['env'];
                _serverProperties = Object.assign({}, DEFAULT_SERVER_PROPERTIES, _serverProperties);
            }
            return key == '*' ? _serverProperties : _serverProperties[key];
        }).catch((e) => {
            console.error(`Get serverProperties failed: `, e);
            return Promise.reject(e);
        });
    }
    /** 同步获取serverProperties中所有的配置项(从环境变量里获取)
     * @param {String} key 配置项名称。如果key为*，则返回所有的配置项内容
     * @returns {String} value 配置项内容 || undefined
     */
    getServerPropertiesSync(key) {
        return getServerPropertiesSync(key);
    }


    /** 获取海外FRA-AWS对应的中间件的配置项
     * @param {String} key 配置项名称。如果key为*，则返回所有的配置项内容
     * @returns {String} value 配置项内容 || undefined
     */
    getConfig(key) {
        return this.initPromise.then(() => key == '*' ? Object.assign({}, this.metaDataConfig) : this.metaDataConfig[key]);
    }

    /** 获取Client IP（//获取客户端 IP 地址，会自动识别 X-Forword-For 和 X-OriginIP）
     * 需要参照文档 http://conf.ctripcorp.com/pages/viewpage.action?pageId=177052629
     * 要对IPv4和IPv6做兼容性处理
     * java源码 http://git.dev.sh.ctripcorp.com/framework/Baiji/blob/master/baiji-rpc-server/src/main/java/com/ctriposs/baiji/rpc/server/HttpRequestWrapperBase.java#L170
     */
    getClientIp(req) {
        let reqHeaders = req['headers'];
        let h_x_forwarded_for = reqHeaders['x-forwarded-for'];
        let h_x_real_ip = reqHeaders['x-real-ip'];
        let h_x_externalclientip = reqHeaders['x-ctx-externalclientip'];

        if (h_x_forwarded_for) {
            let ipsArr = h_x_forwarded_for.split(',');
            return ipsArr[0];
        } else if (h_x_real_ip) {
            return h_x_real_ip;
        } else if (h_x_externalclientip) {
            return h_x_externalclientip;
        } else {
            return req.socket && req.socket.remoteAddress || '';
        }
    }


    /**判断是否是合法的IP（IPv4 or IPv6 */
    isIP(value) {
        return ipaddr.isValid(value);
    }

    /**获取IPv4 */
    isIPv4(value) {
        return ipaddr.IPv4.isValid(value);
    }

    /**获取IPv6
     * 读取方获取的IPv6地址，不能假设是全地址（哪怕事前规约）
     */
    isIPv6(value) {
        return ipaddr.IPv6.isValid(value);
    }

    /**将ipv6地址转成简单的地址
     * @param {String} full IPv6. e.g. {'fe80:0000:0000:0000:0cba:f8bc:3f58:71a6'}
     * @return {String} simple IPv6 e.g. {'fe80:0:0:0:cba:f8bc:3f58:71a6'}
     */
    toIPv6SimpleAddress(value) {
        let addr = ipaddr.parse(value);
        return addr.toNormalizedString();
    }

    /**将ipv6地址转成全地址
     * @param {String} simple IPv6. e.g. {'fe80:0:0:0:cba:f8bc:3f58:71a6'}
     * @return {String} A full IPv6 e.g. {'fe80:0000:0000:0000:0cba:f8bc:3f58:71a6'}
     */
    toIPv6FullAddress(value) {
        let addr = ipaddr.parse(value);
        return addr.toFixedLengthString();
    }
}

module.exports = new foundationFramework();
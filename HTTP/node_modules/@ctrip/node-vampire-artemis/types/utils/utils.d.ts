export declare const STRATEGY = "close-by-visit";
export declare const DEFAULT_ROUTE_RULE = "default-route-rule";
export declare enum ArtemisOperationType {
    client = "client",
    server = "server"
}
export declare enum CallerType {
    SOA = "soa",
    QSCHEDULE = "qschedule"
}
export declare enum WSType {
    NEW = "new",
    DELETE = "delete",
    CHANGE = "change",
    RELOAD = "reload"
}
export interface Instance {
    checkPoint?: number;
    config?: object;
    groupId?: string;
    healthCheckResult?: any;
    healthCheckUrl: string;
    instanceId?: string;
    ip?: string;
    machineName?: string;
    metadata: {
        StartUpTime?: string;
        appid?: string;
        available?: string;
        "cms-group-id"?: string;
        "cms-group-id-source"?: string;
        "framework-version"?: string;
        "code-generator-version"?: string;
        subenv?: string;
    };
    port: number;
    protocol?: string;
    regionId?: string;
    registryState?: any;
    serviceId?: string;
    status?: string;
    statusCode?: number;
    ttl?: number;
    url: string;
    zoneId: string;
}
export interface metadata {
    available?: string;
    ucs_strategy?: string;
    appids?: string;
    code?: string;
    "webapi_enabled"?: string;
    key?: string;
}
export interface SOAServerMeta {
    services: Array<{
        instances: Array<Instance | null>;
        logicInstances: Array<Instance | null>;
        discoveryConfig: DiscoveryConfig;
        routeRules: Array<RouteRule | null>;
        serviceId: string;
        metadata?: metadata;
    }>;
}
export interface DiscoveryConfig {
    checkPoint: number;
    discoveryData: {
        appid: string;
        protocol?: string;
        "support-constraint": boolean;
        subenv?: string;
    };
    regionId: string;
    serviceId: string;
    zoneId: string;
}
interface routeRuleGroups {
    groupKey: string;
    instanceIds: Array<any>;
    instances: Array<any>;
    ips: Array<any>;
    metadata?: any;
    weight: number;
}
export interface RouteRule {
    config?: any;
    constraints?: any;
    groups: Array<routeRuleGroups>;
    routeId: string;
    strategy: string;
}
export interface RouteServerList {
    weight: number;
    urls: Array<string>;
    zone?: string;
    strategy?: string;
}
export interface AvailableServerList {
    serverList: Array<RouteServerList>;
    ucsServerList: Array<RouteServerList>;
}
export interface RouteContext {
    [x: string]: AvailableServerList;
}
export interface FirstPrioritySubEnv {
    subEnv: string;
    subEnvPriority: number;
    instance: Array<any>;
}
export declare function _getSubEnvPriority(subEnv: any): number;
export declare function getFirstPrioritySubEnv(subEnvs: string, instance: Instance | null, _firstPrioritySubEnv: FirstPrioritySubEnv | null): FirstPrioritySubEnv;
export declare function getRandomFromWeightArray(arr: any): any;
export declare function checkUrl(url: string): string | boolean;
export {};

/// <reference types="node" />
import EventEmitter from 'events';
import { CallerType, DiscoveryConfig } from '../utils/utils';
export declare class ClientWebSocket extends EventEmitter {
    private clientType;
    private init;
    private isGetServerListByLookUp;
    private getServerListByLookUpInterval;
    private discoveryConfigs;
    private ws;
    constructor(clientType: CallerType);
    static getInstance(clientType: any): any;
    private _getWetSocketUrl;
    private _init;
    /**
     * 监听路由配置的变更，变更配置的下发是单个服务下发的
     * @param data {}
     */
    private onChange;
    /**
     * 当ws 异常断开是通过lookup拉取所有soa server配置
     * @param data {}
     */
    private wsClose;
    /**
     * 发送给ws 需要监听的服务
     * @param discoveryConfig {DiscoveryConfig}
     */
    send(discoveryConfig: DiscoveryConfig): void;
}

import { DiscoveryConfig, SOAServerMeta, RouteServerList } from '../utils/utils';
export declare class ParseMetaData {
    private clientType;
    constructor(opt?: {
        serviceId?: string;
        subEnv?: string | null;
        discoveryConfig?: DiscoveryConfig;
        clientType?: string;
    });
    /**
    * 从注册中心拉取soa server metadata
    * @param artemis_lists Array<{ nodeName?: string, url: string, zone: any }>
    * @param discoveryConfig {DiscoveryConfig}
    * @returns Promise<void>
    */
    getSOAServerList(artemis_lists?: Array<string>, discoveryConfig?: DiscoveryConfig): Promise<void>;
    /**
   * 解析 artemis下发的soa server metadata 数据,筛选可访问的服务实例
   * @param ret {SOAServerMeta}
   * @returns void
   */
    parseSOAServerList(ret: SOAServerMeta): void;
    /**
     * 匹配路由规则,选出匹配的路由规则的实例和权重
     * @param serviceId {string}
     * @param operationName {string}
     * @param routeId {string} request routeId
     * @param isUcs {string} open ucs
     * @returns Array<RouteServerList>
     */
    static reRoute(serviceId: string, operationName: string, routeId?: string, isUcs?: boolean): Array<RouteServerList>;
    static getSoaServerMap(): {
        [x: string]: any;
    };
    static getOriginalMap(): {
        [x: string]: any;
    };
    static getAppIDByURL(serviceId: string, url: string): any;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkUrl = exports.getRandomFromWeightArray = exports.getFirstPrioritySubEnv = exports._getSubEnvPriority = exports.WSType = exports.CallerType = exports.ArtemisOperationType = exports.DEFAULT_ROUTE_RULE = exports.STRATEGY = void 0;
exports.STRATEGY = 'close-by-visit';
exports.DEFAULT_ROUTE_RULE = 'default-route-rule';
var ArtemisOperationType;
(function (ArtemisOperationType) {
    ArtemisOperationType["client"] = "client";
    ArtemisOperationType["server"] = "server";
})(ArtemisOperationType = exports.ArtemisOperationType || (exports.ArtemisOperationType = {}));
var CallerType;
(function (CallerType) {
    CallerType["SOA"] = "soa";
    CallerType["QSCHEDULE"] = "qschedule";
})(CallerType = exports.CallerType || (exports.CallerType = {}));
var WSType;
(function (WSType) {
    WSType["NEW"] = "new";
    WSType["DELETE"] = "delete";
    WSType["CHANGE"] = "change";
    WSType["RELOAD"] = "reload";
})(WSType = exports.WSType || (exports.WSType = {}));
//子环境按照优先级排序,同java: http://git.dev.sh.ctripcorp.com/framework/webapi/blob/926674e5688789fef3523dcc52fa324cfe45e202/gatekeeper-ctrip/src/main/java/com/ctriposs/gatekeeper/soa/util/SubEnvUtils.java  
function _getSubEnvPriority(subEnv) {
    const fat_index = 1000000, lpt_index = 2000000, dev_index = 4000000, unknown_index = 3000000;
    if (subEnv) {
        subEnv = subEnv.toLowerCase();
        switch (subEnv) {
            case 'fws':
                return 0;
            case 'fat':
                return fat_index;
            case 'lpt10':
                return lpt_index - 1;
            case 'lpt':
                return lpt_index;
            case 'dev':
                return dev_index;
        }
        let startIndex;
        if (subEnv.startsWith('fat')) {
            startIndex = fat_index;
        }
        else if (subEnv.startsWith('lpt')) {
            startIndex = lpt_index;
        }
        else {
            return unknown_index;
        }
        const index = parseInt(subEnv.substring(3));
        if (isNaN(index)) {
            return unknown_index;
        }
        return index > 0 ? startIndex + index : unknown_index;
    }
    else {
        return unknown_index;
    }
}
exports._getSubEnvPriority = _getSubEnvPriority;
//选出优先级最高的实例
function getFirstPrioritySubEnv(subEnvs, instance, _firstPrioritySubEnv) {
    if (typeof subEnvs !== 'string') {
        return {
            subEnv: '',
            subEnvPriority: 3000000,
            instance: [instance]
        };
    }
    const subEnvArr = subEnvs.split(',');
    subEnvArr.forEach((subEnv) => {
        const subEnvPriority = _getSubEnvPriority(subEnv);
        if (_firstPrioritySubEnv) {
            //排序越小优先级越大,同java
            if (subEnvPriority < _getSubEnvPriority(_firstPrioritySubEnv.subEnv)) {
                _firstPrioritySubEnv = {
                    subEnv: subEnv ? subEnv : '',
                    subEnvPriority: subEnvPriority,
                    instance: [instance]
                };
            }
            else if (subEnvPriority === _getSubEnvPriority(_firstPrioritySubEnv.subEnv)) {
                _firstPrioritySubEnv.instance.push(instance);
            }
        }
        else {
            _firstPrioritySubEnv = {
                subEnv: subEnv ? subEnv : '',
                subEnvPriority: subEnvPriority,
                instance: [instance]
            };
        }
    });
    return _firstPrioritySubEnv;
}
exports.getFirstPrioritySubEnv = getFirstPrioritySubEnv;
//按权重返回url
function getRandomFromWeightArray(arr) {
    let weightSum = 0;
    for (const obj of arr) {
        weightSum += obj.weight;
    }
    const random = Math.floor(Math.random() * weightSum + 1);
    let temp = 0;
    for (const obj of arr) {
        temp += obj.weight;
        if (random <= temp) {
            return obj;
        }
    }
    return null;
}
exports.getRandomFromWeightArray = getRandomFromWeightArray;
function checkUrl(url) {
    if (!url || typeof url !== 'string') {
        return false;
    }
    try {
        url = url.trim();
        if (!url.startsWith('http')) {
            url = 'http://' + url;
        }
        if (!/\/$/.test(url)) {
            url = url + '/';
        }
        new URL(url);
        return url;
    }
    catch (_) {
        return false;
    }
}
exports.checkUrl = checkUrl;

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArtemisServerList = void 0;
const node_vampire_http_1 = __importDefault(require("@ctrip/node-vampire-http"));
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const appConfig_1 = require("../appConfig");
const node_vampire_appconfig_1 = __importDefault(require("@ctrip/node-vampire-appconfig"));
const node_vampire_cat_1 = __importDefault(require("@ctrip/node-vampire-cat"));
const node_vampire_metric_1 = __importDefault(require("@ctrip/node-vampire-metric"));
const utils_1 = require("./utils");
const console = require('@ctrip/node-vampire-console')('vampire:artemis');
const _package = require('../../package.json');
const exceptionMetric = new node_vampire_metric_1.default({
    name: 'Nodejs.Artemis.Client.discoveryOrRegistry.Exception',
    tags: {
        'clientType': '',
        'type': '',
        'AppId': '',
        'version': 'NV-' + _package['version']
    }
});
exceptionMetric.start();
/**
 * 获取Artemis 服务器列表
*/
class ArtemisServerList {
    constructor(operationType, clientType) {
        this.operationType = '';
        this._retryGetNodes = true;
        this.operationType = (operationType === utils_1.ArtemisOperationType.client ? 'Artemis.discovery.Url' : 'Artemis.registry.Url');
        this._retryGetNodes = true;
        this.clientType = clientType;
        this._getNodes();
    }
    //5分钟执行一次
    getNodes() {
        const span = node_vampire_cat_1.default.span('NodeJs.artemis.serverList.get', 'artemis get serverList');
        return span.run((done) => {
            return new Promise((resolve, reject) => {
                return appConfig_1.appConfig.init(this.clientType).then(() => {
                    const url = appConfig_1.appConfig[this.clientType][this.operationType];
                    node_vampire_cat_1.default.event('' + this.clientType + '-' + this.operationType, url);
                    const option = JSON.stringify({
                        'RegionId': 'sha',
                        'ZoneId': appConfig_1.appConfig['Artemis.Zone.Service.Id']
                    });
                    return (0, node_vampire_http_1.default)(url, {
                        headers: {
                            'Content-Type': 'application/json',
                            'x-client-appid': appConfig_1.appConfig['AppID'],
                            'x-client-idc': appConfig_1.appConfig['idc'],
                            'User-Agent': 'nodejs/' + _package['version']
                        }
                    }, option).then((data) => {
                        done();
                        let list;
                        try {
                            list = JSON.parse(data);
                        }
                        catch (e) {
                            node_vampire_cat_1.default.event('artemis.pares.error', data);
                            console.error('Get node parse json error.', data);
                            reject(`[node-vampire-artemis] failed to get nodes:${e}`);
                            return;
                        }
                        if (!list || list && (node_vampire_util_1.default.type(list.nodes) != 'array' || (list.nodes.length < 1))) {
                            reject(`[node-vampire-artemis] failed to get nodes:${list}`);
                            return;
                        }
                        if (this.operationType === 'Artemis.discovery.Url') {
                            if (this.listNodes != JSON.stringify(list.nodes)) { //缓存list.nodes
                                this.listNodes = JSON.stringify(list.nodes);
                                const arr = [];
                                list.nodes && list.nodes.forEach(item => {
                                    item && item.url && arr.push(item.url);
                                });
                                appConfig_1.appConfig[this.clientType]['artemis.Serivce.UrlLists'] = arr;
                                appConfig_1.appConfig[this.clientType]['artemis.Service.Url'] = appConfig_1.appConfig[this.clientType]['artemis.Serivce.UrlLists'][Math.floor(Math.random() * appConfig_1.appConfig[this.clientType]['artemis.Serivce.UrlLists'].length)];
                            }
                        }
                        else {
                            appConfig_1.appConfig[this.clientType]['artemis.registry.Promise.Url'] = list.nodes;
                        }
                        resolve(list);
                        return;
                    }).catch((err) => {
                        node_vampire_cat_1.default.event('Nodejs.ArtemisClient.discoveryOrRegistry.err', err);
                        exceptionMetric.add(1, {
                            'clientType': this.clientType,
                            'type': this.operationType,
                            'AppId': node_vampire_appconfig_1.default['AppID']
                        });
                        done();
                        reject(err);
                    });
                }).catch((err) => {
                    done();
                    reject(err);
                });
            });
        });
    }
    _getNodes() {
        this.artemisPromise = this.getNodes().then(() => {
            this._intervalGetNodes();
            return;
        }).catch((err) => {
            node_vampire_cat_1.default.event('NodeJs.Artemis.GetNodes.Error', err);
        });
    }
    _intervalGetNodes() {
        if (this._retryGetNodes) {
            setInterval(() => {
                this.getNodes().catch((err) => {
                    console.error('Fetch server config error: ', err);
                });
            }, 300000).unref(); //5分钟重连一次
            this._retryGetNodes = false;
        }
    }
}
exports.ArtemisServerList = ArtemisServerList;

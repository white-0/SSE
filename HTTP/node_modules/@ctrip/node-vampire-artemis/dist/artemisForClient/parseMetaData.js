"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParseMetaData = void 0;
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const node_vampire_http_1 = __importDefault(require("@ctrip/node-vampire-http"));
const node_vampire_cat_1 = __importDefault(require("@ctrip/node-vampire-cat"));
const node_vampire_appconfig_1 = __importDefault(require("@ctrip/node-vampire-appconfig"));
const appConfig_1 = require("../appConfig");
const checkRouteRules_1 = require("./checkRouteRules");
const node_vampire_metric_1 = __importDefault(require("@ctrip/node-vampire-metric"));
const utils_1 = require("../utils/utils");
const _package = require('../../package.json');
const console = require('@ctrip/node-vampire-console')('vampire:artemis');
const _errorUrl = '127.0.0.1:404';
const exceptionMetric = new node_vampire_metric_1.default({
    name: 'Nodejs.Artemis.Client.Exception',
    tags: {
        'ServerIp': '',
        'AppId': '',
        'version': 'NV-' + _package['version']
    }
});
exceptionMetric.start();
const SOA_SERVICE_ORIGINAL_MAP = {};
const SOA_SERVICE_MAP = {};
const DISCOVERY_CONFIG_MAP = {};
const NODEJS_ARTEMIS_APP_BY_URL = {};
class ParseMetaData {
    constructor(opt) {
        this.clientType = utils_1.CallerType.SOA;
        if (opt && opt.serviceId) {
            !SOA_SERVICE_MAP[opt.serviceId] && (SOA_SERVICE_MAP[opt.serviceId] = {});
            opt.subEnv && (SOA_SERVICE_MAP[opt.serviceId] = { subEnv: opt.subEnv });
        }
        opt && opt.clientType && (this.clientType = opt.clientType);
        !DISCOVERY_CONFIG_MAP[this.clientType] && (DISCOVERY_CONFIG_MAP[this.clientType] = []);
        opt && opt.discoveryConfig && DISCOVERY_CONFIG_MAP[this.clientType].push(opt.discoveryConfig);
    }
    /**
    * 从注册中心拉取soa server metadata
    * @param artemis_lists Array<{ nodeName?: string, url: string, zone: any }>
    * @param discoveryConfig {DiscoveryConfig}
    * @returns Promise<void>
    */
    getSOAServerList(artemis_lists = [], discoveryConfig) {
        return new Promise((resolve, reject) => {
            const artemis_list = artemis_lists[Math.floor(Math.random() * artemis_lists.length)];
            const val = artemis_lists.indexOf(artemis_list);
            artemis_lists.splice(val, 1);
            if (artemis_list) {
                const _span = node_vampire_cat_1.default.span('Artemis.Client', 'Http.Execute', this.clientType);
                return _span.run((done) => {
                    const url = (0, utils_1.checkUrl)(artemis_list);
                    const artemisLookupUrl = url + 'api/discovery/lookup.json'; //'http://artemis.soa.fx.fraaws.tripws.com/artemis-discovery-service/api/discovery/lookup.json' aws和内网不通，本地测试用域名的方式
                    node_vampire_cat_1.default.event('NodeJs.Artemis.Lookup.Url-' + this.clientType, artemisLookupUrl);
                    const span = node_vampire_cat_1.default.getActiveSpan() || node_vampire_cat_1.default.span(null, "InterSpan", 'lookup');
                    const catMessageId = span.__messageId;
                    const rootMessageId = (span.__root && span.__root.__outerIds) ? span.__root.__outerIds['x-cat-id'] : span.__messageId;
                    const severMessageId = node_vampire_cat_1.default.getMessageId();
                    const body = JSON.stringify({
                        discoveryConfigs: discoveryConfig && [discoveryConfig] || DISCOVERY_CONFIG_MAP[this.clientType],
                        regionId: 'sha',
                        zoneId: appConfig_1.appConfig['Artemis.Zone.Service.Id']
                    });
                    node_vampire_cat_1.default.event('NodeJs.artemis.loopUp.options-' + this.clientType, artemisLookupUrl, JSON.stringify({
                        headers: {
                            'X-CAT-ROOT-ID': rootMessageId,
                            'X-CAT-PARENT-ID': catMessageId,
                            'X-CAT-ID': severMessageId,
                            'x-cat-trace-mode': 'true',
                            'Content-Type': 'application/json',
                            'x-client-appid': appConfig_1.appConfig['AppID'],
                            'app': node_vampire_appconfig_1.default['AppID'],
                            'x-client-idc': appConfig_1.appConfig['idc'],
                            'User-Agent': 'nodejs/' + _package['version']
                        },
                        body
                    }));
                    node_vampire_cat_1.default.event('RemoteCall', 'PigeonRequest', severMessageId); // 很重要，通过这个Event中的message id,可以在Log View查看子的Message Tree
                    return (0, node_vampire_http_1.default)(artemisLookupUrl, {
                        headers: {
                            'X-CAT-ROOT-ID': rootMessageId,
                            'X-CAT-PARENT-ID': catMessageId,
                            'X-CAT-ID': severMessageId,
                            'x-cat-trace-mode': 'true',
                            'Content-Type': 'application/json',
                            'x-client-appid': appConfig_1.appConfig['AppID'],
                            'app': node_vampire_appconfig_1.default['AppID'],
                            'x-client-idc': appConfig_1.appConfig['idc']
                        }
                    }, body).then((res) => {
                        const ret = JSON.parse(res);
                        if (ret.responseStatus && ret.responseStatus.status === 'success') {
                            this.parseSOAServerList(ret);
                            resolve();
                        }
                        else {
                            this.getSOAServerList(artemis_lists, discoveryConfig).then(resolve, reject);
                        }
                        done();
                    }).catch((err) => {
                        if (err.code == 'ECONNREFUSED' || err.code == 'ECONNRESET' || err.code === "ETIMEDOUT") {
                            done();
                            this.getSOAServerList(artemis_lists, discoveryConfig).then(resolve, reject);
                        }
                        else {
                            node_vampire_cat_1.default.event('NodeJs.ArtemisClient.GetServerIpfailure', artemisLookupUrl);
                            exceptionMetric.add(1, {
                                'ServerIp': artemisLookupUrl,
                                'AppId': node_vampire_appconfig_1.default['AppID']
                            });
                            done();
                            reject(err);
                        }
                    });
                });
            }
            else {
                reject(new Error('None Available Server, Servers:' + artemis_lists));
            }
        });
    }
    /**
   * 解析 artemis下发的soa server metadata 数据,筛选可访问的服务实例
   * @param ret {SOAServerMeta}
   * @returns void
   */
    parseSOAServerList(ret) {
        const AppIdbyURL = {};
        for (const service of ret.services) {
            let soaServerList_from_instance = [], _firstPrioritySubEnv = null;
            SOA_SERVICE_ORIGINAL_MAP[service.serviceId] = { services: [service] };
            //filter by route rules
            const servicesConfig = node_vampire_util_1.default.copy(service), subEnv = SOA_SERVICE_MAP[service.serviceId] && SOA_SERVICE_MAP[service.serviceId].subEnv;
            if (servicesConfig && servicesConfig.routeRules && servicesConfig.routeRules.length > 0) {
                const checkRouteRules = new checkRouteRules_1.CheckRouteRules({
                    subEnv
                });
                checkRouteRules.getAvailableServers(servicesConfig, servicesConfig.metadata.ucs_strategy);
                SOA_SERVICE_MAP[service.serviceId]['routeInstanceList'] = checkRouteRules.routeContext;
            }
            //get soaServer list from instances & logicInstances
            const instances = service.instances;
            const logicInstances = service.logicInstances;
            node_vampire_cat_1.default.event('NodeJs.artemis.lookUp.ret-' + this.clientType + '-' + service.serviceId, 'instances:' + instances.length + ',logicInstances:' + logicInstances.length);
            try {
                const ins = logicInstances && instances.concat(logicInstances) || instances;
                for (let item = 0; item < ins.length; item++) {
                    let c_url = (0, utils_1.checkUrl)(ins[item].url);
                    if (!c_url) {
                        continue;
                    }
                    //@ts-ignore
                    AppIdbyURL[c_url] = ins[item].metadata && ins[item].metadata.appid;
                }
                if (['uat', 'pro'].includes(appConfig_1.appConfig['Env'])) {
                    // aws:instances or logicInstances
                    soaServerList_from_instance = instances.length > 0 ? instances : logicInstances;
                }
                else {
                    // 子环境的判断参考文档：http://conf.ctripcorp.com/pages/viewpage.action?pageId=159208306
                    if (instances) {
                        for (let len = 0; len < instances.length; len++) {
                            if (!instances[len].url.includes(_errorUrl)) {
                                const data = instances[len].metadata ? instances[len].metadata : {};
                                // 选出 FATX/LPTX 优先级最高的子环境，及其对应instance
                                _firstPrioritySubEnv = (0, utils_1.getFirstPrioritySubEnv)(data.subenv, instances[len], _firstPrioritySubEnv);
                                // 匹配当前子环境下的实例 或 当前环境为fws时，匹配fws下的实例
                                if (subEnv && new RegExp(`\\b${subEnv}\\b`, 'i').test(data.subenv) || !subEnv && new RegExp(`\\b${appConfig_1.appConfig['Env']}\\b`, 'i').test(data.subenv)) {
                                    soaServerList_from_instance.push(instances[len]);
                                }
                            }
                        }
                        if (Object.keys(soaServerList_from_instance).length === 0 && _firstPrioritySubEnv && subEnv) {
                            //artemisConfigList为空即当前子环境下没有服务实例，则子环境优先级最高的子环境下实例
                            soaServerList_from_instance = _firstPrioritySubEnv.instance;
                        }
                    }
                }
                !SOA_SERVICE_MAP[service.serviceId] && (SOA_SERVICE_MAP[service.serviceId] = {});
                SOA_SERVICE_MAP[service.serviceId]['instanceList'] = soaServerList_from_instance;
                NODEJS_ARTEMIS_APP_BY_URL[service.serviceId] = AppIdbyURL;
                node_vampire_cat_1.default.event('NodeJs.artemisClient.service.urlList.update', 'pid=' + process.pid + ';soaServerList_from_instance.length=' + soaServerList_from_instance.length);
            }
            catch (e) {
                console.error('client _getInstancesConfig:', e);
                throw e;
            }
        }
    }
    /**
     * 匹配路由规则,选出匹配的路由规则的实例和权重
     * @param serviceId {string}
     * @param operationName {string}
     * @param routeId {string} request routeId
     * @param isUcs {string} open ucs
     * @returns Array<RouteServerList>
     */
    static reRoute(serviceId, operationName, routeId, isUcs = false) {
        const routeContext = SOA_SERVICE_MAP[serviceId] && SOA_SERVICE_MAP[serviceId]['routeInstanceList'] || [];
        return checkRouteRules_1.CheckRouteRules.reRoute(routeContext, operationName, routeId, isUcs);
    }
    static getSoaServerMap() {
        return SOA_SERVICE_MAP;
    }
    static getOriginalMap() {
        return SOA_SERVICE_ORIGINAL_MAP;
    }
    static getAppIDByURL(serviceId, url) {
        return NODEJS_ARTEMIS_APP_BY_URL[serviceId] ? NODEJS_ARTEMIS_APP_BY_URL[serviceId][url] : null;
    }
}
exports.ParseMetaData = ParseMetaData;

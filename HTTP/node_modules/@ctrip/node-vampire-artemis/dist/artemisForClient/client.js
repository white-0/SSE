"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
/**
 * artemis client
 *
 */
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const node_vampire_cat_1 = __importDefault(require("@ctrip/node-vampire-cat"));
const node_vampire_appconfig_1 = __importDefault(require("@ctrip/node-vampire-appconfig"));
//import { UcsClient } from '@ctrip/node-vampire-ucs-client';
const appConfig_1 = require("../appConfig");
const parseMetaData_1 = require("./parseMetaData");
const getArtemisServerList_1 = require("../utils/getArtemisServerList");
const websocket_1 = require("./websocket");
const utils_1 = require("../utils/utils");
const console = require('@ctrip/node-vampire-console')('vampire:artemis');
const _serverNodesList = {
    [utils_1.CallerType.SOA]: null,
    [utils_1.CallerType.QSCHEDULE]: null
};
const OPERATION_NAME = 'client';
const _errorUrl = '127.0.0.1:404';
const SOA_SERVICE_ID_MAP = {};
class ArtemisClient {
    constructor(opt) {
        this.serviceId = opt.serviceId && opt.serviceId.toLocaleLowerCase();
        this.subEnv = opt.subEnv || null;
        this.protocol = opt.protocol || null;
        this.discoveryConfig = {
            checkPoint: 0,
            discoveryData: this.protocol ? {
                appid: node_vampire_appconfig_1.default['AppID'],
                protocol: this.protocol,
                "support-constraint": true
            } : {
                appid: node_vampire_appconfig_1.default['AppID'],
                "support-constraint": true
            },
            regionId: 'sha',
            serviceId: this.serviceId,
            zoneId: ''
        };
        this.initPromise = false;
        //this.ucsClient = UcsClient.getInstance();
        this.ucsHeaders = {};
        this.clientType = opt.clientType || utils_1.CallerType.SOA;
        Object.defineProperty(this, 'currentUrlsList', {
            configurable: true,
            enumerable: true,
            get() {
                return parseMetaData_1.ParseMetaData.getSoaServerMap()[this.serviceId] && parseMetaData_1.ParseMetaData.getSoaServerMap()[this.serviceId]['instanceList'];
            }
        });
    }
    /*
     * 1.get ServerNodesList
     * 2.lookup.json 获取服务实例
     * */
    init() {
        if (this.initPromise) {
            return this.initPromise;
        }
        const span = node_vampire_cat_1.default.span('artemis', 'artemis get URL');
        this.initPromise = span.run((done) => {
            if (!_serverNodesList[this.clientType]) {
                // pull artemis serve list
                _serverNodesList[this.clientType] = new getArtemisServerList_1.ArtemisServerList(OPERATION_NAME, this.clientType);
            }
            return _serverNodesList[this.clientType].artemisPromise.catch((err) => {
                done();
                _serverNodesList[this.clientType] = null;
                throw err;
            }).then(() => {
                this.wsInstance = websocket_1.ClientWebSocket.getInstance(this.clientType);
                if (!this.subEnv) {
                    this.subEnv = appConfig_1.appConfig['subEnv'];
                }
                this.discoveryConfig['zoneId'] = appConfig_1.appConfig['Artemis.Zone.Service.Id'];
                this.discoveryConfig.discoveryData['subenv'] = this.subEnv;
                return new parseMetaData_1.ParseMetaData({
                    serviceId: this.serviceId,
                    subEnv: this.subEnv,
                    discoveryConfig: this.discoveryConfig,
                    clientType: this.clientType
                }).getSOAServerList(node_vampire_util_1.default.copy(appConfig_1.appConfig[this.clientType]['artemis.Serivce.UrlLists']), this.discoveryConfig).then(() => {
                    //send webSocket
                    this.wsInstance.send(this.discoveryConfig);
                    done();
                    return {};
                }).catch((err) => {
                    this.initPromise = null;
                    done();
                    err.message && (err.message = `${this.serviceId}: ` + err.message);
                    console.error('Get Config Error: ', err);
                    throw err;
                });
            });
        });
        return this.initPromise;
    }
    /**
     * SOA Client获取SOA Server 实例地址
     * @param operationName {string} operationName
     * @param routeId {string} request routeId,optional
     * @param userId {string} userId,optional
     * @returns
     */
    getServiceUrl(operationName = null, routeId, userId) {
        //let serviceUrl = null,
        //    availableServers = null;
        //const soaOriginalMap = ParseMetaData.getOriginalMap();
        //const servicesConfig = soaOriginalMap[this.serviceId] && soaOriginalMap[this.serviceId].services[0] || {};
        //ucs单元化策略
        // if (servicesConfig.metadata && servicesConfig.metadata.ucs_strategy) {
        //     //1).根据ucs策略获取shard
        //     const strategyId = servicesConfig.metadata.ucs_strategy;
        //     let shard = null;
        //     try {
        //         shard = this.ucsClient.buildRequestContext(this.userId || userId, Number(strategyId));
        //     } catch (err) {
        //         // empty
        //         return this.getUrl(operationName, routeId);
        //     }
        //     if (shard && shard.get('ucs-zone-code')) {
        //         const ucsZone = shard.get('ucs-zone-code');
        //         this.ucsHeaders = {
        //             'x-ctx-ucs-zone-code': shard.get('ucs-zone-code'),
        //             'x-ctx-ucs-shard-id': shard.get('ucs-shard-id'),
        //             'x-ctx-ucs-strategy-id': shard.get('ucs-strategy-id'),
        //             'x-ctx-ucs-user-region': shard.get('ucs-user-region')
        //         }
        //         //2).匹配路由策略
        //         if (servicesConfig && servicesConfig.routeRules.length > 0) {
        //             availableServers = ParseMetaData.reRoute(this.serviceId, operationName, routeId, true);
        //         }
        //         if (availableServers && availableServers.length > 0) {
        //             availableServers.forEach((_availableServer) => {
        //                 ucsZone.toLowerCase() === _availableServer.zone && (serviceUrl = _availableServer.urls[Math.floor(Math.random() * _availableServer.urls.length)]);
        //             });
        //         }
        //         if (!serviceUrl || serviceUrl && serviceUrl.includes(_errorUrl)) {
        //             throw new Error('[@ctrip/node-vampire-artemis] None Available Server Url');
        //         }
        //         cat.event('NodeJs.artemisClient.service.url', serviceUrl);
        //         return checkUrl(serviceUrl);
        //     } else {
        //         return this.getUrl(operationName, routeId);
        //     }
        // } else {
        return this.getUrl(operationName, routeId);
        //}
    }
    getUrl(operationName, routeId) {
        let serviceUrl = null, availableServers = null;
        const soaServerMap = parseMetaData_1.ParseMetaData.getSoaServerMap()[this.serviceId];
        const instanceListNoRoute = soaServerMap && soaServerMap['instanceList'] || [];
        node_vampire_cat_1.default.event('Nodejs.artemisClient.serviceUrlList', 'pid=' + process.pid + ';instanceListNoRoute.length=' + instanceListNoRoute.length);
        if (soaServerMap && soaServerMap['routeInstanceList'] && soaServerMap['routeInstanceList'].length > 0) {
            availableServers = parseMetaData_1.ParseMetaData.reRoute(this.serviceId, operationName, routeId);
        }
        //路由未匹配到实例时：
        if (!availableServers && instanceListNoRoute.length > 0) {
            const instance = instanceListNoRoute[Math.floor(Math.random() * instanceListNoRoute.length)];
            serviceUrl = instance.url;
        }
        else if (availableServers && availableServers.length > 0) {
            const _availableServer = (0, utils_1.getRandomFromWeightArray)(availableServers);
            if (_availableServer && _availableServer.urls && _availableServer.urls.length > 0) {
                serviceUrl = _availableServer.urls[Math.floor(Math.random() * _availableServer.urls.length)];
            }
        }
        if (!serviceUrl || serviceUrl && serviceUrl.includes(_errorUrl)) {
            throw new Error(`[@ctrip/node-vampire-artemis] None Available Server Url,serviceId: ${this.serviceId}, env: ${node_vampire_appconfig_1.default['Env']}`);
        }
        node_vampire_cat_1.default.event('NodeJs.artemisClient.service.url', serviceUrl);
        let c_url = (0, utils_1.checkUrl)(serviceUrl);
        //@ts-ignore
        return c_url ? c_url : '';
    }
    setUserId(userId) {
        this.userId = userId;
    }
    getServerAppIdByURL(url) {
        return parseMetaData_1.ParseMetaData.getAppIDByURL(this.serviceId, url);
    }
    getUcsHeaders() {
        return this.ucsHeaders;
    }
}
class Client extends ArtemisClient {
    constructor(opt) {
        super(opt);
        if (opt.serviceId && !SOA_SERVICE_ID_MAP[opt.serviceId]) {
            SOA_SERVICE_ID_MAP[opt.serviceId] = new ArtemisClient(opt);
        }
        return opt.serviceId && SOA_SERVICE_ID_MAP[opt.serviceId];
    }
}
exports.Client = Client;

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientWebSocket = void 0;
const ws_1 = __importDefault(require("ws"));
const events_1 = __importDefault(require("events"));
const appConfig_1 = require("../appConfig");
const node_vampire_cat_1 = __importDefault(require("@ctrip/node-vampire-cat"));
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const utils_1 = require("../utils/utils");
const parseMetaData_1 = require("./parseMetaData");
const console = require('@ctrip/node-vampire-console')('vampire:artemis');
const version = require('../../package.json').version;
const wsClient = {
    [utils_1.CallerType.SOA]: null,
    [utils_1.CallerType.QSCHEDULE]: null
};
class ClientWebSocket extends events_1.default {
    constructor(clientType) {
        super();
        this.isGetServerListByLookUp = false;
        this.clientType = clientType;
        this.init = this._init();
        this.init.catch((error) => {
            console.error('ws error:' + error);
        });
        this.discoveryConfigs = {};
    }
    static getInstance(clientType) {
        if (!wsClient[clientType]) {
            wsClient[clientType] = new ClientWebSocket(clientType);
        }
        return wsClient[clientType];
    }
    _getWetSocketUrl() {
        const originalUrl = appConfig_1.appConfig[this.clientType]['artemis.Service.Url'];
        const _originalUrl = ((0, utils_1.checkUrl)(originalUrl) || '');
        if (!_originalUrl)
            throw new Error('ws url is invalid');
        return { _url: _originalUrl.replace(/^http/, 'ws') + 'ws/discovery/instance-change', originalUrl };
    }
    _init(discoveryConfigs = []) {
        return new Promise((resolve, reject) => {
            const { _url, originalUrl } = this._getWetSocketUrl();
            node_vampire_cat_1.default.event('NodeJs.WS.Url', _url);
            this.ws = new ws_1.default(_url, null, {
                headers: {
                    'x-client-appid': appConfig_1.appConfig['AppID'],
                    'User-Agent': 'nodejs/' + version
                }
            });
            let pingTimer, wsCloseTimer;
            const that = this;
            this.ws.on('open', () => {
                this.isGetServerListByLookUp = false;
                clearInterval(this.getServerListByLookUpInterval);
                //websocket 建连成功之后再次访问 lookup,保证websocket和lookup是访问同一个服务实例获取数据的
                new parseMetaData_1.ParseMetaData({ clientType: this.clientType }).getSOAServerList([appConfig_1.appConfig[this.clientType]['artemis.Service.Url']]).catch(() => { });
                wsCloseTimer = setTimeout(() => { that.ws.close(); }, 180000);
                pingTimer = setInterval(() => {
                    that.ws.ping(() => { });
                    //console.log(appConfig[this.clientType]['artemis.Serivce.UrlLists'],originalUrl,appConfig[this.clientType]['artemis.Serivce.UrlLists'].includes(originalUrl));
                    if (!appConfig_1.appConfig[this.clientType]['artemis.Serivce.UrlLists'].includes(originalUrl)) { //当artemis服务列表变更时断开重连
                        wsCloseTimer && clearTimeout(wsCloseTimer);
                        that.ws.close();
                    }
                }, 10000).unref();
                if (discoveryConfigs.length > 0) {
                    for (const item of discoveryConfigs) {
                        that.ws.send(JSON.stringify(item));
                    }
                }
                this.ws._socket && this.ws._socket.unref();
                resolve();
            });
            that.ws.on('message', (data) => {
                that.onChange(data);
            });
            that.ws.once('close', function close() {
                const randomIndex = Math.floor(Math.random() * appConfig_1.appConfig[that.clientType]['artemis.Serivce.UrlLists'].length);
                appConfig_1.appConfig[that.clientType]['artemis.Service.Url'] = appConfig_1.appConfig[that.clientType]['artemis.Serivce.UrlLists'][randomIndex];
                that.wsClose();
                if (pingTimer) {
                    clearInterval(pingTimer);
                }
                else {
                    reject();
                }
                if (wsCloseTimer) {
                    clearTimeout(wsCloseTimer);
                }
                node_vampire_cat_1.default.event('NodeJs.WS.Close', _url);
                setTimeout(() => {
                    that.init = that._init(Object.values(that.discoveryConfigs));
                    that.init.catch(() => {
                        console.error('ws connection failed,retry.');
                    });
                }, 3000).unref();
            });
            that.ws.on('error', (err) => {
                console.error('ws error:' + err);
            });
        });
    }
    /**
     * 监听路由配置的变更，变更配置的下发是单个服务下发的
     * @param data {}
     */
    onChange(data) {
        try {
            const result = JSON.parse(data);
            const insType = result.instance && 'instance';
            if (result.discoveryConfig && result.discoveryConfig.serviceId) {
                node_vampire_cat_1.default.event('NodeJs.artemisClient.onChange', JSON.stringify({
                    [result.changeType]: result[insType].instanceId + '-' + result.discoveryConfig.serviceId
                }));
                const servicesOriginalConfigs = parseMetaData_1.ParseMetaData.getOriginalMap();
                const servicesConfigByServiceId = servicesOriginalConfigs[result.discoveryConfig.serviceId];
                //console.log(result.changeType,'ws.result==', JSON.stringify(servicesConfigByServiceId));
                const parseMetaData = new parseMetaData_1.ParseMetaData({ serviceId: result.discoveryConfig.serviceId, clientType: this.clientType });
                const discoveryConfig = servicesConfigByServiceId && servicesConfigByServiceId.services[0] && servicesConfigByServiceId.services[0].discoveryConfig;
                const service = result.instance && servicesConfigByServiceId && servicesConfigByServiceId.services[0] && servicesConfigByServiceId.services[0].instances;
                if (service) {
                    switch (result.changeType) {
                        case utils_1.WSType.NEW: {
                            let isNew = true;
                            for (let item = 0; item < service.length; item++) {
                                if (service[item].instanceId === result[insType].instanceId) {
                                    service[item] = result[insType];
                                    isNew = false;
                                    break;
                                }
                            }
                            isNew && service.push(result[insType]);
                            break;
                        }
                        case utils_1.WSType.DELETE: {
                            for (let item = 0; item < service.length; item++) {
                                if (service[item].instanceId === result[insType].instanceId) {
                                    service.splice(item, 1);
                                    break;
                                }
                            }
                            break;
                        }
                        case utils_1.WSType.CHANGE: {
                            for (let item = 0; item < service.length; item++) {
                                if (service[item].instanceId === result[insType].instanceId) {
                                    service[item] = result[insType];
                                    break;
                                }
                            }
                            break;
                        }
                        case utils_1.WSType.RELOAD: {
                            parseMetaData.getSOAServerList([appConfig_1.appConfig[this.clientType]['artemis.Service.Url']], discoveryConfig).catch(() => {
                                //如果当前ip或者失败，则轮询访问serivce所有实例
                                parseMetaData.getSOAServerList(node_vampire_util_1.default.copy(appConfig_1.appConfig[this.clientType]['artemis.Serivce.UrlLists']), discoveryConfig).catch(() => { });
                            });
                            break;
                        }
                    }
                    node_vampire_cat_1.default.event('NodeJs.artemisClient.onChange', String(service.length || 0));
                    parseMetaData.parseSOAServerList(servicesConfigByServiceId);
                }
            }
        }
        catch (e) {
            node_vampire_cat_1.default.event('NodeJs.artemisClient.onChange.error', e);
            console.error('NodeJs.artemisClient.onChange.error:' + e);
        }
    }
    /**
     * 当ws 异常断开是通过lookup拉取所有soa server配置
     * @param data {}
     */
    wsClose() {
        if (this.isGetServerListByLookUp)
            return;
        const parseMetaData = new parseMetaData_1.ParseMetaData({ clientType: this.clientType });
        parseMetaData.getSOAServerList([appConfig_1.appConfig[this.clientType]['artemis.Service.Url']]).catch(() => { });
        this.isGetServerListByLookUp = true;
        this.getServerListByLookUpInterval = setInterval(() => {
            parseMetaData.getSOAServerList([appConfig_1.appConfig[this.clientType]['artemis.Service.Url']]).catch(() => { });
        }, 300000).unref();
    }
    /**
     * 发送给ws 需要监听的服务
     * @param discoveryConfig {DiscoveryConfig}
     */
    send(discoveryConfig) {
        if (!this.discoveryConfigs[discoveryConfig.serviceId]) {
            this.discoveryConfigs[discoveryConfig.serviceId] = discoveryConfig;
        }
        this.init.then(() => {
            this.ws.send(JSON.stringify(discoveryConfig));
        }).catch((err) => {
            console.error('ws send data error:', err);
        });
    }
}
exports.ClientWebSocket = ClientWebSocket;

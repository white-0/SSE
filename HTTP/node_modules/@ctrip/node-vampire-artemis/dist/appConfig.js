"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.appConfig = void 0;
const node_vampire_foundation_framework_1 = __importDefault(require("@ctrip/node-vampire-foundation-framework"));
const node_vampire_qconfig_1 = __importDefault(require("@ctrip/node-vampire-qconfig"));
const utils_1 = require("./utils/utils");
const console = require('@ctrip/node-vampire-console')('vampire:artemis');
class ArtemisConfig {
    // private isInitializing: boolean = false;
    constructor() {
        this.artemis_server_host_default_list = {};
        this.artemis_server_host_default_list_Yun = {};
        this.idc = null;
        this.region = null;
        this.Env = null;
        this.subEnv = null;
        this.AppID = null;
        this.artemis_server_host_default_list = {
            [utils_1.CallerType.SOA]: {
                'fws': 'http://artemis.soa.fx.fws.qa.nt.ctripcorp.com/artemis-discovery-service/',
                'lpt': 'http://artemis.soa.fx.lpt.qa.nt.ctripcorp.com/artemis-discovery-service/',
                'uat': 'http://artemis.soa.fx.uat.qa.nt.ctripcorp.com/artemis-discovery-service/',
                'pro': 'http://artemis.soa.fx.ctripcorp.com/artemis-discovery-service/'
            },
            [utils_1.CallerType.QSCHEDULE]: {
                'fws': 'http://artemis.qschedule.fx.fws.qa.nt.ctripcorp.com/artemis-discovery-service',
                'lpt': 'http://artemis.qschedule.fx.fws.qa.nt.ctripcorp.com/artemis-discovery-service',
                'uat': 'http://artemis.qschedule.fx.uat.qa.nt.ctripcorp.com/artemis-discovery-service',
                'pro': 'http://artemis.qschedule.fx.ctripcorp.com/artemis-discovery-service'
            }
        };
        this.artemis_server_host_default_list_Yun = {
            [utils_1.CallerType.SOA]: {
                'FRA-AWS': 'http://artemis.soa.fx.fraaws.tripws.com/artemis-discovery-service/',
                'SIN-AWS': 'http://artemis.soa.fx.sinaws.tripws.com/artemis-discovery-service/',
                'SHA-ALI': 'http://artemis.soa.fx.shaali.tripws.com/artemis-discovery-service/'
            },
            [utils_1.CallerType.QSCHEDULE]: {
                'FRA-AWS': 'http://artemis.qschedule.fx.fraaws.tripws.com/artemis-discovery-service',
                'SIN-AWS': 'http://artemis.qschedule.fx.sinaws.tripws.com/artemis-discovery-service',
                'SHA-ALI': 'http://artemis.qschedule.fx.shaali.tripws.com/artemis-discovery-service'
            }
        };
        this[utils_1.CallerType.SOA] = {
            initPromise: false,
            qconfig: '100012112:artemis-reserved.properties',
            'Artemis.discovery.Url': null,
            'Artemis.registry.Url': null
        };
        this[utils_1.CallerType.QSCHEDULE] = {
            initPromise: false,
            qconfig: '100004198:qunar-service-artemis.properties',
            'Artemis.discovery.Url': null,
            'Artemis.registry.Url': null
        };
    }
    _setDefaultConfig(key, value, serverType) {
        if (!serverType) {
            this[key] = value;
        }
        else {
            this[serverType][key] = value;
        }
    }
    _updateSoaServerConfig(serverType, artemis_url) {
        let artemis_service_url, artemis_client_url;
        //检查artemis_url不为空，并且是一个对象类型
        if (!artemis_url || typeof artemis_url !== 'object') {
            console.warn('The artemis_url is not a object, ', artemis_url);
            return;
        }
        if (serverType === utils_1.CallerType.SOA) {
            artemis_service_url = artemis_url['artemis.client.soa.service.service.domain.url'] || this.artemis_server_host_default;
            artemis_client_url = artemis_url['artemis.client.soa.client.service.domain.url'] || this.artemis_server_host_default;
        }
        else if (serverType === utils_1.CallerType.QSCHEDULE) {
            artemis_service_url = artemis_url['artemis.client.qunar.service.service.domain.url'] || this.artemis_server_host_default;
            artemis_client_url = artemis_url['artemis.client.qunar.client.service.domain.url'] || this.artemis_server_host_default;
        }
        else {
            return;
        }
        let c_artemis_client_url = (0, utils_1.checkUrl)(artemis_client_url);
        let c_artemis_service_url = (0, utils_1.checkUrl)(artemis_service_url);
        if (c_artemis_client_url) {
            this._setDefaultConfig('Artemis.discovery.Url', c_artemis_client_url + 'api/cluster/up-discovery-nodes.json', serverType);
        }
        if (c_artemis_service_url) {
            this._setDefaultConfig('Artemis.registry.Url', c_artemis_service_url + 'api/cluster/up-registry-nodes.json', serverType);
        }
        this._setDefaultConfig('Artemis.Zone.Service.Id', this.idc);
    }
    init(serverType) {
        if (typeof serverType != 'string' || !(serverType.toUpperCase() in utils_1.CallerType)) {
            return;
        }
        if (!this[serverType]) {
            this[serverType] = {};
        }
        if (!this[serverType].initPromise) {
            this[serverType].initPromise = this.getQconfigFileName(serverType).then((qconfigFileName) => {
                qconfigFileName && (this[serverType].qconfig = qconfigFileName);
                if (this[serverType].qconfig) {
                    const artemisQConfig = node_vampire_qconfig_1.default.getConfig(this[serverType].qconfig);
                    artemisQConfig.on('change', (datas) => {
                        this._updateSoaServerConfig(serverType, datas && datas.configData);
                    });
                    return artemisQConfig.get().then((list) => {
                        this._updateSoaServerConfig(serverType, list);
                    });
                }
                else {
                    this._updateSoaServerConfig(serverType, {});
                }
            }).catch((e) => {
                console.error('Init config error, ', e);
                delete this[serverType].initPromise;
                throw e;
            });
        }
        return this[serverType].initPromise;
    }
    //新增ali回源国内的处理策略
    getQconfigFileName(serverType) {
        return new Promise((resolve, reject) => {
            Promise.all([
                node_vampire_foundation_framework_1.default.getServerProperties('*'),
                node_vampire_foundation_framework_1.default.getEnv(),
                node_vampire_foundation_framework_1.default.getIDC(),
                node_vampire_foundation_framework_1.default.getSubEnv(),
                node_vampire_foundation_framework_1.default.getConfig("*")
            ]).then(([serverProperties, env, idc = 'NTGXH', subEnv, metaDataConfig]) => {
                this.Env = env;
                this.idc = idc;
                this.subEnv = subEnv ? subEnv.toLowerCase() : null;
                this.AppID = node_vampire_foundation_framework_1.default.getAppID();
                this.region = serverProperties['region'] || 'NTG';
                this.artemis_server_host_default = this.Env === 'pro' && this.artemis_server_host_default_list_Yun[serverType][this.idc] ? this.artemis_server_host_default_list_Yun[serverType][this.idc] : this.artemis_server_host_default_list[serverType][this.Env];
                const qconfigName = this.calculateQconfigName(serverType, serverProperties, metaDataConfig);
                resolve(qconfigName);
            }).catch((e) => {
                console.error('Get aliYun qconfigFileName error, ', e);
                reject(e);
            });
        });
    }
    calculateQconfigName(serverType, serverProperties, metaDataConfig) {
        let qconfigName = null;
        if (serverType === utils_1.CallerType.SOA &&
            serverProperties['tenant'] &&
            serverProperties['cloudprovider'] &&
            this.region &&
            this.idc) {
            const isPci = Boolean(serverProperties['pci']).toString();
            const tenant = serverProperties['tenant'] ? serverProperties['tenant'].toLowerCase() : '';
            const cloudprovider = serverProperties['cloudprovider'] ? serverProperties['cloudprovider'].toLowerCase() : '';
            const region = this.region ? this.region.toLowerCase() : '';
            const idc = this.idc ? this.idc.toLowerCase() : '';
            qconfigName = `100012112:artemis-reserved_${tenant}_${cloudprovider}_${region}_${idc}_${isPci}.properties`;
        }
        if (serverType === utils_1.CallerType.QSCHEDULE &&
            (node_vampire_foundation_framework_1.default.configNeedToBeUpdated) &&
            metaDataConfig &&
            metaDataConfig['qschedule.artemis.file']) {
            qconfigName = '100004198:' + metaDataConfig['qschedule.artemis.file'];
        }
        return qconfigName;
    }
}
exports.appConfig = new ArtemisConfig();

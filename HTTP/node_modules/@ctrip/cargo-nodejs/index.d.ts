import { IncomingMessage, ServerResponse } from 'http'
import * as cargoMiddlewares from './lib/middlewares'
import {
  Channel,
  Currency,
  Group,
  Key,
  Locale,
  Site,
  Source,
  Data,
  ExtendedData
} from './lib/cache/cache-entry'

interface IQuery {
  query(): string;
}

interface IQueryOther extends IQuery {
  candidate(candidate: string): IQuery
}

interface IQueryBuilder extends IQuery, IQueryOther {
  system(): IQueryBuilder;
  appid(appId: string): IQueryBuilder;
  group(groupName: string): IQueryBuilder;
  site(siteName: string): IQueryBuilder;
  locale(localeName: string): IQueryBuilder;
  currency(currencyName: string): IQueryBuilder;
  channel(channelName: string): IQueryBuilder;
  source(sourceName: string): IQueryBuilder;
  other(other: string): IQueryOther;
  queryList(): Data [];
  queryExtendList(): ExtendedData [];
}

interface ICargoContext {
  toHTMLAttribute(): object;
  toHTMLAttributeString(): string;
  getCookie(cookieName: string): string;
  getContextType(): Cargo.CONTEXT_TYPE;
  getHost(): string;
  setHost(host: string): void;
  getDomain(): string;
  setDomain(domain: string): void;
  getLanguage(): string;
  setLanguage(language: string): void;
  getLocale(): string;
  setLocale(locale: string): void;
  getCurrency(): string;
  setCurrency(currency: string): void;
  getSite(): string;
  setSite(site: string): void;
  getGroup(): string;
  setGroup(group: string): void;
  setBrowserCookies(): void;
  select(keyName: string): IQueryBuilder;
}

declare namespace Cargo {

  enum LOG_LEVEL {
    DEBUG = 0,
    INFO = 1,
    WARNING = 2,
    ERROR = 3,
    NONE = 4
  }

  enum DATA_TYPE {
    GROUP,
    SITE,
    CURRENCY,
    LOCALE,
    CHANNEL,
    SOURCE,
    DATA
  }

  enum CONTEXT_TYPE {
    H5 = 'h5',
    ONLINE = 'online'
  }

  const middlewares: typeof cargoMiddlewares;

  function init(options?: { appId: number|string, logLevel: LOG_LEVEL }): Promise<void>;
  function injectCargoProvider(options?: { appId: number|string, logLevel: LOG_LEVEL }): void;
  function getChannels(): Channel [];
  function getChannel(channelName: string): Channel | null;
  function getCurrencies(): Currency [];
  function getSupportedCurrencies(): Currency [];
  function getTopCurrencies(groupName: string, siteName: string): Currency [];
  function getCurrency(currencyName: string): Currency | null;
  function getGroups(): Group [];
  function getGroup(groupName: string): Group | null;
  function getLocales(): Locale [];
  function getSupportedLocales(contextType: CONTEXT_TYPE, groupName: string, siteName: string): Locale [];
  function getLocale(localeName: string): Locale | null;
  function getSources(): Source [];
  function getSource(sourceName: string): Source | null;
  function getSites(): Site [];
  function getSite(groupName: string, siteName: string): Site | null;
  function getHosts(groupName: string, siteName: string): string [];
  function getSiteByHost(host: string): Site | null;
  function getChannelCurrencySwitchMap(channelName: string): { [key: string]: boolean };
  function getChannelCurrencySwitch(channelName: string, currecnyName: string): boolean;
  function select(key: string): IQueryBuilder;
  function getCargoContext(req: IncomingMessage, res: ServerResponse, type: CONTEXT_TYPE): ICargoContext;
  function setContextType(req: IncomingMessage, type: CONTEXT_TYPE): void;
  function registerUpdateEvent(dataType: DATA_TYPE, callback: () => any): void;
  function getLocaleSites(localeName: string, groupName?: string): { name: string, host: string } [];
  function getDefaultDomainByLocale(groupName: string, localeName: string, subEnv?: string): { domain: string, message: string, isDefault: boolean };
  function getDefaultSiteByLocale(groupName: string, localeName: string): Site;
  function getDefaultCurrencyBySite(groupName: string, siteName: string): Currency;
  function getDefaultCurrencyByLocale(groupName: string, localeName: string): Currency;
}

declare module 'http' {
  interface IncomingMessage {
    cargo: ICargoContext;
    cargoContext: ICargoContext;
  }
}

declare module 'koa' {
  interface BaseContext {
    cargoContext: ICargoContext;
  }
}

export = Cargo;

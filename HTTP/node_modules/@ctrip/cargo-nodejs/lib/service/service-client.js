'use strict'
const is = require('is-type-of')
const { SoaClientAgent } = require('@ctrip/node-vampire-standard-soa-client')
const AbstractClient = require('./abstract-client')
const log = require('../log')
const ServiceConfig = require('./service-config')

class ServiceClient extends AbstractClient {
  requestTimeout () {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        reject(new Error('timeout'))
      }, ServiceConfig.TIMEOUT_DEFAULT_MILLISECONDS)
    })
  }

  invoke (methodName, args) {
    log.debug('request cargo server', methodName, args)
    return Promise.race([
      SoaClientAgent(ServiceConfig.SOA)[methodName]({ args }),
      this.requestTimeout()
    ]).then(response => {
      if (response && response.ResponseStatus &&
        response.ResponseStatus.Ack === 'Success') {
        return response
      }
      throw new Error()
    })
  }

  getGroupData (version, force = true) {
    return this.invoke('groupData', {
      version,
      force
    }).then(response => {
      if (is.array(response.groups)) {
        return response.groups
      }
      return []
    })
  }

  getSiteData (version, force = true) {
    return this.invoke('siteData', {
      version,
      force
    }).then(response => {
      if (is.array(response.sites)) {
        return response.sites
      }
      return []
    })
  }

  getLocaleData (version, force = true) {
    return this.invoke('localeData', {
      version,
      force
    }).then(response => {
      if (is.array(response.locales)) {
        return response.locales
      }
      return []
    })
  }

  getSourceData (version, force = true) {
    return this.invoke('sourceData', {
      version,
      force
    }).then(response => {
      if (is.array(response.sources)) {
        return response.sources
      }
      return []
    })
  }

  getCurrencyData (version, force = true) {
    return this.invoke('currencyData', {
      version,
      force
    }).then(response => {
      if (is.array(response.currencies)) {
        return response.currencies
      }
      return []
    })
  }

  getChannelData (version, force = true) {
    return this.invoke('channelData', {
      version,
      force
    }).then(response => {
      if (is.array(response.channels)) {
        return response.channels
      }
      return []
    })
  }

  getKeyData (version, force = true) {
    return this.invoke('keyData', {
      version,
      force
    }).then(response => {
      if (is.array(response.keys)) {
        return response.keys
      }
      return []
    })
  }

  getAppKeyData (appId, version, force = true) {
    return this.invoke('appKeyData', {
      appId,
      version,
      force
    }).then(response => {
      if (is.array(response.keys)) {
        return response.keys
      }
      return []
    })
  }

  getConfigData (appId) {
    return this.invoke('configData', {
      appId
    }).then(response => {
      if (is.array(response.configs)) {
        return response.configs
      }
      return []
    })
  }

  getData (appId, version, force = true) {
    return this.invoke('data', {
      appId,
      version,
      force
    }).then(response => {
      if (is.array(response.data)) {
        return response.data
      }
      return []
    })
  }

  getAllData (appId, version, force = true) {
    return this.invoke('allData', {
      appId,
      version,
      force
    }).then(response => {
      if (is.array(response.data)) {
        return response.data
      }
      return []
    })
  }

  getDataWhiteList (appId, version, force = true) {
    return this.invoke('dataWhiteList', {
      appId,
      version,
      force
    }).then(response => {
      if (is.array(response.data)) {
        return response.data
      }
      return []
    })
  }

  getCurrencySwitch (force = true) {
    return this.invoke('currencySwitch', {
      force
    }).then(response => {
      if (is.array(response.data)) {
        return response.data
      }
      return []
    })
  }

  sendHeartBeat (heartBeatData) {
    return this.invoke('sendHeart', heartBeatData)
  }
}

module.exports = new ServiceClient()

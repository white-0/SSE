'use strict'
const is = require('is-type-of')
const fs = require('fs')
const path = require('path')
const prefix = path.resolve(process.cwd(), './test/mock')
const AbstractClient = require('./abstract-client')

class MockClient extends AbstractClient {
  invoke (filename) {
    return new Promise((resolve, reject) => {
      fs.readFile(path.resolve(prefix, filename), 'utf8', (error, data) => {
        if (error) {
          return reject(error)
        }
        try {
          const parsedData = JSON.parse(data)
          return resolve(parsedData)
        } catch (e) {
          return reject(e)
        }
      })
    })
  }

  getGroupData (version, force = true) {
    return this.invoke('groupData.json').then(response => {
      if (is.array(response.groups)) {
        return response.groups
      }
      return []
    })
  }

  getSiteData (version, force = true) {
    return this.invoke('siteData.json').then(response => {
      if (is.array(response.sites)) {
        return response.sites
      }
      return []
    })
  }

  getLocaleData (version, force = true) {
    return this.invoke('localeData.json').then(response => {
      if (is.array(response.locales)) {
        return response.locales
      }
      return []
    })
  }

  getSourceData (version, force = true) {
    return this.invoke('sourceData.json').then(response => {
      if (is.array(response.sources)) {
        return response.sources
      }
      return []
    })
  }

  getCurrencyData (version, force = true) {
    return this.invoke('currencyData.json').then(response => {
      if (is.array(response.currencies)) {
        return response.currencies
      }
      return []
    })
  }

  getChannelData (version, force = true) {
    return this.invoke('channelData.json').then(response => {
      if (is.array(response.channels)) {
        return response.channels
      }
      return []
    })
  }

  getKeyData (version, force = true) {
    return this.invoke('keyData.json').then(response => {
      if (is.array(response.keys)) {
        return response.keys
      }
      return []
    })
  }

  getAppKeyData (appId, version, force = true) {
    return this.invoke('appKeyData.json').then(response => {
      if (is.array(response.keys)) {
        return response.keys
      }
      return []
    })
  }

  getConfigData (appId) {
    return this.invoke('configData.json').then(response => {
      if (is.array(response.configs)) {
        return response.configs
      }
      return []
    })
  }

  getData (appId, version, force = true) {
    return this.invoke('data.json').then(response => {
      if (is.array(response.data)) {
        return response.data
      }
      return []
    })
  }

  getAllData (appId, version, force = true) {
    return this.invoke('allData.json').then(response => {
      if (is.array(response.data)) {
        return response.data
      }
      return []
    })
  }

  getDataWhiteList (appId, version, force = true) {
    return this.invoke('dataWhiteList.json').then(response => {
      if (is.array(response.data)) {
        return response.data
      }
      return []
    })
  }

  getCurrencySwitch (force = true) {
    return this.invoke('currencySwitch.json').then(response => {
      if (is.array(response.data)) {
        return response.data
      }
      return []
    })
  }

  sendHeartBeat (heartBeatData) {
    return Promise.resolve()
  }
}

module.exports = new MockClient()

'use strict'
const is = require('is-type-of')
const HttpContext = require('./http-context')
const ContextConfig = require('./context-config')
const cacheManager = require('../cache')
const helpers = require('../common/helpers')
const { SEPARATOR } = require('../common/constants')
const { ContextQueryBuilder } = require('../query')
const { QueryBuilder } = require('../query')
const { CurrencyResolver, LocaleResolver } = require('./resolver')
const log = require('../log')

const PARSE = Symbol('CARGO#PARSE_CONTEXT')
const PARSE_CONTEXT_TYPE = Symbol('CARGO#PARSE_CONTEXT_TYPE')
const PARSE_DOMAIN = Symbol('CARGO#PARSE_DOMAIN')
const PARSE_COOKIE_POLICY = Symbol('CARGO#PARSE_COOKIE_POLICY')

const PARSE_LOCALE = Symbol('CARGO#PARSE_LOCALE')
const PARSE_LANGUAGE = Symbol('CARGO#PARSE_LANGUAGE')
const PARSE_CURRENCY = Symbol('CARGO#PARSE_CURRENCY')

const PARSE_LOCALE_H5 = Symbol('CARGO#PARSE_LOCALE_H5')
const PARSE_LANGUAGE_H5 = Symbol('CARGO#PARSE_LANGUAGE_H5')
const PARSE_CURRENCY_H5 = Symbol('CARGO#PARSE_CURRENCY_H5')

const CONTEXT = Symbol('CARGO#CONTEXT')
const REQ_CONTEXT_TYPE = Symbol.for('CARGO#REQ_CONTEXT_TYPE')

const HTML_DATA_ATTRIBUTE_NAME = 'data-cargo'

class CargoContext extends HttpContext {
  constructor (req, res, type = ContextConfig.CONTEXT_TYPE.ONLINE) {
    super(req, res)
    this[CONTEXT] = {
      host: null,
      group: null,
      site: null,
      domain: ContextConfig.DEFAULT_DOMAIN,
      locale: ContextConfig.DEFAULT_LOCALE,
      strictLocale: ContextConfig.DEFAULT_LOCALE,
      language: '',
      currency: '',
      contextType: this[PARSE_CONTEXT_TYPE](req, type)
    }
    this[PARSE]()
  }

  toHTMLAttribute () {
    const htmlContext = {
      locale: this.getLocale(),
      language: this.getLanguage(),
      currency: this.getCurrency(),
      contextType: this.getContextType()
    }

    if (this.getSite()) {
      htmlContext.site = this.getSite()
    }
    if (this.getGroup()) {
      htmlContext.group = this.getGroup()
    }

    return {
      [HTML_DATA_ATTRIBUTE_NAME]: Object.entries(htmlContext).map(v => v.join(':')).join()
    }
  }

  toHTMLAttributeString () {
    return `${HTML_DATA_ATTRIBUTE_NAME}="${this.toHTMLAttribute()[HTML_DATA_ATTRIBUTE_NAME]}"`
  }

  getCookie (cookieName) {
    let value = ''

    switch (cookieName) {
      case 'locale':
        value = this.parseCookies(this.getContextType() === ContextConfig.CONTEXT_TYPE.H5 ? ContextConfig.H5_COOKIES.LOCALE : ContextConfig.COOKIE_LOCALE_KEY)
        break
      case 'lang':
      case 'language':
        value = this.parseCookies(this.getContextType() === ContextConfig.CONTEXT_TYPE.H5 ? ContextConfig.H5_COOKIES.LANGUAGE : ContextConfig.COOKIE_LANGUAGE_KEY)
        break
      case 'currency':
        value = this.parseCookies(this.getContextType() === ContextConfig.CONTEXT_TYPE.H5 ? ContextConfig.H5_COOKIES.CURRENCY : ContextConfig.COOKIE_CURRENCY_KEY)
        break
      case 'site':
        value = this.parseCookies(ContextConfig.H5_COOKIES.SITE)
        break
      case 'group':
        value = this.parseCookies(ContextConfig.H5_COOKIES.GROUP)
        break
    }

    return value
  }

  getContextType () {
    return this[CONTEXT].contextType
  }

  getHost () {
    return this[CONTEXT].host
  }

  setHost (host) {
    this[CONTEXT].host = host
  }

  getDomain () {
    return this[CONTEXT].domain
  }

  setDomain (domain) {
    this[CONTEXT].domain = domain
  }

  getCookiePolicy () {
    return this[CONTEXT].cookiePolicy
  }

  setCookiePolicy (cookiePolicy) {
    this[CONTEXT].cookiePolicy = cookiePolicy
  }

  getLanguage () {
    return this[CONTEXT].language
  }

  setLanguage (language) {
    this[CONTEXT].language = language
  }

  getLocale () {
    return this[CONTEXT].locale
  }

  setLocale (locale) {
    this[CONTEXT].locale = locale
  }

  getStrictLocale () {
    return this[CONTEXT].strictLocale
  }

  setStrictLocale (strictLocale) {
    this[CONTEXT].strictLocale = strictLocale
  }

  getCurrency () {
    return this[CONTEXT].currency
  }

  setCurrency (currency) {
    this[CONTEXT].currency = currency
  }

  getSite () {
    return this[CONTEXT].site
  }

  setSite (site) {
    this[CONTEXT].site = site
  }

  getGroup () {
    return this[CONTEXT].group
  }

  setGroup (group) {
    this[CONTEXT].group = group
  }

  setBrowserCookies () {
    const { setToSubDomain, useUniversalName } = this.getCookiePolicy()

    if (this.getContextType() === ContextConfig.CONTEXT_TYPE.ONLINE) {
      const cookieDomain = !setToSubDomain && this.getDomain()
      const cookieName = useUniversalName
        ? {
            LANGUAGE: ContextConfig.UNIVERSAL_COOKIES.LANGUAGE,
            LOCALE: ContextConfig.UNIVERSAL_COOKIES.LOCALE,
            CURRENCY: ContextConfig.UNIVERSAL_COOKIES.CURRENCY
          }
        : {
            LANGUAGE: ContextConfig.COOKIE_LANGUAGE_KEY,
            LOCALE: ContextConfig.COOKIE_LOCALE_KEY,
            CURRENCY: ContextConfig.COOKIE_CURRENCY_KEY
          }

      this.clearCookie(cookieName.LANGUAGE)
      this.clearCookie(cookieName.LOCALE)
      this.clearCookie(cookieName.CURRENCY)

      this.setCookie(
        cookieName.LANGUAGE,
        this.getLanguage().toUpperCase(),
        cookieDomain
      )
      this.setCookie(
        cookieName.LOCALE,
        this.getLocale().toLowerCase().replace('-', '_'),
        cookieDomain
      )
      this.setCookie(
        cookieName.CURRENCY,
        this.getCurrency(),
        cookieDomain
      )
    } else {
      const cookieName = useUniversalName
        ? {
            SITE: ContextConfig.UNIVERSAL_COOKIES.SITE,
            GROUP: ContextConfig.UNIVERSAL_COOKIES.GROUP,
            LOCALE: ContextConfig.UNIVERSAL_COOKIES.LOCALE,
            LANGUAGE: ContextConfig.UNIVERSAL_COOKIES.LANGUAGE,
            CURRENCY: ContextConfig.UNIVERSAL_COOKIES.CURRENCY
          }
        : {
            SITE: ContextConfig.H5_COOKIES.SITE,
            GROUP: ContextConfig.H5_COOKIES.GROUP,
            LOCALE: ContextConfig.H5_COOKIES.LOCALE,
            LANGUAGE: ContextConfig.H5_COOKIES.LANGUAGE,
            CURRENCY: ContextConfig.H5_COOKIES.CURRENCY
          }

      this.setCookie(cookieName.SITE, this.getSite() || 'EN')
      this.setCookie(cookieName.GROUP, this.getGroup().toLowerCase() || 'trip')
      this.setCookie(cookieName.LOCALE, this.getLocale().toLowerCase())
      this.setCookie(cookieName.LOCALE, this.getLocale().toLowerCase(), this.getDomain())
      this.setCookie(cookieName.LANGUAGE, this.getLanguage().toLowerCase())
      this.setCookie(cookieName.CURRENCY, this.getCurrency().toUpperCase())
      // this.setCookie(cookieName.CURRENCY, this.getCurrency().toUpperCase(), this.getDomain())
      this.clearCookie(cookieName.CURRENCY, this.getDomain())
    }
  }

  select (keyName) {
    return new ContextQueryBuilder(keyName, this)
  }

  cookieResolver (resolver, cookieNameList, replaceValueFunc) {
    let result = false

    // eslint-disable-next-line array-callback-return
    cookieNameList.some(cookieName => {
      let cookieValue = this.parseCookies(cookieName)
      if (replaceValueFunc) {
        cookieValue = replaceValueFunc(cookieValue)
      }
      cookieValue = resolver.getNormalizedValue(cookieValue)
      if (cookieValue !== false) {
        result = cookieValue
        return true
      }
    })

    return result
  }

  [PARSE_CONTEXT_TYPE] (req, type) {
    if (req[REQ_CONTEXT_TYPE]) {
      if (ContextConfig.CONTEXT_TYPE.H5 === req[REQ_CONTEXT_TYPE] ||
        ContextConfig.CONTEXT_TYPE.ONLINE === req[REQ_CONTEXT_TYPE]) {
        return req[REQ_CONTEXT_TYPE]
      }
    } else if (type) {
      if (ContextConfig.CONTEXT_TYPE.H5 === type ||
        ContextConfig.CONTEXT_TYPE.ONLINE === type) {
        return type
      }
    }
    return ContextConfig.CONTEXT_TYPE.ONLINE
  }

  [PARSE] () {
    const host = this.getHeader(ContextConfig.HOST_KEY)
      .split(ContextConfig.SEPARATOR_HOST)[0]
    const site = cacheManager.getSiteByHost(host)
    const group = cacheManager.getGroupById(site && site.groupId)
    this.setHost(host)
    this.setSite((site && site.name) || '')
    this.setGroup((group && group.name) || '')

    this.setDomain(this[PARSE_DOMAIN]())

    this[PARSE_COOKIE_POLICY]()
    const { useUniversalName } = this.getCookiePolicy()

    if (this.getContextType() === ContextConfig.CONTEXT_TYPE.ONLINE) {
      this.setCurrency(this[PARSE_CURRENCY](useUniversalName))
      this.setLocale(this[PARSE_LOCALE](useUniversalName))
      this.setStrictLocale(this.getLocale())
      this.setLanguage(this[PARSE_LANGUAGE]())
    } else {
      this.setCurrency(this[PARSE_CURRENCY_H5](useUniversalName))
      this.setLocale(this[PARSE_LOCALE_H5](useUniversalName))
      this.setStrictLocale(this[PARSE_LOCALE_H5](useUniversalName, true))
      this.setLanguage(this[PARSE_LANGUAGE_H5]())
    }
  }

  [PARSE_COOKIE_POLICY] () {
    const { setToSubDomain, useUniversalName } = helpers.parseJson(
      new QueryBuilder(ContextConfig.KEY_NAME_COOKIE_POLICY)
        .system()
        .query()
    )

    this.setCookiePolicy({
      setToSubDomain: !!setToSubDomain,
      useUniversalName: !!useUniversalName
    })
  }

  [PARSE_DOMAIN] () {
    let findCookieDomain = false
    let cookieDomain = ''
    const host = this.getHost()

    if (!host) {
      return cookieDomain
    }

    const strDomain = new QueryBuilder(ContextConfig.KEY_NAME_COOKIE_DOMAIN)
      .system()
      .query()
    const domains = (is.string(strDomain) && strDomain.split(SEPARATOR)) || []
    for (const domain of domains) {
      if (host.endsWith(domain) && domain.length > cookieDomain.length) {
        cookieDomain = domain
        findCookieDomain = true
      }
    }

    if (!findCookieDomain) {
      log.warning('cookie domain not found', { host, domains })
      cookieDomain = ContextConfig.DEFAULT_DOMAIN
    }
    return cookieDomain
  }

  [PARSE_LANGUAGE] () {
    return (new QueryBuilder(ContextConfig.KEY_NAME_LOCALE_LANGUAGE)
      .locale(this.getLocale())
      .system()
      .query()) || ContextConfig.DEFAULT_LANGUAGE
  }

  [PARSE_LOCALE] (useUniversalName) {
    const resolver = new LocaleResolver(
      this.getGroup(),
      this.getSite(),
      ContextConfig.CONTEXT_TYPE.ONLINE
    )

    let locale = this.parseQueryString(ContextConfig.QUERY_STRING_LOCALE_KEY).replace('_', '-')
    locale = resolver.getNormalizedValue(locale)
    if (locale !== false) return locale

    locale = this.getHeader(ContextConfig.HEADER_LOCALE_KEY).replace('_', '-')
    locale = resolver.getNormalizedValue(locale)
    if (locale !== false) return locale

    // read cookie order by useUniversalName
    locale = useUniversalName
      ? this.cookieResolver(resolver, [ContextConfig.UNIVERSAL_COOKIES.LOCALE, ContextConfig.COOKIE_LOCALE_KEY, ContextConfig.H5_COOKIES.LOCALE], v => v.replace('_', '-'))
      : this.cookieResolver(resolver, [ContextConfig.COOKIE_LOCALE_KEY, ContextConfig.H5_COOKIES.LOCALE, ContextConfig.UNIVERSAL_COOKIES.LOCALE], v => v.replace('_', '-'))
    if (locale !== false) return locale

    return resolver.getDefault()
  }

  [PARSE_CURRENCY] (useUniversalName) {
    const resolver = new CurrencyResolver(
      this.getGroup(),
      this.getSite(),
      ContextConfig.CONTEXT_TYPE.ONLINE
    )

    let currency = this.parseQueryString(ContextConfig.QUERY_STRING_CURRENCY_KEY)
    currency = resolver.getNormalizedValue(currency)
    if (currency !== false) return currency

    currency = this.parseQueryString(ContextConfig.QUERY_STRING_CURRENCY_KEY_ALIAS)
    currency = resolver.getNormalizedValue(currency)
    if (currency !== false) return currency

    currency = this.getHeader(ContextConfig.HEADER_CURRENCY_KEY)
    currency = resolver.getNormalizedValue(currency)
    if (currency !== false) return currency

    // read cookie order by useUniversalName
    currency = useUniversalName
      ? this.cookieResolver(resolver, [ContextConfig.UNIVERSAL_COOKIES.CURRENCY, ContextConfig.COOKIE_CURRENCY_KEY])
      : this.cookieResolver(resolver, [ContextConfig.COOKIE_CURRENCY_KEY, ContextConfig.UNIVERSAL_COOKIES.CURRENCY])
    if (currency !== false) return currency

    return resolver.getDefault()
  }

  [PARSE_LANGUAGE_H5] () {
    return helpers.convertLocale2H5Language(this.getLocale())
  }

  [PARSE_LOCALE_H5] (useUniversalName, h5UseSiteForce) {
    const resolver = new LocaleResolver(
      this.getGroup(),
      this.getSite(),
      ContextConfig.CONTEXT_TYPE.H5,
      h5UseSiteForce
    )

    // header LOCALE=...
    let locale = this.getHeader(ContextConfig.HEADER_LOCALE_KEY).replace('_', '-')
    locale = resolver.getNormalizedValue(locale)
    if (locale !== false) return locale

    // ?locale=...
    locale = this.parseQueryString(ContextConfig.QUERY_STRING_LOCALE_KEY).replace('_', '-')
    locale = resolver.getNormalizedValue(locale)
    if (locale !== false) return locale

    // ?language=...
    locale = helpers.convertH5Language2Locale(
      this.parseQueryString(ContextConfig.QUERY_STRING_LANGUAGE_KEY)
    )
    locale = resolver.getNormalizedValue(locale)
    if (locale !== false) return locale

    // ?lang=...
    locale = helpers.convertH5Language2Locale(
      this.parseQueryString(ContextConfig.QUERY_STRING_LANGUAGE_KEY_ALIAS)
    )
    locale = resolver.getNormalizedValue(locale)
    if (locale !== false) return locale

    // read cookie order by useUniversalName
    locale = useUniversalName
      ? this.cookieResolver(resolver, [ContextConfig.UNIVERSAL_COOKIES.LOCALE, ContextConfig.H5_COOKIES.LOCALE], v => v.replace('_', '-'))
      : this.cookieResolver(resolver, [ContextConfig.H5_COOKIES.LOCALE, ContextConfig.UNIVERSAL_COOKIES.LOCALE], v => v.replace('_', '-'))
    if (locale !== false) return locale

    return resolver.getDefault()
  }

  [PARSE_CURRENCY_H5] (useUniversalName) {
    const resolver = new CurrencyResolver(
      this.getGroup(),
      this.getSite(),
      ContextConfig.CONTEXT_TYPE.H5
    )

    let currency = this.getHeader(ContextConfig.HEADER_CURRENCY_KEY)
    currency = resolver.getNormalizedValue(currency)
    if (currency !== false) return currency

    currency = this.parseQueryString(ContextConfig.QUERY_STRING_CURRENCY_KEY)
    currency = resolver.getNormalizedValue(currency)
    if (currency !== false) return currency

    currency = this.parseQueryString(ContextConfig.QUERY_STRING_CURRENCY_KEY_ALIAS)
    currency = resolver.getNormalizedValue(currency)
    if (currency !== false) return currency

    // read cookie order by useUniversalName
    currency = useUniversalName
      ? this.cookieResolver(resolver, [ContextConfig.UNIVERSAL_COOKIES.CURRENCY, ContextConfig.H5_COOKIES.CURRENCY, ContextConfig.COOKIE_CURRENCY_KEY])
      : this.cookieResolver(resolver, [ContextConfig.H5_COOKIES.CURRENCY, ContextConfig.COOKIE_CURRENCY_KEY, ContextConfig.UNIVERSAL_COOKIES.CURRENCY])
    if (currency !== false) return currency

    return resolver.getDefault()
  }
}

module.exports = CargoContext

'use strict'
const Resolver = require('./resolver')
const { DEFAULT_LOCALE, CONTEXT_TYPE } = require('../context-config')
const cacheManager = require('../../cache')
const { QueryBuilder } = require('../../query')
const { INTERNAL_BOOLEAN_KEYS } = require('../../common/constants')
const { H5_SUPPORTED_LOCALE, ONLINE_SUPPORTED_LOCALE } = INTERNAL_BOOLEAN_KEYS

class LocaleResolver extends Resolver {
  getGlobalDefault () {
    return DEFAULT_LOCALE
  }

  getSupportedValues (h5UseSiteForce) {
    // ONLINE下支持的语种与GROUP,SITE相关
    // H5只和GROUP相关,h5UseSiteForce=true时H5也过滤SITE
    let builder = null
    if (this.contextType === CONTEXT_TYPE.ONLINE) {
      builder = new QueryBuilder(ONLINE_SUPPORTED_LOCALE)
        .system()
        .group(this.groupName)
        .site(this.siteName)
    } else {
      builder = new QueryBuilder(H5_SUPPORTED_LOCALE)
        .system()
        .group(this.groupName)

      if (h5UseSiteForce) {
        builder = builder.site(this.siteName)
      }
    }

    return builder
      .queryList()
      .filter(item => item.value !== '0')
      .map(item => {
        const locale = cacheManager.getLocaleById(item.localeId)
        return locale && locale.name
      })
      .filter(Boolean)
  }

  getRecommendValues () {
    // ONLINE_SUPPORTED_LOCALE/H5_SUPPORTED_LOCALE中的第一项作为当前站点的默认locale
    const key = this.contextType === CONTEXT_TYPE.ONLINE
      ? ONLINE_SUPPORTED_LOCALE
      : H5_SUPPORTED_LOCALE

    return new QueryBuilder(key)
      .system()
      .group(this.groupName)
      .site(this.siteName)
      .queryList()
      .filter(item => item.value !== '0')
      .map(item => {
        const locale = cacheManager.getLocaleById(item.localeId)
        return locale && locale.name
      })
      .filter(Boolean)
  }
}

module.exports = LocaleResolver

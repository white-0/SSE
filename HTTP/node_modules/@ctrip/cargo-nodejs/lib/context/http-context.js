'use strict'
const url = require('url')
const is = require('is-type-of')
const cookie = require('cookie')
const REQ = Symbol('CARGO#REQUEST')
const RES = Symbol('CARGO#RESPONSE')

class HttpContext {
  constructor (req, res) {
    this[REQ] = req
    this[RES] = res
    this.cookies = null
    this.queries = null
    this.path = null
  }

  /**
   * 获取某项http header
   * @param {String} key
   * @return {String}
   */
  getHeader (key) {
    key = key || ''
    const headers = (this[REQ] && this[REQ].headers) || {}
    return headers[key.toLowerCase()] || ''
  }

  /**
   * parse useful cookies
   * @param {String} cookieName
   * @return {String}
   */
  parseCookies (cookieName) {
    let cookies
    if (is.object(this.cookies)) {
      cookies = this.cookies
    } else if (!this[REQ].cookies || !is.object(this[REQ].cookies)) {
      // parse native cookies
      const cookieStr = this[REQ].headers.cookie
      if (cookieStr) {
        cookies = cookie.parse(cookieStr)
      }
      this.cookies = cookies
    } else {
      // use express this[REQ].cookies method
      cookies = this[REQ].cookies
    }
    return (cookies && cookies[cookieName]) || ''
  }

  /**
   * set cookies
   * @param {Array} cookieName
   * @param {String} value
   * @param {String} domain
   * @param {Number} maxAge
   * @param {String} path
   */
  setCookie (cookieName, value, domain, maxAge, path) {
    const option = {}
    if (domain) {
      option.domain = domain
    }
    option.path = path || '/'
    option.maxAge = maxAge || 2592000
    if (this[RES].cookie) {
      option.maxAge *= 1000
      this[RES].cookie(cookieName, value, option)
    } else if (this[RES].setHeader && this[RES].getHeader) {
      this.appendHeader('Set-Cookie', cookie.serialize(cookieName, value, option))
    } else {
      // set cookie error
    }
  }

  /**
   * clear cookies on current domain
   *
   * @param {string} cookieName
   * @param {string} domain
   * @param {string} path
   * @return {void}
   */
  clearCookie (cookieName, domain, path) {
    const options = {}
    if (domain) {
      options.domain = domain
    }
    options.path = path || '/'

    if (is.function(this[RES].clearCookie)) {
      this[RES].clearCookie(cookieName, options)
      return
    }

    options.expires = new Date(0)
    this.appendHeader('Set-Cookie', cookie.serialize(cookieName, '', options))
  }

  /**
   * append Header
   */
  appendHeader (field, val) {
    let value = val
    const prev = this[RES].getHeader(field)

    if (prev) {
      // concat the new and prev vals
      value = is.array(prev)
        ? prev.concat(val)
        : is.array(val)
          ? [prev].concat(val)
          : [prev, val]
    }

    return this[RES].setHeader(field, value)
  }

  /**
   * parse useful query strings
   * @param {String} name
   * @return {String}
   */
  parseQueryString (qsName) {
    if (this.queries) {
      return this.queries[qsName] || ''
    }
    const urlString = (this[REQ].url && this[REQ].url.toLowerCase()) || ''
    // eslint-disable-next-line n/no-deprecated-api
    const qs = url.parse(urlString, true).query
    this.queries = qs
    for (const key in this.queries) {
      if (is.array(this.queries[key])) {
        this.queries[key] = this.queries[key][0]
      }
    }
    return (qs && qs[qsName]) || ''
  }
}

module.exports = HttpContext

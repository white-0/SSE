'use strict'
const fs = require('fs')
const path = require('path')
const appConfig = require('@ctrip/node-vampire-appconfig')
const LogLevel = require('../log/log-level')

function isExists (dir) {
  try {
    fs.accessSync(dir)
    return true
  } catch (e) {
    return false
  }
}

function getServerEnv (serverSettings) {
  const storage = `/opt/data/${appConfig.AppID || '0'}/cargo-store`
  const filePath = path.dirname(storage)
  const exist = isExists(filePath)
  if (!exist) {
    try {
      fs.mkdirSync(filePath, { recursive: true })
    } catch (e) {
      // CI 镜像内可能无权限创建目录，此处忽略错误
      // throw new Error(`mkdir ${filePath} failed`)
    }
  }

  try {
    const serverSettings = fs.readFileSync('/opt/settings/server.properties', 'utf-8')

    // env 可能会匹配到subenv的值,当存在subenv时env一定是fat环境
    let env = serverSettings.match(/env=(.*)/)
    if (!env || [
      'fat', 'fws', 'lpt', 'dev',
      'pro', 'prod', 'prd', 'uat'
    ].indexOf(env[1].toLowerCase()) === -1) {
      env = 'fat'
    } else {
      env = env[1]
    }

    let idc = serverSettings.match(/idc=(.*)/)
    if (!idc) {
      idc = ''
    } else {
      idc = idc[1]
    }

    let subEnv = serverSettings.match(/subenv=(.*)/i)
    if (!subEnv) {
      subEnv = ''
    } else {
      subEnv = subEnv[1]
    }

    let corp = serverSettings.match(/corp=(.*)/i)
    if (!corp) {
      corp = 'CTRIP'
    } else {
      corp = corp[1]
    }

    return {
      env,
      idc,
      subEnv,
      corp,
      storage
    }
  } catch (e) {
    return {
      env: 'FAT',
      idc: '',
      subEnv: '',
      corp: 'CTRIP',
      storage
    }
  }
}

function getIPAddress () {
  const interfaces = require('os').networkInterfaces()
  for (const devName in interfaces) {
    const iface = interfaces[devName]
    for (let i = 0; i < iface.length; i++) {
      const alias = iface[i]
      if (alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal) {
        return alias.address
      }
    }
  }
}

function getDefaultLogLevel () {
  if (appConfig.Env === 'prod') {
    return LogLevel.ERROR
  }
  return LogLevel.WARNING
}

module.exports = {
  appId: appConfig.AppID,
  env: appConfig.Env,
  serverEnv: getServerEnv(),
  ip: getIPAddress(),
  logLevel: getDefaultLogLevel(),
  killed: false
}

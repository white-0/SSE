const is = require('is-type-of')
const cacheManager = require('../cache')
const helpers = require('../common/helpers')
const { INTERNAL_BOOLEAN_KEYS } = require('../common/constants')
const { DEFAULT_CURRENCY } = require('../context/context-config')
const Foundation = require('../common/foundation')
const log = require('../log')

const { ONLINE_SUPPORTED_LOCALE, TOP_CURRENCY } = INTERNAL_BOOLEAN_KEYS

const DEFAULT_LOCALE = 'en-XX'
const DEFAULT_SITE = 'EN'
const DEFAULT_GROUP = 'Trip'

const ILLEGAL_ARG = (...rest) => `IllegalArgument:${rest.join()}`
const DEFAULT_DOMAIN = (...rest) => `DefaultDomain:${rest.join()}`
const formatLocale = locale => {
  if (/^[a-z]{2}(-|_)[a-z]{2}$/i.test(locale)) {
    return `${locale.substr(0, 2).toLowerCase()}-${locale.substr(3, 5).toUpperCase()}`
  }
}

/**
 * @param {import('../cargo')} cargo cargo instance
 */
module.exports = cargo => {
  cargo.getLocaleSites = (localeName, groupName = 'Trip') => {
    return cargo.select(ONLINE_SUPPORTED_LOCALE)
      .system()
      .group(groupName)
      .locale(localeName)
      .queryList()
      .filter(item => item.value !== '0')
      .map(item => cacheManager.getSiteById(item.siteId))
      .filter(item => item !== null)
      .map(site => {
        return {
          name: site.name,
          host: helpers.getHostByEnv(site.hosts)
        }
      })
  }

  cargo.getDefaultDomainByLocale = (groupName, localeName, subEnv) => {
    const domainResult = {
      isDefault: false,
      message: ''
    }

    // format locale
    let locale = formatLocale(localeName)

    // if locale is invalid, assign default locale
    if (!locale) {
      domainResult.isDefault = true
      domainResult.message = ILLEGAL_ARG(groupName, localeName)
      locale = DEFAULT_LOCALE

      log.warning('get default domain', {
        groupName,
        localeName,
        subEnv,
        message: domainResult.message
      })
    }

    // query support locale list
    let domainList = cargo.getLocaleSites(locale, groupName)

    if (domainList && domainList.length) {
      domainResult.domain = domainList[0].host
    } else {
      // use default locale
      domainList = cargo.getLocaleSites(DEFAULT_LOCALE, groupName)

      // throw error when default locale return invalid domain
      if (!domainList || !domainList.length) {
        throw new Error('default value is invalid!')
      }

      domainResult.domain = domainList[0].host
      domainResult.isDefault = true
      domainResult.message = domainResult.message || DEFAULT_DOMAIN(groupName, localeName)

      log.warning('get default domain', {
        groupName,
        localeName,
        subEnv,
        message: domainResult.message
      })
    }

    // replace subEnv if necessary in FAT(fat, fws, lpt, dev)
    if (['fat', 'fws', 'lpt', 'dev'].includes(Foundation.serverEnv.env.toLowerCase()) && subEnv && is.isString(subEnv)) {
      domainResult.domain = domainResult.domain.replace(/\.(.+?)\./, `.${subEnv}.`)
    }

    return domainResult
  }

  cargo.getDefaultLocaleByDomain = (domain) => {
    const localeResult = {
      locale: DEFAULT_LOCALE,
      isDefault: true,
      message: ''
    }

    if (domain) {
      const siteList = cargo.getSites()

      if (siteList && siteList.length) {
        const site = siteList.find(s => (s.hosts || []).includes(domain))
        if (site && site.name) {
          const localeList = cargo
            .select(ONLINE_SUPPORTED_LOCALE)
            .system()
            .queryExtendList()
            .filter(v => v.value !== '0' && v.site && v.site.name === site.name && v.locale && v.locale.name)
          if (localeList && localeList.length) {
            localeResult.locale = localeList[0].locale.name
            localeResult.isDefault = false
          }
        }
      }
    }

    if (localeResult.isDefault) {
      localeResult.message = ILLEGAL_ARG(domain)

      log.warning('get default locale', {
        domain,
        message: localeResult.message
      })
    }

    return localeResult
  }

  cargo.getDefaultSiteByLocale = (groupName, localeName) => {
    // format locale
    const locale = formatLocale(localeName)
    const group = cargo.getGroup(groupName)

    // if group or locale is invalid, return default site
    if (!locale || !group) {
      return cargo.getSite(DEFAULT_GROUP, DEFAULT_SITE).name
    }

    let dataValues = cargo
      .select(ONLINE_SUPPORTED_LOCALE)
      .system()
      .group(group)
      .locale(locale)
      .queryExtendList()
      .filter(v => v.value !== '0' && v.locale && v.locale.name === locale)

    if (dataValues && dataValues.length) {
      return dataValues[0].site.name
    }

    // return defaultLocale's site
    dataValues = cargo
      .select(ONLINE_SUPPORTED_LOCALE)
      .system()
      .group(group)
      .locale(DEFAULT_LOCALE)
      .queryExtendList()
      .filter(v => v.value !== '0' && v.locale && v.locale.name === locale)

    if (dataValues && dataValues.length) {
      return dataValues[0].site.name
    }

    return cargo.getSite(DEFAULT_GROUP, DEFAULT_SITE).name
  }

  cargo.getDefaultCurrencyBySite = (groupName, siteName) => {
    // if group is invalid return default currency
    if (!cargo.getSite(groupName, siteName)) {
      return cargo.getCurrency(DEFAULT_CURRENCY)
    }

    const dataValues = cargo
      .select(TOP_CURRENCY)
      .system()
      .group(groupName)
      .site(siteName)
      .queryExtendList()
      .filter(v => v.value === '1')

    if (dataValues && dataValues.length) {
      return dataValues[0].currency.name
    }

    // return defaultSite's site
    return cargo.getCurrency(DEFAULT_CURRENCY)
  }

  cargo.getDefaultCurrencyByLocale = (groupName, localeName) => {
    const site = cargo.getDefaultSiteByLocale(groupName, localeName)
    if (site) {
      return cargo.getDefaultCurrencyBySite(groupName, site)
    }
    return cargo.getCurrency(DEFAULT_CURRENCY)
  }
}

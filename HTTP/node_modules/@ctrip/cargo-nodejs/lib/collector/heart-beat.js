'use strict'
const HeartBeatStore = require('./heart-beat-store')
const Foundation = require('../common/foundation')
const { SDK_VERSION, DATA_SOURCE } = require('../common/constants')
const ConfigType = require('../common/config-type')
const { parseJson } = require('../common/helpers')
const HeartBeatConfig = require('./heart-beat-config')
const soaClient = require('../service/soa-client')
const log = require('../log')

const STORE = Symbol('CARGO#HEARTBEAT_STORE')
const HEARTBEAT_RUNNER = Symbol('CARGO#HEARBEAT_RUNNER')
const SEND_HEARTBEAT = Symbol('CARGO#SEND_HEARTBEAT')

class HeartBeat {
  constructor () {
    this[STORE] = new HeartBeatStore(
      Foundation.appId,
      SDK_VERSION,
      HeartBeatConfig.HEART_BEAT_INTERVAL,
      DATA_SOURCE
    )
  }

  start () {
    log.info('heartbeat start', this[STORE])
    this[HEARTBEAT_RUNNER](HeartBeatConfig.HEART_BEAT_INTERVAL)
  }

  collect (dataId, dataType) {
    this[STORE].add(dataId, dataType)
  }

  [HEARTBEAT_RUNNER] (timeout) {
    if (Foundation.killed) {
      return
    }

    const cacheManager = require('../cache')
    return setTimeout(() => {
      if (Foundation.killed) {
        return
      }

      this[SEND_HEARTBEAT]().then(status => {
        let nextTimeout = timeout
        const heartBeatCache = cacheManager.getConfig(ConfigType.HEART_BEAT)

        if (heartBeatCache !== null) {
          const config = parseJson(heartBeatCache.config)
          if (config && config.interval) {
            nextTimeout = config.interval
          }
        }

        if (status === HeartBeatConfig.HEART_BEAT_ERROR) {
          log.warning('send heartbeat error', { nextTimeout })
        } else if (status === HeartBeatConfig.HEART_BEAT_EMPTY) {
          log.debug('hearbeat package empty', { nextTimeout })
        } else {
          log.debug('send hearbeat success', { nextTimeout })
        }

        return nextTimeout
      }).then(nextTimeout => {
        this[STORE].renewInterval(nextTimeout)
        this[HEARTBEAT_RUNNER](nextTimeout)
      })
    }, timeout)
  }

  [SEND_HEARTBEAT] () {
    const cacheManager = require('../cache')
    if (this[STORE].getDataSize() === 0) {
      return Promise.resolve(HeartBeatConfig.HEART_BEAT_EMPTY)
    }
    const latestCacheVersion = cacheManager.getCurrentCacheVersion()
    const heartBeatStore = this[STORE].outputStore(latestCacheVersion)
    return soaClient.sendHeartBeat(heartBeatStore)
      .then(() => HeartBeatConfig.HEART_BEAT_SUCCESS)
      .catch(() => HeartBeatConfig.HEART_BEAT_ERROR)
  }
}

module.exports = HeartBeat

const CONFIG = {
  HTML_DATA_ATTRIBUTE_NAME: 'data-cargo',
  H5: 'h5',
  ONLINE: 'online',
  // http://git.dev.sh.ctripcorp.com/ibu-framework/ibu-uaparser-sdk/-/blob/master/lib/constants.js
  PADS: ['ipad', 'playbook', 'tablet'],
  MOBILES: ['mobile', 'iphone', 'android', 'phone', 'wap', 'opera', 'opera mini', 'ucweb', 'windows ce', 'symbian', 'series', 'webos', 'sony', 'blackberry', 'dopod', 'nokia', 'samsung', 'palmsource', 'meizu', 'midp', 'cldc', 'motorola'],
  ENV_LIST: [
    {
      value: 'sandbox',
      keywords: ['sandbox']
    }, {
      value: 'fws',
      keywords: ['fws', 'fat', 'dev']
    }, {
      value: 'uat',
      keywords: ['uat']
    }, {
      value: 'lpt',
      keywords: ['lpt']
    }
  ]
}

const CONTEXT_NAME = {
  LOCALE: 'locale',
  LANGUAGE: 'language',
  CURRENCY: 'currency',
  SITE: 'site',
  GROUP: 'group',
  CONTEXT_TYPE: 'contextType'
}

const getCargoContext = function (name) {
  const cargoContext = {}
  const attributeValue = window.document.getElementsByTagName('html')[0].getAttribute(CONFIG.HTML_DATA_ATTRIBUTE_NAME) || ''
  attributeValue.split(',').forEach(attr => {
    const attrs = attr.split(':')
    if (attrs.length === 2) {
      cargoContext[attrs[0]] = attrs[1]
    }
  })
  return name
    ? (cargoContext[name] || '')
    : cargoContext
}

const setCargoContext = function (name, value) {
  if (name && value) {
    const cargoContext = getCargoContext()
    cargoContext[name] = value
    window.document.getElementsByTagName('html')[0].setAttribute(
      CONFIG.HTML_DATA_ATTRIBUTE_NAME,
      Object.entries(cargoContext).map(v => v.join(':')).join()
    )
  }
}

const getCookie = function (name) {
  let value = ''
  if (name) {
    value = `; ${window.document.cookie}`.split(`; ${name}=`).pop().split(';')[0]
  }
  return value
}

const getClientType = function () {
  const ua = (window.navigator.userAgent || '').toLowerCase()
  if (!ua) {
    return CONFIG.ONLINE
  }

  // isMobile && !iPad && !androidPad
  return CONFIG.MOBILES.some(item => ua.indexOf(item) !== -1) &&
  !CONFIG.PADS.some(item => ua.indexOf(item) !== -1) &&
  (!/android/.test(ua) || /mobile/.test(ua))
    ? CONFIG.H5
    : CONFIG.ONLINE
}

const isH5 = function (contextType) {
  const _contextType = contextType || getCargoContext(CONTEXT_NAME.CONTEXT_TYPE)
  if (_contextType) {
    return _contextType.toLowerCase() === CONFIG.H5
  }

  if (getClientType() === CONFIG.H5) {
    return true
  }

  const pathSplit = window.location.pathname.split('/')
  return pathSplit[1] === 'm'
}

const normalizeLocale = function (locale) {
  if (/^[a-z]{2}(-|_)[a-z]{2}$/i.test(locale)) {
    const locales = locale.match(/[a-z]{2}/gi)
    return `${locales[0].toLowerCase()}-${locales[1].toUpperCase()}`
  }
}

const cargo = {
  getLocale: function (contextType, ignoreLangAttr) {
    let locale = normalizeLocale(getCargoContext(CONTEXT_NAME.LOCALE))

    if (!locale && !ignoreLangAttr) {
      locale = normalizeLocale(window.document.getElementsByTagName('html')[0].getAttribute('lang'))
    }

    if (!locale) {
      if (isH5(contextType)) {
        // h5
        locale = normalizeLocale(getCookie('ibu_h5_local'))
      } else {
        // online
        locale = normalizeLocale(getCookie('ibulocale') || getCookie('ibu_h5_local'))
      }
    }

    return locale || ''
  },
  setLocale: function (value) {
    const locale = normalizeLocale(value)
    if (locale) {
      setCargoContext(CONTEXT_NAME.LOCALE, locale)
    }
  },
  getLanguage: function (contextType) {
    let language = getCargoContext(CONTEXT_NAME.LANGUAGE)

    if (!language) {
      if (isH5(contextType)) {
        // h5
        language = getCookie('ibu_h5_lang')
      } else {
        // online
        language = getCookie('ibulanguage')
      }
    }

    return (language || '').toLowerCase()
  },
  setLanguage: function (value) {
    if (value && /^([a-z]{2}){1,2}$/i.test(value)) {
      setCargoContext(CONTEXT_NAME.LANGUAGE, value.toLowerCase())
    }
  },
  getCurrency: function (contextType) {
    let currency = getCargoContext(CONTEXT_NAME.CURRENCY)

    if (!currency) {
      if (isH5(contextType)) {
        // h5
        currency = getCookie('ibu_h5_curr') || getCookie('cookiePricesDisplayed')
      } else {
        // online
        currency = getCookie('cookiePricesDisplayed')
      }
    }

    return (currency || '').toUpperCase()
  },
  setCurrency: function (value) {
    if (value && /^[a-z]{3}$/i.test(value)) {
      setCargoContext(CONTEXT_NAME.CURRENCY, value.toUpperCase())
    }
  },
  getSite: function () {
    let site = getCargoContext(CONTEXT_NAME.SITE)
    if (!site) {
      site = getCookie('ibu_h5_site')
    }
    return (site || '').toUpperCase()
  },
  setSite: function (value) {
    if (value && /^[a-z]{2}$/i.test(value)) {
      setCargoContext(CONTEXT_NAME.SITE, value.toUpperCase())
    }
  },
  getGroup: function () {
    let group = getCargoContext(CONTEXT_NAME.GROUP)
    if (!group) {
      group = getCookie('ibu_h5_group')
    }
    return group || ''
  },
  setGroup: function (value) {
    if (value) {
      setCargoContext(CONTEXT_NAME.GROUP, value)
    }
  },
  getContextType: function () {
    return isH5() ? CONFIG.H5 : CONFIG.ONLINE
  },
  setContextType: function (value) {
    if (value && [CONFIG.H5, CONFIG.ONLINE].includes(value.toLowerCase())) {
      setCargoContext(CONTEXT_NAME.CONTEXT_TYPE, value.toLowerCase())
    }
  },
  getEnv: function () {
    let env = 'prod'
    const hostname = window.location.hostname || window.location.host

    CONFIG.ENV_LIST.forEach(v => {
      v.keywords.forEach(keyword => {
        if (hostname.indexOf(keyword) > -1) {
          env = v.value
          return true
        }
      })

      if (env) {
        return true
      }
    })

    return env
  }
}

if (typeof window !== 'undefined') {
  window.cargo = cargo
}

module.exports = cargo

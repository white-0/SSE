'use strict'
const pm2 = require('@ctrip/node-vampire-pm2')
const colors = require('colors/safe')
const Logger = require('../logger')

class DevLogger extends Logger {
  get enabledEnv () {
    return ['dev', 'fws', 'uat', 'lpt']
  }

  set enabledEnv (arg) {
    throw new Error('readonly property')
  }

  common () {
    const common = [colors.green('[cargo3]')]
    common.push(colors.green(pm2.isMaster ? '<master>' : '<slave>'))
    return common.join(' ')
  }

  parseArgs (args) {
    // if (is.string(args) || is.number(args)) {
    //   return args
    // } else if (is.array(args)) {
    //   return args.map(arg => this.parseArgs(arg)).join(' | ')
    // } else if (is.error(args)) {
    //   return `${args.toString()}\n${args.stack}`
    // } else if (is.object(args)) {
    //   const values = []
    //   for (const k in args) {
    //     let value = args[k]
    //     if (is.object(value)) {
    //       value = JSON.stringify(args[k])
    //     }
    //     values.push(`${k} => ${value}`)
    //   }
    //   return values.join(', ')
    // }
  }

  debug (args) {
    const logs = this.parseArgs(args)
    if (!logs) {
      return
    }
    const output = this.common() + colors.cyan(' DEBUG ') + logs
    console.log(output)
  }

  info (args) {
    const logs = this.parseArgs(args)
    if (!logs) {
      return
    }
    const output = this.common() + colors.green(' INFO ') + logs
    console.log(output)
  }

  warning (args) {
    const logs = this.parseArgs(args)
    if (!logs) {
      return
    }
    const output = this.common() + colors.yellow(' WARNING ') + logs
    console.log(output)
  }

  error (args) {
    const logs = this.parseArgs(args)
    if (!logs) {
      return
    }
    const output = this.common() + colors.red(' ERROR ') + logs
    console.log(output)
  }
}

module.exports = new DevLogger()

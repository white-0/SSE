'use strict'
const is = require('is-type-of')
const pm2 = require('@ctrip/node-vampire-pm2')
const { tripLog } = require('@ctrip/node-vampire-triplog')
const Logger = require('../logger')
const { SDK_VERSION } = require('../../common/constants')

const ES_INDEX = 'ibu-common'
const MODULE = 'cargo-nodejs-3'
const MAX_ERRORCODETEXT_LENGTH = 50

class EsLogger extends Logger {
  get enabledEnv () {
    return ['fws', 'prod']
  }

  set enabledEnv (arg) {
    throw new Error('readonly property')
  }

  sendLog (ack, type, args) {
    const indexedTags = {
      module: MODULE,
      ack, // 0-error, 1-warning
      errorcode: 0,
      errorcodetext: ''
    }
    const messages = [
      'version: ' + SDK_VERSION,
      'role:' + (pm2.isMaster ? 'master' : 'slave')
    ]

    for (const arg of args) {
      if (is.isArray(arg)) {
        messages.push(JSON.stringify(arg))
      } else if (is.isError(arg)) {
        messages.push(arg.toString())
        messages.push(arg.stack)
      } else if (is.isObject(arg)) {
        if (arg.errorcode) {
          indexedTags.errorcode = args.errorcode
          delete arg.errorcode
        }
        messages.push(JSON.stringify(arg))
      } else if (is.isString(arg)) {
        if (arg.length < MAX_ERRORCODETEXT_LENGTH) {
          indexedTags.errorcodetext = arg
        }
        messages.push(arg)
      } else {
        messages.push(String(arg))
      }
    }

    tripLog.custom({
      type,
      title: ES_INDEX,
      message: messages.join(' | '),
      addInfo: indexedTags
    })
  }

  info (args) {
    // do nothing
  }

  warning (args) {
    this.sendLog(1, 'warn', args)
  }

  error (args) {
    this.sendLog(0, 'error', args)
  }
}

module.exports = new EsLogger()

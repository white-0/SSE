'use strict'
const writeFileAtomic = require('write-file-atomic')
const pm2 = require('@ctrip/node-vampire-pm2')
const CacheManager = require('./cache-manager')
const { Message, MAX_INITIAL_TIME } = require('./cache-config')
const log = require('../log')
const Foundation = require('../common/foundation')

const CHANNEL_CACHE = Symbol.for('CARGO#CAHNNEL_CACHE')
const CONFIG_CACHE = Symbol.for('CARGO#CONFIG_CACHE')
const CURRENCY_CACHE = Symbol.for('CARGO#CURRENCY_CACHE')
const DATA_CACHE = Symbol.for('CARGO#DATA_CACHE')
const DATA_WHITELIST_CACHE = Symbol.for('CARGO#DATA_WHITELIST_CACHE')
const GROUP_CACHE = Symbol.for('CARGO#GROUP_CACHE')
const KEY_CACHE = Symbol.for('CARGO#KEY_CACHE')
const LOCALE_CACHE = Symbol.for('CARGO#LOCALE_CACHE')
const SITE_CACHE = Symbol.for('CARGO#SITE_CACHE')
const SOURCE_CACHE = Symbol.for('CARGO#SOURCE_CACHE')
const SWITCH_CACHE = Symbol.for('CARGO#SWITCH_CACHE')

const INIT = Symbol.for('CARGO#INIT')

class CacheManagerMaster extends CacheManager {
  [INIT] () {
    let initFromLocalFile = false
    const initCacheManager = () => this[CONFIG_CACHE].init()
      .then(() => Promise.all([
        this[DATA_CACHE].init(),
        this[DATA_WHITELIST_CACHE].init(),
        this[CHANNEL_CACHE].init(),
        this[CURRENCY_CACHE].init(),
        this[GROUP_CACHE].init(),
        this[KEY_CACHE].init(),
        this[LOCALE_CACHE].init(),
        this[SITE_CACHE].init(),
        this[SOURCE_CACHE].init(),
        this[SWITCH_CACHE].init()
      ]))

    return Promise.race([
      initCacheManager(),
      this.initTimeout(MAX_INITIAL_TIME)
    ]).catch((e) => {
      log.warning('client-cache init from server error', e)
      initFromLocalFile = true
      return this.getLocalFileData()
    }).then(() => {
      const cacheData = {
        configCache: this[CONFIG_CACHE].getCache(),
        dataCache: this[DATA_CACHE].getCache(),
        dataWhiteListCache: this[DATA_WHITELIST_CACHE].getCache(),
        channelCache: this[CHANNEL_CACHE].getCache(),
        currencyCache: this[CURRENCY_CACHE].getCache(),
        groupCache: this[GROUP_CACHE].getCache(),
        keyCache: this[KEY_CACHE].getCache(),
        localeCache: this[LOCALE_CACHE].getCache(),
        siteCache: this[SITE_CACHE].getCache(),
        sourceCache: this[SOURCE_CACHE].getCache(),
        switchCache: this[SWITCH_CACHE].getCache()
      }
      pm2.broadcast(Message.INIT, cacheData)
      if (!initFromLocalFile) {
        this.setLocalFileData(cacheData)
      }
      log.info('client-cache init success')
    }).catch((e) => {
      log.error('client-cache init error', e)
      process.exit(0)
    })
  }

  setLocalFileData (data) {
    const fileName = Foundation.serverEnv.storage
    const rawData = JSON.stringify(data)
    writeFileAtomic(fileName, rawData, 'utf8', (err) => {
      if (err) {
        log.warning('fail to save cache data to local file', err)
        return
      }
      log.info('save cache data to local file success')
    })
  }
}

module.exports = CacheManagerMaster

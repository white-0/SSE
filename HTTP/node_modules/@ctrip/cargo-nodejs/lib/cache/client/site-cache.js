'use strict'
const is = require('is-type-of')
const CacheConfig = require('../cache-config')
const ConfigType = require('../../common/config-type')
const DataType = require('../../common/data-type')
const { SEPARATOR } = require('../../common/constants')
const CacheEntry = require('../base-cache-entry')
const generateCacheKey = require('../method/generate-cache-key')
const AbstractCache = require('./abstract-cache')
const soaClient = require('../../service/soa-client')

class SiteCache extends AbstractCache {
  constructor () {
    super(
      CacheConfig.ClientCacheName.SITE,
      ConfigType.SITE
    )
  }

  load () {
    if (this.isFirstLoad) {
      this.isFirstLoad = false
      return soaClient.getSiteData(
        CacheConfig.DEFAULT_VERSION,
        true
      )
    }
    return soaClient.getSiteData(
      this.getCacheVersion(),
      false
    )
  }

  convert (data) {
    if (!is.object(data)) {
      return null
    }
    const site = new CacheEntry(
      generateCacheKey(data.name + data.groupId, CacheConfig.KeyType.SITE),
      DataType.SITE
    )
    Object.assign(site, data)
    site.hosts = (is.string(data.hosts) && data.hosts.split(SEPARATOR)) || []
    return site
  }

  isNeededUpdate (previous, current) {
    return true
  }
}

module.exports = SiteCache

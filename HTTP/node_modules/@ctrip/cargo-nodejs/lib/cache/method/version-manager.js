'use strict'
const is = require('is-type-of')
const { DEFAULT_VERSION } = require('../cache-config')

const CACHE_SEPARATOR = '#'

/**
 * comparator
 *
 * @param {import('../cache-entry').IDataVersion} o1
 * @param {import('../cache-entry').IDataVersion} o2
 */
const versionCompare = (o1, o2) => {
  const o1Value = o1.id || 0
  const o2Value = o2.id || 0
  const o1Version = o1.version || 0
  const o2Version = o2.version || 0

  return o1Version === o2Version
    ? o1Value - o2Value
    : o1Version - o2Version
}

/**
 * encode data
 *
 * @param {any} id
 * @param {any} version
 */
const encodeVersionItem = (id, version) => {
  return `${id}_${version}`
}

/**
 * encode series
 */
const encodeVersionSeries = (id1, id2, version) => {
  return `${id1}~${id2}_${version}`
}

/**
 * encode version list
 *
 * @param {import('../cache-entry').IDataVersion []} cacheList
 */
const encodeVersionList = (cacheList) => {
  if (!is.array(cacheList) || cacheList.length === 0) {
    return DEFAULT_VERSION
  }

  cacheList.sort(versionCompare)

  let result = ''
  let seriesStartId = 0
  let seriesEndId = 0
  let seriesVersion = -1

  for (const cache of cacheList) {
    if (seriesVersion === -1) {
      seriesVersion = cache.version || 0
      seriesStartId = seriesEndId = cache.id || 0
      continue
    }
    if (cache.version === seriesVersion && cache.id === seriesEndId + 1) {
      seriesEndId = cache.id || 0
      continue
    }

    result += seriesEndId === seriesStartId
      ? encodeVersionItem(seriesStartId, seriesVersion) + ','
      : encodeVersionSeries(seriesStartId, seriesEndId, seriesVersion) + ','

    seriesVersion = cache.version
    seriesStartId = seriesEndId = cache.id
  }

  result += seriesEndId === seriesStartId
    ? encodeVersionItem(seriesStartId, seriesVersion)
    : encodeVersionSeries(seriesStartId, seriesEndId, seriesVersion)

  result += `:${cacheList[0].dataType}`
  return result
}

module.exports = {
  encodeVersionList,
  CACHE_SEPARATOR
}

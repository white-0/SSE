'use strict'
const is = require('is-type-of')
const Foundation = require('./common/foundation')
const cacheManager = require('./cache')
const heartBeatCollector = require('./collector')
const { CargoContext, setContextType } = require('./context')
const { QueryBuilder } = require('./query')
const { INTERNAL_BOOLEAN_KEYS } = require('./common/constants')
const {
  CURRENCY_SWITCH,
  TOP_CURRENCY,
  H5_SUPPORTED_LOCALE,
  ONLINE_SUPPORTED_LOCALE
} = INTERNAL_BOOLEAN_KEYS

const cargo = {

  init (options = {}) {
    // init appId
    if (is.string(options.appId)) {
      Foundation.appId = options.appId
    }
    // init log level
    if (is.number(options.logLevel)) {
      Foundation.logLevel = options.logLevel
    }
    return cacheManager.init().then((isFirstInit) => {
      isFirstInit && heartBeatCollector.start()
    })
  },

  killPolling () {
    Foundation.killed = true
  },

  getChannels () {
    return cacheManager.getChannels()
  },

  getChannel (channelName) {
    return cacheManager.getChannelByName(channelName)
  },

  getCurrencies () {
    return cacheManager.getCurrencies()
  },

  getSupportedCurrencies () {
    return this
      .select(CURRENCY_SWITCH)
      .system()
      .queryList()
      .filter(item => item.value !== '0')
      .map(item => cacheManager.getCurrencyById(item.currencyId))
  },

  getTopCurrencies (groupName, siteName) {
    const supportedCurrencyIds = this
      .select(CURRENCY_SWITCH)
      .system()
      .queryList()
      .filter(item => item.value !== '0')
      .map(item => item.currencyId)

    return this
      .select(TOP_CURRENCY)
      .system()
      .group(groupName)
      .site(siteName)
      .queryList()
      .filter(item =>
        item.value !== '0' &&
        supportedCurrencyIds.indexOf(item.currencyId) !== -1
      )
      .map(item => cacheManager.getCurrencyById(item.currencyId))
  },

  getCurrency (currencyName) {
    return cacheManager.getCurrencyByName(currencyName)
  },

  getGroups () {
    return cacheManager.getGroups()
  },

  getGroup (groupName) {
    return cacheManager.getGroupByName(groupName)
  },

  getLocales () {
    return cacheManager.getLocales()
  },

  getSupportedLocales (type, groupName, siteName, h5UseSiteForce) {
    let builder = null
    if (type === this.CONTEXT_TYPE.ONLINE) {
      builder = this.select(ONLINE_SUPPORTED_LOCALE)
        .system()
        .group(groupName)
        .site(siteName)
    } else {
      builder = this.select(H5_SUPPORTED_LOCALE)
        .system()
        .group(groupName)

      if (h5UseSiteForce) {
        builder = builder.site(siteName)
      }
    }

    return builder
      .queryList()
      .filter(item => item.value !== '0')
      .map(item => cacheManager.getLocaleById(item.localeId))
  },

  getLocale (localeName) {
    return cacheManager.getLocaleByName(localeName)
  },

  getSources () {
    return cacheManager.getSources()
  },

  getSource (sourceName) {
    return cacheManager.getSourceByName(sourceName)
  },

  getSites () {
    return cacheManager.getSites()
  },

  getSite (groupName, siteName) {
    return cacheManager.getSiteByName(groupName, siteName)
  },

  getHosts (groupName, siteName) {
    return cacheManager.getSiteByName(groupName, siteName)
      .map(site => (site && site.hosts) || '')
  },

  getSiteByHost (host) {
    return cacheManager.getSiteByHost(host)
  },

  getChannelCurrencySwitchMap (channelName) {
    return cacheManager.getChannelCurrencySwitchMap(channelName)
  },

  getChannelCurrencySwitch (channelName, currencyName) {
    return cacheManager.getChannelCurrencySwitch(channelName, currencyName)
  },

  select (key) {
    return new QueryBuilder(key)
  },

  getCargoContext (req, res, type = this.CONTEXT_TYPE.ONLINE) {
    return new CargoContext(req, res, type)
  },

  setContextType (req, type = this.CONTEXT_TYPE.ONLINE) {
    return setContextType(req, type)
  },

  registerUpdateEvent (dataType, callback) {
    cacheManager.registerUpdateEvent(dataType, callback)
  },

  get middlewares () {
    return require('./middlewares')
  },

  set middlewares (args) {
    throw new Error('middlewares is readonly')
  },

  get CONTEXT_TYPE () {
    return require('./context/context-config').CONTEXT_TYPE
  },

  set CONTEXT_TYPE (args) {
    throw new Error('CONTEXT_TYPE is readonly')
  },

  get LOG_LEVEL () {
    return require('./log/log-level')
  },

  set LOG_LEVEL (args) {
    throw new Error('LOG_LEVEL is readonly')
  },

  get DATA_TYPE () {
    return require('./common/data-type')
  },

  set DATA_TYPE (args) {
    throw new Error('DATA_TYPE is readonly')
  }
}

require('./extends')(cargo)
module.exports = cargo

'use strict'
const is = require('is-type-of')
const cacheManager = require('../cache')
const Foundation = require('../common/foundation')
const { DEFAULT_APPID } = require('../common/constants')
const QueryFields = require('./query-fields')
const Query = require('./query')
const QueryList = require('./query-list')
const QueryOther = require('./query-other')
const ADD_KEYID = Symbol('CARGO#QUERY_ADD_KEYID')

class QueryBuilder {
  constructor (keyName) {
    /** @type {{
     *    field: QueryFields[keyof QueryFields];
     *    value: number|string;
     *    name: string;
     *  }[]} */
    this.conditions = []
    /** @type {string} */
    this.groupName = ''
    /** @type {string} */
    this.appId = Foundation.appId
    /** @type {number} */
    this.keyId = 0
    /** @type {string} */
    this.keyName = keyName
  }

  system () {
    this.appId = DEFAULT_APPID
    return this
  }

  appid (appId) {
    if (is.string(appId)) {
      this.appId = appId
    }
    return this
  }

  group (groupName) {
    const group = cacheManager.getGroupByName(groupName)
    if (group && group.id) {
      this.conditions.push({
        field: QueryFields.GROUP,
        value: group.id,
        name: groupName
      })
      this.groupName = group.name
    }
    return this
  }

  site (siteName) {
    const site = cacheManager.getSiteByName(this.groupName, siteName)
    if (site && site.id) {
      this.conditions.push({
        field: QueryFields.SITE,
        value: site.id,
        name: siteName
      })
    }
    return this
  }

  locale (localeName) {
    const locale = cacheManager.getLocaleByName(localeName)
    if (locale && locale.id) {
      this.conditions.push({
        field: QueryFields.LOCALE,
        value: locale.id,
        name: localeName
      })
    }
    return this
  }

  currency (currencyName) {
    const currency = cacheManager.getCurrencyByName(currencyName)
    if (currency && currency.id) {
      this.conditions.push({
        field: QueryFields.CURRENCY,
        value: currency.id,
        name: currencyName
      })
    }
    return this
  }

  channel (channelName) {
    const channel = cacheManager.getChannelByName(channelName)
    if (channel && channel.id) {
      this.conditions.push({
        field: QueryFields.CHANNEL,
        value: channel.id,
        name: channelName
      })
    }
    return this
  }

  source (sourceName) {
    const source = cacheManager.getSourceByName(sourceName)
    if (source && source.id) {
      this.conditions.push({
        field: QueryFields.SOURCE,
        value: source.id,
        name: sourceName
      })
    }
    return this
  }

  other (other) {
    if (is.string(other)) {
      this.conditions.push({
        field: QueryFields.OTHER,
        value: other
      })
    }

    this[ADD_KEYID]()
    return new QueryOther(this.keyId, this.appId, this.conditions)
  }

  queryList () {
    this[ADD_KEYID]()
    return new QueryList(this.keyId, this.appId, this.conditions).query()
  }

  queryExtendList () {
    const data = this.queryList()
    const key = cacheManager.getKeyByNameAndAppId(this.keyName, this.appId)
    for (const item of data) {
      item.key = key
      item.group = cacheManager.getGroupById(item.groupId)
      item.site = cacheManager.getSiteById(item.siteId)
      item.locale = cacheManager.getLocaleById(item.localeId)
      item.currency = cacheManager.getCurrencyById(item.currencyId)
      item.channel = cacheManager.getChannelById(item.channelId)
      item.source = cacheManager.getSourceById(item.sourceId)
    }
    return data
  }

  query () {
    this[ADD_KEYID]()
    return new Query(this.keyId, this.appId, this.conditions).query()
  }

  candidate (candidate) {
    this[ADD_KEYID]()
    return new Query(this.keyId, this.appId, this.conditions, candidate).query()
  }

  [ADD_KEYID] () {
    const key = cacheManager.getKeyByNameAndAppId(this.keyName, this.appId)
    if (key !== null) {
      this.keyId = key.id
      this.conditions = [
        {
          field: QueryFields.KEY,
          value: this.keyId,
          name: this.keyName
        },
        ...this.conditions
      ]
    }
  }
}

module.exports = QueryBuilder

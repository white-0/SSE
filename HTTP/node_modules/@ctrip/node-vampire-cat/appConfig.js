const appConfigModule = require("@ctrip/node-vampire-appconfig");
const frameworkFoundation = require("@ctrip/node-vampire-foundation-framework");
const request = require("@ctrip/node-vampire-http");

class catConfig {
  constructor() {
    this.cat_server_host_default = {
      'fws': 'cat.fws.qa.nt.ctripcorp.com',
      'lpt': 'cat.fws.qa.nt.ctripcorp.com',
      'uat': 'cat.uat.qa.nt.ctripcorp.com',
      'pro': 'cat.ctripcorp.com'
    };
    this.loggingServer_Bootstrap = {
      fws: "http://clog.bootstrap.fx.fws.qa.nt.ctripcorp.com/api/bootstrap",
      lpt: "http://clog.bootstrap.fx.fws.qa.nt.ctripcorp.com/api/bootstrap",
      uat: "http://clog.bootstrap.fx.uat.qa.nt.ctripcorp.com/api/bootstrap",
      pro: "http://clog.bootstrap.fx.ctripcorp.com/api/bootstrap"
    }
    this.loggingServer_V2_IP = {
      fws: "collector.logging.fws.qa.nt.ctripcorp.com",
      lpt: "collector.logging.fws.qa.nt.ctripcorp.com",
      uat: "collector.logging.uat.qa.nt.ctripcorp.com",
      pro: "collector.logging.ctripcorp.com",
    };
    this.debug = appConfigModule["debug"];
    this.hookNoStack = appConfigModule["hookNoStack"];
    this.setDefaultConfig("LoggingServer.V2.Port", 63100);
    this.interval = null;
    this.init();
  }

  setDefaultConfig(key, value) {
    this[key] = value;
    appConfigModule[key] = value;
  }

  updateCatServerConfig() {
    let cat_server_host = this.cat_server_host_default[this.env];
    this.setDefaultConfig(
      "CatServer.Config.Url",
      `http://${cat_server_host}/cat/s/router`
    );
    this.setDefaultConfig(
      "CatServer.Url",
      `http://${cat_server_host}:80/cat/r/m/`
    );
    this.setDefaultConfig("CatServer.Host", `${cat_server_host}:80`);
    this.setDefaultConfig(
      "LoggingServer.V2.IP",
      this.loggingServer_V2_IP[this.env]
    );
    this.setDefaultConfig(
      "LoggingServer.Bootstrap",
      this.loggingServer_Bootstrap[this.env]
    );
  }

  init() {
    if (!this.initPromise) {
      this.initPromise = new Promise((resolve, reject) => {
        Promise.all(
          [frameworkFoundation.getEnv(), frameworkFoundation.getIDC(), frameworkFoundation.getZone()]
        ).then((args) => {
          let env = args[0];
          let idc = args[1];
          let zone = args[2];

          this.AppID = frameworkFoundation.getAppID();
          this.env = env;
          this.IDC = idc;
          this.zone = zone;
          this.setDefaultConfig("LogLevel", 1);
          this.setDefaultConfig("CatServer", []);

          this.updateCatServerConfig();
          const loadServerList = () => {
            request(appConfigModule["LoggingServer.Bootstrap"], {
              "contentType": "json",
              "unref":true,
              "responseTimeout":60000
            }, JSON.stringify({
              idc: this.IDC
            })).then((result) => {
              if (result.bootstrapServers) {
                this.setDefaultConfig(
                  "LoggingServer.Bootstrap.IPList",
                  result.bootstrapServers
                );
                this.setDefaultConfig("LoggingServer.Bootstrap.Port", result.port);
              }
            }).catch(() => {
              // empty
            });
          };
          /**2019/6/18修改 判断是否读取metadata成功，如果成功的话，则直接覆盖
           * 不再hard-code env和idc
           */
          frameworkFoundation
            .getConfig("*")
            .then((data) => {
              if (frameworkFoundation.configNeedToBeUpdated) {
                if (data["cat.server.host"]) {
                  this.cat_server_host_default[env] = data["cat.server.host"];
                  this.updateCatServerConfig();
                }
                if (data["clog.bootstrap"]) {
                  appConfigModule["LoggingServer.Bootstrap"] = data["clog.bootstrap"];
                }
                if (data["clog.servers"]) {
                  const logServers = data["clog.servers"].split(',');
                  appConfigModule["LoggingServer.V2.IP"] = logServers && logServers[Math.floor(Math.random() * logServers.length)];
                }
                if (data["clog.log.transfertocat.enable"]) {
                  appConfigModule["CLOG_LOG_TRANSFERTOCAT_ENABLE"] =
                    data["clog.log.transfertocat.enable"];
                }
              }
              loadServerList();
              return resolve();
            }).catch((e) => {
              //如果没有metadata_domain没有返回，则仍然返回默认设置的（数据无法回发，但是不会影响应用运行）
              console.log(
                "[ Vampire-CAT ] Get cat.server.host error, reuse the default server value",
                e
              );
              return resolve();
            });
          this.interval = setInterval(() => {
            loadServerList();
          }, 60000).unref();
        }).catch((e) => {
          console.log('[Cat] Init config error, ', e);
          delete this.initPromise;
          clearInterval(this.interval);
          return reject(e);
        });
      });
    }
    return this.initPromise
  }
}

module.exports = new catConfig();
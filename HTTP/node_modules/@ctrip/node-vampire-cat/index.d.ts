interface CatSpan {
    type: string;
    name: string;
    status: string;
    data: string;
    run: (callback: (done: () => void) => void) => any;

    [x: string]: any;
}

export const cat: {
    span(type: string | null, name: string | null, data?: string | number | object): CatSpan;

    event(type: string | null, name: string | null, data?: string | number | object): void;

    error(err: any, stack?: any): void;

    tags(scenario: string, indexedTags: {
        [propName: string]: {};
    }, storedTags?: {
        [propName: string]: {};
    }): void;

    http(server: object): void;

    getActiveSpan(): CatSpan;

    getMessageId(): string;

    isCanaryRequest(): boolean;
    isFromInfoSec(): boolean;
    isOriginatedFromInfoSec(): boolean;
    setURLTranscation: (callback: (req: any) => { type: string | null, name: string | null, data?: string | number | object }) => void
    /**
     * key {string} transaction type
     * rule {RegExp|function} rule
     * aggregateName {string} default:CAT_TREE_AGGREGATOR
     */
    setAggregatorRules: (opts: { [x: string]: Array<{ rule: RegExp | ((name: string) => string), aggregateName?: string }> }) => void

}

/***************Metric 声明 *****************/
interface opts {
    namespace?: string,
    name: string,
    tags?: Object,
    interval?: number
}

export class Metric {
    constructor(opts: opts);

    add(value: number, tags: Object): void;

    start(): void;

    clear(): void;

    end(): void;
}

export default cat;

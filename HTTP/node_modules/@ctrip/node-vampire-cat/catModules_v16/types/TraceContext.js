// 构建TraceContext
function TraceContext(span) {
    this.context = {
        markerId: 0
    };
    this.cSpan = span;
    this.TraceContextOP = 'TraceContext.Op';
}

TraceContext.prototype.toString = function () {
    let str = 'DefaultTraceContext value is: ';
    for (let key in this.context) {
        str += 'key: ' + key + ' value: ' + this.context[key] + ' ';
    }
    return str;
};

// 替换当前TraceContext 
TraceContext.prototype.restore = function (tc_object) {
    if (!tc_object) {
        this.cSpan.event(this.TraceContextOP, 'Restore.Null', this.toString());
        return;
    }

    this.cSpan.event(this.TraceContextOP, 'Before.Restore', this.toString());
    this.context = tc_object;
    this.cSpan.event(this.TraceContextOP, 'After.Restore', this.toString());
};

// 删除TraceContext中某个key,返回值参照java hashmap->remove
TraceContext.prototype.remove = function (key) {
    this.cSpan.event(this.TraceContextOP, 'Before.Remove', this.toString());
    let originValue = Object.prototype.hasOwnProperty.call(this.context, key) ? this.context[key] : null;
    delete this.context[key];
    this.cSpan.event(this.TraceContextOP, 'After.Remove', this.toString());
    return originValue;
};

// 判断是否包含key
TraceContext.prototype.containsKey = function (key) {
    return Object.prototype.hasOwnProperty.call(this.context, key);
};

// 获取完整TraceContext 
TraceContext.prototype.getContext = function () {
    return this.context;
};

// 获取key对应的value
TraceContext.prototype.get = function (key) {
    return this.context[key];
};

// 批量添加TraceContext 
TraceContext.prototype.addAll = function (tc_object) {
    this.cSpan.event(this.TraceContextOP, 'Before.AddAll', this.toString());
    for (let key in tc_object) {
        this.context[key] = tc_object[key];
    }
    this.cSpan.event(this.TraceContextOP, 'After.AddAll', this.toString());
};

// 添加一个TraceContext ，返回值参照java hashmap->put
TraceContext.prototype.add = function (key, value) {
    this.cSpan.event(this.TraceContextOP, 'Before.Add', this.toString());
    let originValue = Object.prototype.hasOwnProperty.call(this.context, key) ? this.context[key] : null;
    this.context[key] = value;
    this.cSpan.event(this.TraceContextOP, 'After.Add', this.toString());
    return originValue;
};

module.exports = TraceContext;
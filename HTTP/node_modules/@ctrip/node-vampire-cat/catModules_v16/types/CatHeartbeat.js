const os = require("os");
const util = require("@ctrip/node-vampire-util");
const hostInfo = require('@ctrip/node-vampire-hostinfo');
const messageId = require("../libs/messageId.js");
const queue = require("../libs/queue.js");
const moduleHelper = require("../libs/moduleHelper.js");
const packageJson = require("../../package.json");

let appStartTime = +new Date();
let lastMessageIdCount = 0;
let lastDropMessageCount = 0;
let lastSendBytes = 0;
let isWin = os.platform().indexOf("win") != -1;
let isLinux = os.platform() == "linux";
let isDocker = os.platform() == "linux" && process.env["CDOS_CPUS"];


function getMessageIdCountDelta() {
  let t1 = lastMessageIdCount;
  let t2 = messageId.getMessageIdCount();
  lastMessageIdCount = t2;
  return t2 - t1;
}

function getDropMessageCountDelta() {
  let t1 = lastDropMessageCount;
  let t2 = queue.getDropMessageCount();
  lastDropMessageCount = t2;
  return t2 - t1;
}

function getSendBytesDelta() {
  let t1 = lastSendBytes;
  let t2 = require("../libs/sender.js").getSendBytes();
  lastSendBytes = t2;
  return t2 - t1;
}

function CatHeartbeat(parent, callback) {
  if (!parent) {
    throw new Error("Invalid Heartbeat Parent Span");
  }

  if (parent.constructor && parent.constructor.name == "Object") {
    for (let key in parent) {
      if (Object.prototype.hasOwnProperty.call(parent, key)) {
        this[key] = parent[key];
      }
    }
  } else if (parent.__close) {
    throw new Error("Invalid Event Parent Span Status");
  } else {
    let now = +new Date();

    this.__id = util.uid();
    this.__messageId = parent.__messageId;
    this.__type = "heartbeat";
    this.__close = true;
    this.__parent = parent;
    this.__root = parent.__root;
    this.__startTime = this.__endTime = now;
    this.__startMicroSeconds = this.__endMicroSeconds = util.getMicroSeconds();

    this.type = "Heartbeat";
    this.name = util.getHostIp();
    this.status = "0";

    let cpu = {};
    let memory = {};
    let version = process.version.slice(1);
    let disk = [];
    let fileDescriptor = {};
    let net = {};

    let pArr = [];

    if (isDocker) {
      pArr.push(
        new Promise(function (resolve) {
          hostInfo.getDockerCpuInfo(function (dockerCpuInfo) {
            cpu = dockerCpuInfo;
            resolve();
          });
        })
      );
    } else {
      pArr.push(
        new Promise(function (resolve) {
          hostInfo.getCpuInfo(function (cpuInfo) {
            cpu = cpuInfo;
            resolve();
          });
        })
      );
    }

    pArr.push(
      new Promise(function (resolve) {
        hostInfo.getMemoryInfo(function (memoryInfo) {
          memory = memoryInfo;
          resolve();
        });
      })
    );

    pArr.push(
      new Promise(function (resolve) {
        util.getDiskInfo(function (err, diskInfo) {
          if (!err) {
            disk = diskInfo;
          }
          resolve();
        });
      })
    );

    if (isLinux) {
      pArr.push(
        new Promise(function (resolve) {
          hostInfo.getFileDescriptorStatus(function (fileDescriptorStatus) {
            fileDescriptor = fileDescriptorStatus;
            resolve();
          });
        })
      );

      pArr.push(
        new Promise(function (resolve) {
          hostInfo.getNetInfo(function (netInfo) {
            net = netInfo;
            resolve();
          });
        })
      );
    }

    let versionStr = "";
    pArr.push(
      new Promise(function (resolve) {
        moduleHelper.getVersions(function (versions) {
          // ffpan(2019/1/10): 如果version没有设置，那么需要默认设置一个，配置为目前cat的版本号
          if (versions == null) {
            versions = {
              "node-vampire-cat": packageJson && packageJson.version,
            };
          }
          //////////////////////////////////////////////////////
          versionStr = hostInfo.createVersionString(versions);
          resolve();
        });
      })
    );

    Promise.all(pArr).then(() => {
      this.data = util.stringBuilder(
        [
          '<?xml version="1.0" encoding="utf-8"?>',
          '<status timestamp="' +
          util.formatDateTime(now, "yyyy-MM-dd hh:mm:ss.SSS") +
          '">',
          '<runtime start-time="' +
          appStartTime +
          '" up-time="' +
          (now - appStartTime) +
          '" java-version="' +
          version +
          '" user-name="' +
          (os.userInfo ? os.userInfo().username : "") +
          '">',
          "<user-dir>" + process.cwd() + "</user-dir>",
          "<java-classpath>" + versionStr + "</java-classpath>",
          "</runtime>",
          '<os name="' +
          os.type() +
          '" arch="' +
          os.arch() +
          '" version="' +
          os.release() +
          '" available-processors="' +
          (isDocker ? cpu.dockerCount : cpu.count) +
          '" system-load-average="' +
          cpu.load +
          '" process-time="0" total-physical-memory="' +
          memory.total +
          '" free-physical-memory="' +
          memory.free +
          '" committed-virtual-memory="0" total-swap-space="0" free-swap-space="0" />',
          "<disk>",
          disk.map(
            (item) =>
            '<disk-volume id="' +
            item.path +
            (isWin ? "\\" : "") +
            '" total="' +
            item.size +
            '" free="' +
            item.freeSpace +
            '" usable="' +
            (item.size - item.freeSpace) +
            '" />'
          ),
          "</disk>",
          '<memory max="' +
          memory.total +
          '" total="' +
          memory.total +
          '" free="' +
          memory.free +
          '" heap-usage="' +
          memory.heapUsed +
          '" non-heap-usage="' +
          (memory.rss - memory.heapTotal) +
          '">',
          "</memory>",
          '<thread count="1" total-started-count="1">',
          "</thread>",
          '<message produced="0" overflowed="0" bytes="0"/>',
          isLinux ?
          [
            '<extension id="Network">',
            util.objectToArray(hostInfo.netStatusRe, function (key) {
              return (
                '<extensionDetail id="' +
                key +
                '" value="' +
                net[key] +
                '"/>'
              );
            }),
            "</extension>",
          ] :
          null,
          '<extension id="System">',
          isDocker ?
          [
            '<extensionDetail id="DockerHostLoadAverage" value="' +
            cpu.load +
            '"/>',
            '<extensionDetail id="DockerHostCpuUsage" value="' +
            cpu.usage * 100 +
            '"/>',
            '<extensionDetail id="DockerGuestCpuUsage" value="' +
            cpu.dockerUsage * 100 +
            '"/>',
            '<extensionDetail id="DockerSystemCpuThrottledTime" value="' +
            cpu.dockerThrottledTime / 1e9 +
            '"/>',
            '<extensionDetail id="DockerSystemCpuThrottledCount" value="' +
            cpu.dockerThrottledCount +
            '"/>',
          ] :
          '<extensionDetail id="LoadAverage" value="' + cpu.load + '" />',
          '<extensionDetail id="AvailableMemory" value="' +
          memory.avalible +
          '"/>',
          '<extensionDetail id="FreePhysicalMemory" value="' +
          memory.free +
          '"/>',
          isLinux ?
          [
            '<extensionDetail id="OpenFileDescriptorCount" value="' +
            fileDescriptor.open +
            '"/>',
            '<extensionDetail id="MaxFileDescriptorCount" value="' +
            fileDescriptor.max +
            '"/>',
            '<extensionDetail id="AvailableFileDescriptorCount" value="' +
            fileDescriptor.avalible +
            '"/>',
          ] :
          null,
          "</extension>",
          '<extension id="Disk">',
          disk.map(
            (item) =>
            '<extensionDetail id="' +
            item.path +
            (isWin ? "\\" : "") +
            ' Free" value="' +
            item.freeSpace +
            '" />'
          ),
          "</extension>",
          '<extension id="CatUsage">',
          '<extensionDetail id="Produced-Delta" value="' +
          getMessageIdCountDelta() +
          '" />',
          '<extensionDetail id="Overflowed-Delta" value="' +
          getDropMessageCountDelta() +
          '"/>',
          '<extensionDetail id="Bytes-Delta" value="' +
          getSendBytesDelta() +
          '"/>',
          "</extension>",
          '<extension id="JVMHeap">',
          '<extensionDetail id="Heap Usage" value="' + memory.rss + '" />',
          "</extension>",
          isLinux ?
          [
            '<extension id="Tcp">',
            '<extensionDetail id="SynRecv" value="' +
            net["SYN_RECV"] +
            '"/>',
            '<extensionDetail id="TimeWait" value="' +
            net["TIME_WAIT"] +
            '"/>',
            '<extensionDetail id="Established" value="' +
            net["ESTABLISHED"] +
            '"/>',
            "</extension>",
          ] :
          null,
          "</status>",
        ],
        "\n"
      );

      if (this.__parent) {
        if (!this.__parent.__close) {
          this.__parent.__children.push(this);
        }
      } else {
        queue.addToSendQueue(this);
      }
      callback && callback(this);
    });
  }
}

CatHeartbeat.prototype.toString = function () {
  return (
    "HEARTBEAT " +
    util.formatDateTime(this.__startTime, "hh:mm:ss,SSS") +
    " " +
    this.name
  );
};

module.exports = CatHeartbeat;
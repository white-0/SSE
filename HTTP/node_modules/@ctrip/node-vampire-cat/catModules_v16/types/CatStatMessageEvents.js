'use strict';

const appConfig = require('@ctrip/node-vampire-appconfig');
const ff=require('@ctrip/node-vampire-foundation-framework');
const util = require('@ctrip/node-vampire-util');
const messageId = require('../libs/messageId.js');
const queue = require('../libs/queue.js');
const BATCH_FLAG = "*";
const COUNT = "count";
const EQUAL_SIGN = "=";
const BATCH_SPLIT = "&";
const FAIL = "fail"
const MESSAGE_ID = "messageId";

function CatStatMessageEvents(type, name, data) {
    this.__id = util.uid();
    this.__messageId = messageId.getMessageId();
    this.__type = 'statMessage';
    this.__domain = appConfig['AppID'];
    this.__hostName = process.env.HOSTNAME;
    this.__ipAddress = util.getHostIp();
    this.__startTime = +new Date();
    this.__startMicroSeconds = util.getMicroSeconds();
    this.__children = [];
    this.__timeStamp = null;
    this.__timeout = null;
    this.type = type || 'Unknow Type';
    this.name = name || 'Unknow Name';
    this.status = '0';
    this.data = data || '';
    this.durationInMicro = -1;
    this.__traceContext = {};
    this.__inheritValue = {};
    this.__properties = {
        "idc":ff.getServerPropertiesSync('idc'),
        "region":ff.getServerPropertiesSync('region'),
        "az":ff.getServerPropertiesSync('az')
    };
    this._itemAggregator = null;
    if (!type) {
        queue.addToWaitQueue(this);
    }
}

CatStatMessageEvents.prototype.statMessageTree = function (type, name, data) {
    return new CatStatMessageEvents(type, name, data);
}

CatStatMessageEvents.prototype.end = function () {
    if (this._itemAggregator) {
        for (const key in this._itemAggregator) {
            if (Object.prototype.hasOwnProperty.call(this._itemAggregator, key)) {
                const type = key;
                for (const typeItem in this._itemAggregator[key]) {
                    if (Object.prototype.hasOwnProperty.call(this._itemAggregator[key], typeItem)) {
                        const name = typeItem;
                        const data = this._itemAggregator[key][typeItem];
                        const _statEvent = this.statMessageTree(type, name, null);
                        let str = '' + BATCH_FLAG + COUNT + EQUAL_SIGN + data.count + BATCH_SPLIT + BATCH_FLAG + FAIL + EQUAL_SIGN + data.error;
                        if (data.messageId) {
                            str += BATCH_SPLIT + BATCH_FLAG + MESSAGE_ID + EQUAL_SIGN + data.messageId;
                        }
                        _statEvent.data = str;
                        _statEvent.__type = 'statMessageEvent';
                        _statEvent.__timeStamp = this.__timeStamp;
                        _statEvent.status = '0';
                        this.message && this.message.__children.push(_statEvent);
                    }
                }
            }
        }
    }
    queue.moveToSendQueue(this);
}

module.exports = CatStatMessageEvents;
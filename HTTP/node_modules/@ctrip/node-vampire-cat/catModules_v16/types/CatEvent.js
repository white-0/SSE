const util = require("@ctrip/node-vampire-util");
const truncateString = require("../libs/truncateString.js");
const CatEventAggregator = require("./CatEventAggregator.js");

function CatEvent(parent, type, name, data) {
  if (!parent) {
    throw new Error("Invalid Event Parent Span");
  }
  if (parent.constructor && parent.constructor.name == "Object") {
    for (let key in parent) {
      if (Object.prototype.hasOwnProperty.call(parent, key)) {
        this[key] = parent[key];
      }
    }
  } else if (parent.__close) {
    throw new Error("Invalid Event Parent Span Status");
  } else {
    if (!name) {
      name = name + '';
    }
    this.__id = util.uid();
    this.__messageId = parent.__messageId;
    this.__type = "event";
    this.__close = true;
    this.__parent = parent;
    this.__root = parent.__root;
    this.__startTime = this.__endTime = +new Date();
    this.__startMicroSeconds = this.__endMicroSeconds = util.getMicroSeconds();
    this.type =
      (this.isInfoSec(this.__root) && type != "RemoteCall" ?
        this.isInfoSec(this.__root) + type :
        type) || "Unknown Type";
    this.name = name || "Unknown Name";
    this.status = "0";
    this.data = data || "";

    this.__parent.__children.push(this);
    CatEventAggregator.aggregate(this);
  }
}
CatEvent.prototype.isInfoSec = function (tree) {
  return tree != null && tree["trace-source"];
};
CatEvent.prototype.toString = function () {
  return (
    "EVENT " +
    util.formatDateTime(this.__startTime, "hh:mm:ss,SSS") +
    " " +
    this.type +
    " " +
    this.name +
    " " +
    truncateString(util.stringify(this.data), 50)
  );
};

module.exports = CatEvent;
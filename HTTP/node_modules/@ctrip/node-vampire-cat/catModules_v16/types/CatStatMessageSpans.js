'use strict';

const appConfig = require('@ctrip/node-vampire-appconfig');
const util = require('@ctrip/node-vampire-util');
const messageId = require('../libs/messageId.js');
const queue = require('../libs/queue.js');
const ff=require('@ctrip/node-vampire-foundation-framework');
function CatStatMessageSpans(type, name, data) {
    this.__id = util.uid();
    this.__messageId = messageId.getMessageId();
    this.__type = 'statMessage';
    this.__domain = appConfig['AppID'];
    this.__hostName = process.env.HOSTNAME;
    this.__ipAddress = util.getHostIp();
    this.__startTime = +new Date();
    this.__startMicroSeconds = util.getMicroSeconds();
    this.__children = [];
    this.__timeStamp = null;
    this.__timeout = null;
    this.type = type || 'Unknow Type';
    this.name = name || 'Unknow Name';
    this.status = '0';
    this.data = data || '';
    this.durationInMicro = -1;
    this.__traceContext = {};
    this.__inheritValue = {};
    this.__properties = {
        "idc":ff.getServerPropertiesSync('idc'),
        "region":ff.getServerPropertiesSync('region'),
        "az":ff.getServerPropertiesSync('az')
    };
    this._itemAggregator = null;
    if (!type) {
        queue.addToWaitQueue(this);
    }
}
CatStatMessageSpans.prototype.statMessageTree = function (type, name, data) {
    return new CatStatMessageSpans(type, name, data);
}
CatStatMessageSpans.prototype.end = function () {
    if (this._itemAggregator) {
        for (const key in this._itemAggregator) {
            if (Object.prototype.hasOwnProperty.call(this._itemAggregator, key)) {
                const type = key;
                for (const typeItem in this._itemAggregator[key]) {
                    if (Object.prototype.hasOwnProperty.call(this._itemAggregator[key], typeItem)) {
                        const name = typeItem;
                        const data = this._itemAggregator[key][typeItem];
                        const _durations = data.MapToString(data.durations);
                        const _distribution = data.MapToString(data.distribution);
                        const _span = this.statMessageTree(type, name, data);
                        _span.__properties.count = data.count;
                        _span.__properties.sum = data.sum;
                        _span.__properties.self = 0;
                        _span.__properties.fail = data.fail;
                        _span.__properties.min = data.min;
                        _span.__properties.max = data.max.value;
                        _span.__properties.messageId = data.messageId;
                        _span.__properties.maxMessageId = data.max.messageId;
                        _span.__properties.durations = _durations;
                        _span.__properties.distribution = _distribution;
                        _span.__timeStamp = this.__timeStamp;
                        _span.durationInMicro = 1 * 1000;
                        _span.status = '0';
                        this.message && this.message.__children.push(_span);
                    }
                }
            }
        }
    }
    queue.moveToSendQueue(this);
}
module.exports = CatStatMessageSpans;
const util = require("@ctrip/node-vampire-util");
const messageId = require("../libs/messageId.js");
const queue = require("../libs/queue.js");
const truncateString = require("../libs/truncateString.js");

function CatTags(parent, scenario, indexedTags, storedTags) {
  this.__id = util.uid();
  if (parent) {
    this.__messageId =
      parent.__root && parent.__root.__outerIds
        ? parent.__root.__outerIds["x-cat-id"]
        : parent.__messageId;
  } else {
    this.__messageId = messageId.getMessageId();
  }
  this.__type = "tags";
  this.__close = true;
  this.__parent = null;
  this.__root = this;
  this.__startTime = this.__endTime = +new Date();
  this.__startMicroSeconds = this.__endMicroSeconds = util.getMicroSeconds();

  this.scenario = scenario;
  this.indexedTags = util.copy(indexedTags);
  this.storedTags = util.copy(storedTags);
  if (parent && parent.__root && !this.isInfoSec(parent.__root)) {
    queue.addToSendQueue(this);
    parent.event('Cat.BizLog.Tried', scenario);
  }
  return this;
}
CatTags.prototype.isInfoSec = function (tree) {
  return tree != null && tree["trace-source"];
};
CatTags.prototype.toString = function () {
  return (
    "━━┈TAGS " +
    util.formatDateTime(this.__startTime, "hh:mm:ss,SSS") +
    " " +
    this.scenario +
    " " +
    truncateString(util.stringify(this.indexedTags), 30) +
    " " +
    truncateString(util.stringify(this.storedTags), 30)
  );
};

module.exports = CatTags;

const http = require('http');
const url = require('url');
const util = require('@ctrip/node-vampire-util');
const ff=require('@ctrip/node-vampire-foundation-framework');
const log=require('../../LogFile');
const appConfig = require('../../appConfig.js');
const defaultPort = 2280;

/**获取cat的server ip list*/
/** 通过CatServer.Config.Url获得数据
 * {
    "kvs": {
        "catLogEnable": "true",
        "logSample": "1.0",
        "enable.bizlog.truncate": "true",
        "bizLogEnable": "true", //是否允许发ES日志
        "sample": "1.0",
        "collectGcFile": "true",
        "logServers": "10.30.129.35:2280;10.30.129.202:2280;", //发送给ES的地址
        "startTransactionTypes": "",
        "collectGcFileSizeLimit": "2097152",
        "globalClockConfig": "10.2.35.8:8080;false;false;2;false;false;2",
        "enable": "false", //是否允许发CAT日志
        "matchTransactionTypes": "",
        "routers": "10.30.128.120:2280;10.30.129.245:2280;", //发送给CAT的地址
        "clientMergeEnabled": "true",
        "bizLogType": "netty",
        "enableCatFilter": "true"
    }
}
 注意：ES和CAT的发送地址不是同一个地址。
 *
 */
let fetchServerConfig = function () {
    return new Promise((resolve, reject) => {
        appConfig.init().then(() => {
            let tarUrlRouter = url.parse(appConfig['CatServer.Config.Url'], true);
            // console.log('CatServer.Config.Url : ', appConfig['CatServer.Config.Url']);
            tarUrlRouter.query.domain = appConfig['AppID'];
            tarUrlRouter.query.op = 'json';
            tarUrlRouter.query.ip = util.getHostIp();
            tarUrlRouter.query.dc = appConfig['IDC'];
            tarUrlRouter.query.az = ff.getServerPropertiesSync('az');
            tarUrlRouter.query.region = ff.getServerPropertiesSync('region');
            tarUrlRouter.query.corp = ff.getServerPropertiesSync('corp');
            tarUrlRouter.query.tenant = ff.getServerPropertiesSync('tenant');
            tarUrlRouter.query.cloudprovider = ff.getServerPropertiesSync('cloudprovider');
            tarUrlRouter = url.parse(url.format(tarUrlRouter));
            tarUrlRouter.method = 'GET';

            let arr = [],
                esArr = [],
                specialSourceIpArr = ['10.60.21.4']; //** 信安特殊ip，
            let reqRouter = http.request(tarUrlRouter, function (resRouter) {
                resRouter.on('error', () => {
                    reject('[Cat] Cat Server[' + appConfig['CatServer.Config.Url'] + '] Response Unavaliable');
                });
                let buffArr = [];
                resRouter.on('data', function (buff) {
                    buffArr.push(buff);
                });
                resRouter.on('end', function () {
                    let result = Buffer.concat(buffArr).toString();
                    try {
                        let content = JSON.parse(result);
                        let routers = content['kvs'] && content['kvs']['routers'];
                        let specialSourceIp = content['kvs'] && content['kvs']['specialSourceIp'];
                        specialSourceIp = specialSourceIp && specialSourceIp.split('infoSec:')[1];
                        routers.replace(/(\d{0,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(:(\d{1,5}))?/g, function (a, b, c, d) {
                            arr.push(b + ':' + (d || defaultPort));
                        });
                        specialSourceIp && specialSourceIp.replace(/(\d{0,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(,)?/g, function (a, b) {
                            specialSourceIpArr.push(b);
                        });
                        let logServers = content['kvs'] && content['kvs']['logServers'];
                        logServers.replace(/(\d{0,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(:(\d{1,5}))?/g, function (a, b, c, d) {
                            esArr.push(b + ':' + (d || defaultPort));
                        });
                        appConfig['CatServer'] = arr;
                        appConfig['esServer'] = esArr;
                        appConfig['specialSourceIpArr'] = specialSourceIpArr;
                        appConfig['es.bizLogEnable'] = content['kvs'] && content['kvs']['bizLogEnable'];
                        appConfig['cat.enable'] = content['kvs'] && content['kvs']['enable'];
                        log('[Vampire cat] get cat serverList: ' + arr+' ---- '+'[Vampire cat] get es serverList: ' + esArr);
                        resolve();
                    } catch (e) {
                        reject('[Cat] Cat Server[' + appConfig['CatServer.Config.Url'] + '] Invalid response, ' + e.message);
                    }

                });
            });
            reqRouter.on('error', () => {
                reject('[Cat] Cat Server[' + appConfig['CatServer.Config.Url'] + '] Request Unavaliable');
            });

            reqRouter.end();
        }).catch((err) => {
            reject('[Cat] Cat fetchServerConfig.js error:' + err);
        });
    });
}

module.exports = fetchServerConfig;
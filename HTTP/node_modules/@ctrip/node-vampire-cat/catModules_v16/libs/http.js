/** cat new http createServer */
const appConfig = require("../../appConfig.js");
const ff = require("@ctrip/node-vampire-foundation-framework");
const CatSpan = require("../types/CatSpan.js");
const serverHook = require("@ctrip/node-vampire-hook").serverHook;
const versionString = process.version
  .replace(/(\d+)/g, (t) => t.padStart(3, "0"))
  .replace(/[^\d]/g, "");
const ACT_MINI_VERSION = "018000000";
/**generate URL.client part
 * IPS: 客户端真实IP
 * VirtualIP: remote_addr
 * Server：请求的domainName（参照Java的request.getServerName())
 * Referer:referrer 或 referer
 * Agent: user-agent
 * @param req {Object} http.IncomingMessage
 * @return {string} 用&连接的类似querystring格式的内容
 */
function logRequestClientInfo(req) {
  let ipForwarded = req.headers["x-forwarded-for"];
  let rawHeaders = req.rawHeaders;
  let index = rawHeaders.indexOf("Host");
  let serverName = index >= 0 ? rawHeaders[index + 1] : "";

  let info = [];
  info.push("IPS=" + ipForwarded); // 客户端真实IP
  info.push("VirtualIP=" + req.headers["x-real-ip"]); // remote_addr（可能是客户端真实ip，也可能是代理）
  info.push("Server=" + serverName);
  info.push(
    "Referer=" + (req.headers["referrer"] || req.headers["referer"] || null)
  );
  info.push("Agent=" + req.headers["user-agent"]);
  // console.log('==info==', info.join('&'));
  return info.join("&");
}

/**generate URL.method part
 * Method: HTTP/{method}
 * URL: request url(remove domainName)
 * @param req {Object} http.IncomingMessage
 * @return {string} 用&连接的类似querystring格式的内容
 */
function logRequestMethodInfo(req) {
  let info = [];
  info.push("HTTP/" + req.method);
  info.push(req.url.replace(/[?#].*$/, "") + " ");
  // console.log('==info==', info.join(' '));
  return info.join(" ");
}

/** 参考自java，从header中判断response中应该返回什么cat内容
 * file source: cat/serverlet/catfilter.java
 * reference code:
 * protected int detectMode(HttpServletRequest req) {
    String source = req.getHeader('X-CAT-SOURCE');
    String id = req.getHeader('X-CAT-ID');

    if ('container'.equals(source)) {
        return 2;
    } else if (id != null && id.length() > 0) {
        return 1;
    } else {
        return 0;
    }
}
 */
function detectMode(req) {
  let source = req.headers["x-cat-source"];
  let id = req.headers["x-cat-id"];

  if (source === "container") {
    return 2;
  } else if (id != null && id.length > 0) {
    return 1;
  }
  return 0;
}

appConfig
  .init()
  .then(() => {
    serverHook.on("request", function (req, res, handler) {
      let tarUrl = req.url.replace(/[?#].*$/, "") + " ";
      const clientIp = ff.getClientIp(req);
      let isFromInfoSec = false,
        isOriginatedFromInfoSec = false;
      if (
        clientIp &&
        appConfig["specialSourceIpArr"] &&
        appConfig["specialSourceIpArr"].includes(clientIp)
      ) {
        isOriginatedFromInfoSec = true;
        isFromInfoSec = true;
        !req.headers["x-ctx-trace-source"] &&
          (req.headers["x-ctx-trace-source"] = "infoSec");
      }
      if (req.headers["x-ctx-trace-source"]) {
        isOriginatedFromInfoSec = true;
      }
      let isInfoSec = null;
      if (isFromInfoSec) {
        isInfoSec = "infoSec-";
      } else if (isOriginatedFromInfoSec) {
        isInfoSec = "indirect-infoSec-";
      }
      let ret = CatSpan.__setURLTranscation && CatSpan.__setURLTranscation(req) || {};
      let otherSpan = null;
      let span = new CatSpan(
        null,
        (isInfoSec ? isInfoSec : "") + "URL",
        tarUrl
      );
      req.__currentURLSpan = res.__currentURLSpan = span;
      if (ret.type) {
        otherSpan = new CatSpan(span, ret.type, ret.name, ret.data||null);
      }
      Object.assign(span.__properties, {
        groupId: process.env.PAAS_APP_GROUPID || "",
        idc: process.env.idc || "",
        orgId: process.env.PAAS_ORGID || "",
        buCode: process.env.CDOS_BUCODE || "",
      });
      span.setInheritValue("reqEntity", req, appConfig, isInfoSec);
      span.setInheritValue("reqEntity", req, appConfig, isInfoSec);
      let callback = function (done, _done) {
        if (appConfig.debug) {
          console.log("[ Vampire-CAT ] HTTP Request Start: ", req.url);
        }
        span.add(req);
        span.add(res);

        /**新增记录url.client和url.method */
        span.event("URL", "URL.client", logRequestClientInfo(req));
        span.event("URL", "URL.method", logRequestMethodInfo(req));

        /***************************** */

        let cleaned = false;

        function cleanEventHandler() {
          if (!cleaned) {
            cleaned = true;
            req.removeListener("error", requestErrorHandler);
            res.removeListener("error", responseErrorHandler);
            res.removeListener("close", logStatusCode);
            res.removeListener("finish", logStatusCode);
            done();
            _done && _done();
          }
        }

        function requestErrorHandler(err) {
          if (err.code != "ECONNRESET") {
            span.error(err, "Request Error");
          } else {
            span.event("URL.REQUEST", "Aborted");
          }
          cleanEventHandler();
        }

        function responseErrorHandler(err) {
          span.error(err, "Response Error");
          cleanEventHandler();
        }

        let logged = false;

        function logStatusCode() {
          if (!logged) {
            logged = true;
            const fn = () => {
              span.event("URL.STATUSCODE", res.statusCode || "NULL");
              cleanEventHandler();
            };
            if (versionString >= ACT_MINI_VERSION) {
              fn();
            } else {
              process.nextTick(fn);
            }
          }
        }

        req.on("error", requestErrorHandler);
        res.on("error", responseErrorHandler);
        res.on("close", logStatusCode);
        res.on("finish", logStatusCode);

        // console.log('res.__outerIds:', span.__outerIds);
        /* 2019/02/11 如果request中有x-cat-trace-mode为true，那么返回的header中根据mode新增字段。
                参考自java，从header中判断response中应该返回什么cat内容
                 file source: cat/serverlet/catfilter.java
            */
        let mode = detectMode(req);
        if (req.headers["x-cat-trace-mode"] === "true") {
          res.setHeader("X-CAT-SERVER", appConfig["CatServer.Host"]);

          if (mode === 0) {
            //request header中没有x-cat-id，则返回当前的messageId
            res.setHeader("X-CAT-ROOT-ID", span.__messageId);
            res.setHeader(
              "X-CAT-ROOT-URL",
              appConfig["CatServer.Url"] + span.__messageId
            );
          } else {
            res.setHeader("X-CAT-ROOT-ID", req.headers["x-cat-root-id"]);
            res.setHeader("X-CAT-PARENT-ID", req.headers["x-cat-parent-id"]);
            res.setHeader("X-CAT-ID", req.headers["x-cat-id"]);
            res.setHeader(
              "X-CAT-ROOT-URL",
              appConfig["CatServer.Url"] + req.headers["x-cat-root-id"]
            );
          }
        }
      };
      span.run((done) => {
        if (otherSpan) {
          otherSpan.run((_done) => {
            callback(done, _done);
          })
        } else {
          callback(done, null);
        }
      });
      return function () {
        return otherSpan?otherSpan.run(handler):span.run(handler);
      };
    });
  })
  .catch((err) => console.error("[Cat] Cat http.js error.", err));

module.exports = function (server) {
  serverHook.addServer(server);
};
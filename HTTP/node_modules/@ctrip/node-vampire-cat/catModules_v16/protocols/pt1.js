/*
// const appConfig = require('../appConfig.js');
const frameworkFoundation = require('@ctrip/node-vampire-foundation-framework');
const util = require('@ctrip/node-vampire-util');

let procName = process.execPath.replace(/^.*[/\\]/, '');

function createRaw(item) {
    let head = [
        'PT1',
        frameworkFoundation.getAppID(),
        util.getHostName(),
        util.getHostIp(),
        procName,
        process.pid,
        procName,
        item.__messageId,
        'null',
        'null',
        'null'
    ].join('\t') + '\n';
    let body = createItemRaw(item);
    let buff = [];
    buff[1] = Buffer.from(head + body);
    buff[0] = Buffer.alloc(4);
    buff[0].writeUIntBE(buff[1].length, 0, 4);
    return Buffer.concat(buff);
}

let itemMap = {
    'event': 'E',
    'error': 'E',
    'heartbeat': 'H'
};

function createItemRaw(item) {
    let body = '';
    if (item.__type == 'event' || item.__type == 'heartbeat' || item.__type == 'error') {
        body = itemMap[item.__type] + [
            formatCatTime(item.__startTime),
            createRawString(item.type),
            createRawString(item.name),
            createRawString(item.status),
            createRawString(item.data)
        ].join('\t') + '\t\n';
    } else if (item.__type == 'span') {
        if (item.__children.length) {
            body = 't' + [
                formatCatTime(item.__startTime),
                createRawString(item.type),
                createRawString(item.name)
            ].join('\t') + '\t\n';
            body += item.__children.map(createItemRaw).join('');
            body += 'T' + [
                formatCatTime(item.__endTime),
                createRawString(item.type),
                createRawString(item.name),
                createRawString(item.status),
                (item.__endMicroSeconds - item.__startMicroSeconds).toString() + 'us',
                createRawString(item.data)
            ].join('\t') + '\t\n';
        } else {
            body = 'A' + [
                formatCatTime(item.__startTime),
                createRawString(item.type),
                createRawString(item.name),
                createRawString(item.status),
                (item.__endMicroSeconds - item.__startMicroSeconds).toString() + 'us',
                createRawString(item.data)
            ].join('\t') + '\t\n';
        }
    }
    return body;
}

function createRawString(data, defaultValue) {
    let ret = '';
    if (data === null || data === void(0)) {
        ret = defaultValue || '';
    } else {
        ret = util.escapeString(util.stringify(data));
    }
    return ret;
}

function formatCatTime(time) {
    return util.formatDateTime(time, 'yyyy-MM-dd hh:mm:ss,SSS');
}

module.exports = createRaw;*/

// const appConfig = require('../appConfig.js');
const frameworkFoundation = require('@ctrip/node-vampire-foundation-framework');
const util = require('@ctrip/node-vampire-util');
const pm2 = require('../libs/pm2id');

let procName = process.execPath.replace(/^.*[/\\]/, '');

function DictMeta(baseline) {
    this.baseline = baseline;
    this.items = ['0'];
}

DictMeta.prototype.getIndex = function(item) {
    let ret = this.items.indexOf(item);
    if (ret == -1) {
        this.items.push(item);
        ret = this.items.length - 1;
    }
    return ret;
};

DictMeta.prototype.createDictRaw = function() {
    return Buffer.concat([
        util.varint(this.baseline),
        util.varint(this.items.length)
    ].concat(this.items.map(createVarString)));
};

function createRaw(item) {
    let ip = util.getHostIp();
    if (item.__splitProcess) {
        ip += '@@' + pm2.id;
    }
    let head = Buffer.concat([
        Buffer.from('BT2\t'),
        createVarString(frameworkFoundation.getAppID()), // Domain
        createVarString(util.getHostName()), // Host Name
        createVarString(ip), // Client IP
        createVarString(procName), // Thread Group Name
        createVarString(process.pid), // Thread ID
        createVarString(procName), // Thread Name
        createVarString(item.__outerIds ? item.__outerIds['x-cat-id'] : item.__messageId), // Message ID
        createVarString(item.__outerIds ? item.__outerIds['x-cat-parent-id'] : null), // Parent Message ID
        createVarString(item.__outerIds ? item.__outerIds['x-cat-root-id'] : null), // Root Message ID
        createVarString('null') // Session Token
    ]);
    let dictMeta = new DictMeta(item.__startTime);
    let body = createItemRaw(dictMeta, item);
    let dict = dictMeta.createDictRaw();
    let size = Buffer.alloc(4);
    size.writeUIntBE(head.length + dict.length + body.length, 0, 4);

    return Buffer.concat([
        size,
        head,
        dict,
        body
    ]);
}

let itemMap = {
    'event': 'E',
    'error': 'E',
    'heartbeat': 'H'
};

function createItemRaw(dictMeta, item) {
    let body = Buffer.alloc(0);
    if (item.__type == 'event' || item.__type == 'heartbeat' || item.__type == 'error') {
        body = Buffer.concat([
            Buffer.from(itemMap[item.__type]),
            util.varint(item.__startTime - dictMeta.baseline),
            util.varint(dictMeta.getIndex(item.type)),
            util.varint(dictMeta.getIndex(item.name)),
            util.varint(dictMeta.getIndex(item.status)),
            createVarString(util.stringify(item.data))
        ]);
        // if (!item.__parent) {
        // 	body = createWrapperRaw(dictMeta, item, body);
        // }
    } else if (item.__type == 'span') {
        body = Buffer.concat([
            Buffer.from('t'),
            util.varint(item.__startTime - dictMeta.baseline),
            util.varint(dictMeta.getIndex(item.type)),
            util.varint(dictMeta.getIndex(item.name)),
            Buffer.concat(item.__children.map(function(subItem) {
                return createItemRaw(dictMeta, subItem)
            })),
            Buffer.from('T'),
            util.varint(dictMeta.getIndex(item.status)),
            createVarString(util.stringify(item.data)),
            util.varint(item.__endMicroSeconds - item.__startMicroSeconds)
        ]);
    }
    return body;
}

// function createWrapperRaw(dictMeta, item, body) {
// 	return Buffer.concat([
// 		Buffer.from('t'),
// 		util.varint(item.__startTime - dictMeta.baseline),
// 		util.varint(dictMeta.getIndex('_CatMergeTree')),
// 		util.varint(dictMeta.getIndex('_CatMergeTree')),
// 		body,
// 		Buffer.from('T'),
// 		util.varint(dictMeta.getIndex('0')),
// 		util.varint(0),
// 		util.varint(item.__endMicroSeconds - item.__startMicroSeconds)
// 	]);
// }

function createVarString(str) {
    if (util.type(str) != 'string') {
        str = '' + str;
    }
    let buff = Buffer.from(str);
    return Buffer.concat([
        util.varint(buff.length),
        buff
    ]);
}

module.exports = createRaw;

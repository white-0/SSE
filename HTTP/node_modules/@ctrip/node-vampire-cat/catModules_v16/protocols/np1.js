// const appConfig = require('../appConfig.js');
const frameworkFoundation = require('@ctrip/node-vampire-foundation-framework');
const util = require('@ctrip/node-vampire-util');

let hostIpBuff = (function() {
    let ipArr = util.getHostIp().split('.');
    let hostIpInt = 0;

    while (ipArr.length) {
        hostIpInt = hostIpInt * 256 + (parseInt(ipArr.shift(), 10) || 0);
    }

    return util.intToBuff(hostIpInt, 8);
})();


function createRaw(item) {
    let head = Buffer.concat([
        Buffer.from('NP1\t'),
        util.intToBuff(0, 1), // Compress Type
        hostIpBuff, // IP
        util.intToBuff(1, 1), // ES
        createVarString(frameworkFoundation.getAppID()), // Domain
        createVarString(util.getHostName()) // Host Name
    ]);
    let body = createItemRaw(item);

    return Buffer.concat([
        util.intToBuff(head.length + body.length, 4),
        head,
        body
    ]);
}

function createItemRaw(item) {
    let body = Buffer.alloc(0);
    if (item.__type == 'tags') {
        body = Buffer.concat([
            util.varint(1),
            util.intToBuff(item.__startTime, 8),
            util.intToBuff(process.pid, 8),
            createVarString(item.scenario),
            createVarString(item.__messageId),
            createMapRaw(item.indexedTags),
            createMapRaw(item.storedTags)
        ]);
    }
    return body;
}

function createMapRaw(item) {
    let ret;
    if (item) {
        let size = 0;
        let map = Buffer.concat(util.objectToArray(item, function(key, value) {
            size++;
            return Buffer.concat([
                createVarString(key),
                createObjectRaw(value)
            ]);
        }));
        ret = Buffer.concat([
            util.varint(size),
            map
        ]);
    } else {
        ret = util.varint(0);
    }
    return ret;
}

let maxInt = 0x7FFFFFFF;
let minInt = -0x7FFFFFFF;
let maxLong = 9007199254740991;
let minLong = -9007199254740991;

function createObjectRaw(value) {
    let ret;
    switch (util.type(value)) {
        case 'null':
        case 'undefined':
            ret = util.intToBuff(0, 1);
            break;
        case 'boolean':
            ret = Buffer.concat([
                util.intToBuff(3, 1),
                util.intToBuff(value ? 1 : 0, 1)
            ]);
            break;
        case 'number':
            if (isNaN(value)) {
                ret = util.intToBuff(0, 1);
            } else {
                if (util.isInt(value)) {
                    if (value >= minInt && value <= maxInt) {
                        ret = Buffer.concat([
                            util.intToBuff(5, 1),
                            util.intToBuff(value, 4)
                        ]);
                    } else {
                        if (value > maxLong) {
                            value = maxLong;
                        } else if (value < minLong) {
                            value = minLong;
                        }
                        ret = Buffer.concat([
                            util.intToBuff(6, 1),
                            util.intToBuff(value, 8)
                        ]);
                    }
                } else {
                    ret = Buffer.concat([
                        util.intToBuff(8, 1),
                        util.doubleToBuff(value, 8)
                    ]);
                }
            }
            break;
        case 'date':
            if (isNaN(value)) {
                ret = util.intToBuff(0, 1);
            } else {
                ret = Buffer.concat([
                    util.intToBuff(10, 1),
                    util.intToBuff(+value, 8)
                ]);
            }
            break;
        case 'array':
        case 'object':
            value = util.stringify(value);
            ret = Buffer.concat([
                util.intToBuff(9, 1),
                createVarString(value)
            ]);
            break;
        case 'string': // eslint-disable-line
            ret = Buffer.concat([
                util.intToBuff(9, 1),
                createVarString(value)
            ]);
            break;
        default:
            ret = util.intToBuff(0, 1);
            break;
    }
    return ret;
}

function createVarString(str) {
    if (util.type(str) != 'string') {
        str = '' + str;
    }
    let buff = Buffer.from(str);
    return Buffer.concat([
        util.varint(buff.length),
        buff
    ]);
}

module.exports = createRaw;
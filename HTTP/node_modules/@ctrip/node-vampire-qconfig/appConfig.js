const appConfig = require('@ctrip/node-vampire-appconfig');
const frameworkFoundation = require('@ctrip/node-vampire-foundation-framework');
const herald = require('@ctrip/node-vampire-herald-token');

appConfig.setDefaultConfigByEnv('QConfig.appCenter.Url', {
    'fws': 'http://qconfigserver.fws.qa.nt.ctripcorp.com/',
    'lpt': 'http://qconfigserver.fws.qa.nt.ctripcorp.com/',
    'uat': 'http://qconfigserver.uat.qa.nt.ctripcorp.com/',
    'prod': 'http://qconfigserver.ctripcorp.com/'
});

let ret = {};

module.exports = Promise.all(
    [frameworkFoundation.getEnv(), frameworkFoundation.getIDC(), frameworkFoundation.getSubEnv(), herald.getHeraldToken()]
).then(([env, idc, subEnv, heraldToken]) => {
    ret.appId = frameworkFoundation.getAppID();
    ret.env = env;
    ret.idc = idc;
    ret.subEnv = subEnv;
    appConfig['qconfig.subEnv'] = subEnv;
    appConfig['qconfig.idc'] = idc;
    appConfig['heraldToken'] = heraldToken||'';
    ret.qConfigAppCenterUrl = appConfig['QConfig.appCenter.Url'];
    /** 2019/6/20 修改，判断是否读取 metadata 成功，如果成功的话，则直接覆盖
     * 不再 hard-code env 和 idc
     */
    return frameworkFoundation.getConfig("*").then((data) => {
        if (frameworkFoundation.configNeedToBeUpdated) {
            let url = data["pbservice.host"];
            if (url) {
                if (!url.startsWith('http')) {
                    url = 'http://' + url;
                }
                if (!url.endsWith('/')) {
                    url += '/';
                }
                ret.qConfigAppCenterUrl = url;
                appConfig['QConfig.appCenter.Url'] = url;
            }
        }
        return ret;
    }).catch(e => {
        console.log('[ QConfig ] Invalid PbService Host,', e);
        return Promise.reject(e);
    });
});
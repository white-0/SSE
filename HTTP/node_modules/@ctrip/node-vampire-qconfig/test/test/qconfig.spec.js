'use strict';
process.mainModule = {
    filename: __filename
};
const expect = require('chai').expect;
const assert = require('chai').assert;
const appConfig = require('@ctrip/node-vampire-appconfig');
const url = require('url');
const http = require('http');
const qconfig = require('../../');
const port = 8871;
console.log(appConfig['vi.ignite'])
const _server = http.createServer((req, res) => {
}).listen(port)
// setTimeout(() => {
//     http.get('http://127.0.0.1:8871/vi/health', (res) => {
//         let arr = [];
//         res.on('data', (chunk) => {
//             arr.push(chunk);
//         });
//         res.on('end', () => {
//             console.log('-----', res.statusCode)
//             const data = qconfig.getConfig('100018233:test.json').getSync();
//             console.log('-----', data, Object.keys(data).length)
//             assert(Object.keys(data).length > 0);
//             assert.strictEqual(res.statusCode, 200);
//         });
//         res.on('error', (err) => {
//             console.log(err)
//         })
//     });
// }, 1000)
describe('qconfig UT', () => {
    let _qconfig;
    describe('qconfig https', () => {
        beforeEach(() => {
            _qconfig = qconfig.getConfig('100010061:bbzsonardb_w', '', true);
            setTimeout(() => _qconfig._handleChange(JSON.stringify({ test: 'test' })), 2000)
        });
        it('Get data synchronously', (done) => {
            assert(typeof _qconfig.getSync() === 'object')
            done();
        });

        it('Get data asynchronously', (done) => {
            _qconfig.get().then((data) => {
                console.log(data.normal);
                expect(data.normal).to.be.a('string');
                done();
            }).catch((err) => {
                assert.throw(() => {
                }, {}, err)
            });
        });
        it('qconfig https onchange', () => {
            _qconfig.on('change', (data) => {
                assert(data.configData['test']);
            })

        }).timeout(1000000);
    });
    describe('qconfig http UI', () => {
        before(() => {
            _qconfig = qconfig.getConfig('100018233:node-soa.properties', 'test1=test01\n' +
                'test2=test02\n');
            setTimeout(() => _qconfig._handleChange(JSON.stringify({ test: 'test' })), 2000)
        });
        it('Get data synchronously', (done) => {
            assert(typeof _qconfig.getSync() === 'object')
            done();
        });

        it('Get data asynchronously', (done) => {
            _qconfig.get().then((data) => {
                assert(typeof data === 'object')
                done();
            }).catch((err) => {
                assert.throw(() => {
                }, {}, err)
            });
        });

        it('qconfig https onchange', () => {
            _qconfig.on('change', (data) => {
                assert(data.configData['test']);
            })
        }).timeout(1000000);
    });

    describe('qconfig iv.ignite UI', () => {
        it('Get data Synchronize', (done) => {
            try {
                setTimeout(() => {
                    http.get('http://127.0.0.1:8871/vi/health', (res) => {
                        let arr = [];
                        res.on('data', (chunk) => {
                            arr.push(chunk);
                        });
                        res.on('end', () => {
                            const data = qconfig.getConfig('100018233:test.json').getSync();
                            assert(Object.keys(data).length > 0);
                            assert.strictEqual(res.statusCode, 200);
                            done()
                        });
                        res.on('error', (err) => {
                            done();
                            console.log(err)
                        })
                    });
                }, 1000)
            } catch (err) {
                assert.throws(() => {
                }, {}, err);
                done();
            }
        });
    });
});

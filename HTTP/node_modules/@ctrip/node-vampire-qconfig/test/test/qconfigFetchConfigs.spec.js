'use strict';

const assert = require('chai').assert;
const qconfigFetchConfigs = require('../../libs/qconfigFetchConfigs').default;
const QconfigFetchServer = require('../../libs/qconfigFetchServer').default;
const util = require('@ctrip/node-vampire-util');
let config = {
    '100018233:node-soa2.properties': {
        configName: '100018233:node-soa2.properties',
        configVersion: '2',
        configContent: 'artemis.client.soa.client.service.domain.url = http://artemis.soa.fx.fws.qa.nt.ctripcorp.com/artemis-service/\n' +
            'artemis.client.soa.service.service.domain.url = http://artemis.soa.fx.fws.qa.nt.ctripcorp.com/artemis-service/\n' +
            'artemis.client.soa.test.service.domain.url = http://10.32.21.133:8080/artemis-service/\n' +
            'artemis.client.soa.client.service-discovery.poller.ttl = 900000\n' +
            'artemis.client.soa.client.discovery.http-client.client.socket-timeout = 10000\n' +
            'artemis.client.soa.service.address.http-client.client.connect-timeout = 5000\n' +
            'artemis.client.soa.client.address.http-client.client.connect-timeout = 5000\n' +
            'artemis.client.soa.client.websocket-client.switch.netty = true\n' +
            'artemis.client.soa.service.registry.http-client.client.socket-timeout = 2000\n' +
            'artemis.client.soa.service.registry.http-client.client.connect-timeout = 1000\n' +
            'artemis.client.soa.client.discovery.http-client.client.connect-timeout = 1000\n' +
            'artemis.client.soa.service.websocket-client.switch.netty = true\n' +
            'artemis.client.cdubbo.service.service.domain.url = http://artemis.soa.fx.fws.qa.nt.ctripcorp.com/artemis-service/\n' +
            'artemis.client.cdubbo.client.service.domain.url = http://artemis.soa.fx.fws.qa.nt.ctripcorp.com/artemis-service/\n' +
            'artemis.client.cdubbo.client.discovery.http-client.client.socket-timeout = 1000\n' +
            'artemis.client.cdubbo.service.address.http-client.client.connect-timeout = 5000\n' +
            'artemis.client.cdubbo.client.address.http-client.client.connect-timeout = 5000\n' +
            'artemis.client.cdubbo.service.registry.http-client.client.socket-timeout = 2000\n' +
            'artemis.client.cdubbo.service.registry.http-client.client.connect-timeout = 1000\n' +
            'artemis.client.cdubbo.client.discovery.http-client.client.connect-timeout = 1000\n' +
            'artemis.client.cdubbo.client.websocket-client.switch.netty = true\n' +
            'artemis.client.cdubbo.service.websocket-client.switch.netty = true\n' +
            'artemis.client.soa.client.websocket-session.reconnect-times.rate-limiter.default-rate-limit=1\n' +
            'artemis.client.soa.metadata-service.url=http://ws.soa.fws.qa.nt.ctripcorp.com/core/metadata/services/\n' +
            'artemis.client.soa.client.webapi-service.url=http://webapi.soa.fws.qa.nt.ctripcorp.com/api/',
        configSource: 'fat:'
    }
}
describe('qconfigFetchConfigs UT', () => {
    let _qconfigFetchServer
    before(async () => {
        _qconfigFetchServer = new QconfigFetchServer();
        await _qconfigFetchServer.qconfigInitFinish;
    })
    it('loadTheLatestConfig,configVersion should be -1', (done) => {
        qconfigFetchConfigs.loadTheLatestConfig('100018930:test11.json').then((datas) => {
            assert(datas.configVersion === -1);
            done();
        });
    });
    it('loadTheLatestConfig,should be a object', (done) => {
        qconfigFetchConfigs.longPollCheckUpdate(util.copy(config)).then((datas) => {
            assert(datas[0].configName === '100018233:node-soa2.properties');
            done();
        });
    });
    it('recordResult, should be throw error', (done) => {
        let config_ = util.copy(config)['100018233:node-soa2.properties'];
        qconfigFetchConfigs.recordResult(config_,['http://127.0.0.1']).then((datas) => {
            done();
        });
    });
});

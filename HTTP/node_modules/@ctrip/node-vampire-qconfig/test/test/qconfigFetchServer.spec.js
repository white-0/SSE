'use strict';
const assert = require('chai').assert;
const path = require('path');
const fs = require('fs');
const QconfigFetchServer = require('../../libs/qconfigFetchServer').default;
const appconfig = require('@ctrip/node-vampire-appconfig');
describe('QconfigFetchServer UT', () => {
    let _qconfigFetchServer;
    before(async () => {
        _qconfigFetchServer = new QconfigFetchServer();
        await _qconfigFetchServer.qconfigInitFinish;
    })
    it('_getServerIpListByConf,should be a array', (done) => {
        _qconfigFetchServer._getServerIpListByConf().then((datas) => {
            assert(appconfig['qserver.http.urls'].length > 0)
            done()
        }).catch(() => {
            done();
        })
    });
    before(async () => {
        _qconfigFetchServer.appConfig.qConfigAppCenterUrl = 'http://qconfigserver.fws.qa.nt.ctripcorp.com/';
        await _qconfigFetchServer._qconfigInit();
    })
    it('_getServerIpListByConf,should throw error', (done) => {
        _qconfigFetchServer._getServerToken({
            env: 'fws',
            subenv: '',
            idc: '',
            region: '',
            tooling: false,
            pci: false,
            corp: 'CTRIP',
            host_type: 'docker',
            bigdata: false
        }).then((datas) => {
            done()
        }).catch((err) => {
            assert(!!err === true);
            done();
        })
    });

    it('_getServerIpListByConf,should return ctrip-default-pro.conf', (done) => {
        _qconfigFetchServer.appConfig.env = "prod";
        _qconfigFetchServer.appConfig.idc = "";
        _qconfigFetchServer._getServerIpListByConf().then((datas) => {
            done()
        });
    });

    it('_getServerIpListByConf,should return ctrip-default-sha-ali.conf', (done) => {
        _qconfigFetchServer.appConfig.env = "prod";
        _qconfigFetchServer.appConfig.idc = "sha-ali";
        _qconfigFetchServer._getServerIpListByConf().then((datas) => {
            done()
        });
    });

    it('_getServerIpListByConf,when idc is shajq,should return ctrip-default-pro.conf', (done) => {
        _qconfigFetchServer.appConfig.env = "prod";
        _qconfigFetchServer.appConfig.idc = "shajq";
        _qconfigFetchServer._getServerIpListByConf('tedt').then((datas) => {
            done()
        });
    });

    it('writeFile', (done) => {
        const _path = path.join(__dirname, '/data/');
        _qconfigFetchServer._writeFile(_path, JSON.stringify({
            "qconfig.server.token": "EA/S2JctFw+4xna7JImSOimGtelCkW63dXLDL41/WV9gUSmHg5Y/YVXnkZyfUaFAe4Qir9b4YE/kNHJmiQp66vGNiCDTrs1wi5o6uGPYmPmVENhJca3QHR76EFqTUa2BQMF4fvtRpHedPKw1cnEdteKO3F1SzKLVBxKYGN/VuhI=",
            "qconfig.server.type": "fat"
        }))
        setTimeout(() => {
            fs.readFile(_path + '/qconfigToken.json', (err, datas) => {
                if (!err) {
                    done();
                }
            })
        }, 600)
    });
    after(() => {
        process.exit(0)
    })
});
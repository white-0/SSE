"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const path = __importStar(require("path"));
class QconfigObject extends events_1.EventEmitter {
    constructor(fileName, configContent, skipParsing) {
        super();
        this._originalData = configContent;
        this._qconfigData = {};
        const extname = path.extname(fileName);
        this.parse = null;
        if (extname === '.json') {
            //只解析标准格式的json
            this.parse = JSON.parse;
        }
        this.skipParsing = skipParsing;
    }
    _parseQconfig(data, _skip) {
        if (_skip) {
            return data;
        }
        else {
            return this.parse && data ? this.parse(data) : this.propertiesParse(data);
        }
    }
    /**
     * 获取配置信息
     * @param {String} [key|object] - 配置信息key 或：{配置信息key,是否深拷贝，是否需要跳过解析}  注：这里提供是否跳过解析设置是为了兼容调用init点火，
     * @returns {String|Object} 如果传入key 返回key对应的值 不传入key 返回解析后的配置对象
     */
    getSync(key) {
        if (typeof key === 'string' && key != '' && !this.skipParsing) {
            return this._qconfigData && this._qconfigData[key];
        }
        else if (typeof key === 'object') {
            const options = key;
            if (typeof options.skipParsing === 'boolean') {
                if (options.skipParsing) {
                    return this._originalData;
                }
                this._resetData(options.skipParsing);
            }
            // 兼容一些从qconfig-client迁移过来的应用
            if (options.deepCopy) {
                this._resetData(options.skipParsing);
            }
            if (options.key) {
                return this._qconfigData ? this._qconfigData[options.key] : undefined;
            }
            if (options.isFileExist) {
                return this._qconfigData;
            }
        }
        return this._qconfigData || {};
    }
    /**
     * 异步获取配置信息
     * @param {String} [key] - 配置信息key
     * @returns {String|Object} 如果传入key 返回key对应的值 不传入key 返回解析后的配置对象
     */
    get(key) {
        if (this._Promise) {
            return this._Promise.then(() => {
                return this.getSync(key);
            }).catch((err) => {
                throw err;
            });
        }
    }
    /**
     * 监听配置文件变更，重新解析并触发change事件
     * @param {String} configContent 文件内容
     * @private
     */
    _handleChange(configContent) {
        this._originalData = configContent;
        this._resetData();
        this._Promise = Promise.resolve(configContent);
        /**
         * 配置文件版本更新事件
         *
         * @event QconfigObject#change
         * @type {Object}
         * @property {Object} configData 解析后的配置文件内容
         */
        this.emit('change', {
            configData: this._qconfigData
        });
    }
    /**
     * 重置
     * @private
     */
    _resetData(skipParsing) {
        const _skip = typeof skipParsing === 'boolean' ? skipParsing : this.skipParsing;
        this._qconfigData = this._parseQconfig(this._originalData, _skip);
    }
    propertiesParse(string) {
        const commentReg = /^#/;
        if (!string)
            return string;
        try {
            return JSON.parse(string); // 当文件类型未知时，先判断文件内容是否是json类型
        }
        catch (e) {
            // empty
        }
        const lineList = string.split(/\n/), result = {};
        for (let item of lineList) {
            item = item.trim();
            if (commentReg.test(item)) {
                continue;
            }
            const index = item.indexOf('=');
            if (index <= 0)
                continue;
            const key = item.substring(0, index).trim();
            const value = item.substring(index + 1).trim();
            result[key] = value;
        }
        return result;
    }
}
exports.default = QconfigObject;

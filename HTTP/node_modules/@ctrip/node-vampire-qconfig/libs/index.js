"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const node_vampire_vi_ignite_1 = require("@ctrip/node-vampire-vi-ignite");
const node_vampire_cat_1 = __importDefault(require("@ctrip/node-vampire-cat"));
const qconfigFetchServer_1 = __importDefault(require("./qconfigFetchServer"));
const checkFormat_1 = __importDefault(require("./checkFormat"));
const qconfigFetchConfigs_1 = __importDefault(require("./qconfigFetchConfigs"));
const qconfigObject_1 = __importDefault(require("./qconfigObject"));
const node_vampire_cache_1 = __importDefault(require("@ctrip/node-vampire-cache"));
const node_vampire_appconfig_1 = __importDefault(require("@ctrip/node-vampire-appconfig"));
const metricMonitor_1 = __importDefault(require("./metricMonitor"));
const node_vampire_locker_1 = __importDefault(require("@ctrip/node-vampire-locker"));
const node_vampire_clogging_1 = __importDefault(require("@ctrip/node-vampire-clogging"));
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const _cache = node_vampire_cache_1.default.Cache;
const cacheName = 'node-vampire-qconfig-' + node_vampire_appconfig_1.default['AppID'];
const lockerName = 'qconfigFile-' + node_vampire_appconfig_1.default['AppID'];
// 目前服务端限制：文件大小不超过 512k
const store = new _cache(cacheName, 10 * 1024 * 1024, node_vampire_cache_1.default.SIZE_1K);
const storeHttps = new _cache(cacheName + '-https', 1024 * 1024, node_vampire_cache_1.default.SIZE_1K);
const locker = new node_vampire_locker_1.default(lockerName);
class QConfig {
    constructor() {
        this._configStore = {};
        this.startSubscribe = false;
        this._qconfigFetchServer = null;
        this._qconfigMetric = null;
        this._fetchFiles = {};
    }
    // 2021/6/22 支持在应用启动阶段初始化
    init() {
        const qconfigFiles = node_vampire_appconfig_1.default['qconfig'];
        if (node_vampire_util_1.default.type(qconfigFiles) != 'array' || qconfigFiles.length == 0) {
            return Promise.resolve();
        }
        const _promise = [];
        for (const item of qconfigFiles) {
            const _qconfig = this.getConfig({ fileName: item, isKipWarning: true, isIgnite: true });
            if (!_qconfig) {
                throw new Error(`[@ctrip/node-vampire-qconfig] ${item} initialization failed`);
            }
            _promise.push(_qconfig.get().then(() => {
                return;
            }).catch((err) => {
                throw err;
            }));
        }
        return Promise.all(_promise).then(() => {
            console.log('[@ctrip/node-vampire-qconfig] qconfig init success');
            return;
        }).catch((err) => {
            throw err;
        });
    }
    /*
    * 获取配置文件内容：返回值有 get / getPromise 方法:get() 获取内存或 defaultConfig;getPromise() 异步获取远端配置
    */
    getConfig(opts, defaultConfig, isHttps, skipParsing, isKipWarning) {
        let fileName = null, isIgnite = false;
        if (typeof opts === 'object') {
            defaultConfig = opts.defaultConfig;
            isHttps = opts.isHttps;
            skipParsing = opts.skipParsing;
            isKipWarning = opts.isKipWarning;
            fileName = opts.fileName;
            isIgnite = opts.isIgnite || false;
        }
        else {
            fileName = opts;
        }
        if (fileName.indexOf(':') < 0) {
            fileName = node_vampire_appconfig_1.default['AppID'] + ':' + fileName;
        }
        const span = node_vampire_cat_1.default.span('node.vampire.qconfig.getConfig', fileName);
        return span.run((done) => {
            try {
                if (!this._qconfigMetric) {
                    this._qconfigMetric = new metricMonitor_1.default();
                }
                checkFormat_1.default.checkFiles(fileName);
                this._qconfigMetric.CtriputilCountQconfig(1, node_vampire_appconfig_1.default['AppID']);
                if (!this._qconfigFetchServer) {
                    this._qconfigFetchServer = qconfigFetchServer_1.default.getInstance();
                }
                if (!this._configStore[fileName]) {
                    isHttps && (storeHttps[fileName] = true);
                    //******************** 1.该配置文件首次拉取 *******************************
                    //**** 1.取defaultConfig
                    this._configStore[fileName] = new qconfigObject_1.default(fileName, defaultConfig, skipParsing);
                    this._configStore[fileName]._resetData();
                    //**** 2.开启fetch
                    this._configStore[fileName]._Promise = this._fetchConfig(fileName, isKipWarning, isIgnite);
                }
                done();
                return this._configStore[fileName];
            }
            catch (err) {
                console.log('qconfig.getConfig.err', err);
                node_vampire_cat_1.default.error(err);
                done();
                return null;
            }
        });
    }
    /*
    * 1.拉取最新配置->2.recordResult->3.更新缓存->4.开启长轮询
    * store['qconfigFileArr'] {Array} 存储所有文件名
    * store[data.configName] {object} 文件名-->内容，版本等
    * */
    _fetchConfig(fileName, isKipWarning, isIgnite) {
        return this._qconfigFetchServer.qconfigInitFinish.then(() => qconfigFetchConfigs_1.default.loadTheLatestConfig(fileName, storeHttps[fileName], isKipWarning)).then((latest) => {
            if (latest.configVersion > 0) {
                return qconfigFetchConfigs_1.default.recordResult(latest, 1).then(() => latest);
            }
            else {
                return latest;
            }
        }).then((data) => {
            return this._fetchDataDal(data);
        }).catch((err) => {
            //throw err;
            console.log('[node-vampire-qconfig] fetConfigsByName Error: ', err);
            node_vampire_cat_1.default.event('Node.Qconfig.requestFailure', err.message);
            node_vampire_clogging_1.default.custom({
                type: 'warn',
                title: 'qconfig_fetConfigsByName',
                message: err,
                addInfo: {}
            });
            if (store['qconfigFile.detail'] && store['qconfigFile.detail'][fileName]) {
                return this._fetchDataDal(store['qconfigFile.detail'][fileName]);
            }
            else {
                // 如果是点火状态，抛出异常
                if (isIgnite) {
                    throw err;
                }
                // 如果不需要点火，设置默认的配置，这样可以在longpolling的时候拉取到最新的配置
                !this._fetchFiles[fileName] && this._fetchDataDal({
                    configName: fileName,
                    configVersion: -1,
                    configContent: null,
                    configSource: node_vampire_appconfig_1.default['qconfig.server.type'] + ':' + (node_vampire_appconfig_1.default['qconfig.subEnv'] || node_vampire_appconfig_1.default['qconfig.idc'])
                });
                return err;
            }
        });
    }
    _fetchDataDal(data) {
        //*********** 更新qconfigObjects 数据 *************************
        this._fetchFiles[data.configName] = data;
        if (!this._configStore[data.configName]) {
            this._configStore[data.configName] = new qconfigObject_1.default(data.configName, data.configContent);
        }
        else if (data.configContent) {
            this._configStore[data.configName]._originalData = data.configContent;
            this._configStore[data.configName]._resetData();
        }
        //*********** 2.开启长轮询，只开启一次 *************************
        if (!this.startSubscribe) {
            this.startSubscribe = true;
            this._startSubscribe();
            this._sendChangeData();
        }
        return data.configContent;
    }
    /*
    * 长轮询,拉取最新配置.超时时间：60s.一个进程中只开启一次
    * @params timeout {number} 间隔时间
     */
    _startSubscribe(timeout) {
        locker.run((done) => {
            timeout = timeout || 500;
            const that = this;
            that._getFiles();
            node_vampire_cat_1.default.event('qconfig.Subscribe.process', "" + process.pid);
            setTimeout(function () {
                const files = store["qconfigFile.detail"] ? store["qconfigFile.detail"] : {};
                qconfigFetchConfigs_1.default.longPollCheckUpdate(files).then((updatedConfigs) => {
                    if (!updatedConfigs) {
                        done();
                        that._startSubscribe();
                        return;
                    }
                    const _promise = [], confileArr = {};
                    //************************* 发现版本更新时，1.拉取最新版本文件；2.记录recordResult; 3.更新内存 ********************************
                    for (let item = 0; item < updatedConfigs.length; item++) {
                        const _isHttpsGetConfigs = updatedConfigs[item].configName && storeHttps[updatedConfigs[item].configName] ? storeHttps[updatedConfigs[item].configName] : false;
                        if (_isHttpsGetConfigs != null && _isHttpsGetConfigs != undefined) {
                            _promise.push(qconfigFetchConfigs_1.default.getConfigByNameAndVersion(updatedConfigs[item], _isHttpsGetConfigs).then((configFile) => {
                                confileArr[configFile.configName] = configFile;
                                return configFile;
                            }).then((configFile) => {
                                // 2.recordResult
                                return qconfigFetchConfigs_1.default.recordResult(configFile, 5);
                            }).catch((err) => {
                                node_vampire_cat_1.default.error(err, `getConfigByNameAndVersion ${JSON.stringify(updatedConfigs[item])}`);
                            }));
                        }
                    }
                    return Promise.all(_promise).then(() => {
                        //******************************3. 更新内存 ****************************
                        that._saveFiles(confileArr);
                        done();
                        that._startSubscribe();
                    });
                }).catch(() => {
                    done();
                    that._startSubscribe(10000);
                });
            }, timeout).unref();
        });
    }
    _getFiles() {
        if (!store['qconfigFile.detail']) {
            store['qconfigFile.detail'] = this._fetchFiles;
        }
        else {
            const fileDetailsArr = store['qconfigFile.detail'];
            for (const item in this._fetchFiles) {
                !fileDetailsArr[item] && (fileDetailsArr[item] = this._fetchFiles[item]);
            }
            store['qconfigFile.detail'] = fileDetailsArr;
        }
    }
    _saveFiles(confileArr) {
        const fileDetailsArr = store['qconfigFile.detail'];
        for (const item in confileArr) {
            fileDetailsArr[item] = confileArr[item];
        }
        store['qconfigFile.detail'] = fileDetailsArr;
    }
    _sendChangeData() {
        setInterval(() => {
            const data = store['qconfigFile.detail'];
            if (data) {
                for (const item in data) {
                    const fileDetail = data[item];
                    if (this._fetchFiles[item] && this._fetchFiles[item].configVersion != fileDetail.configVersion) {
                        this._fetchFiles[item] = fileDetail;
                        this._configStore[fileDetail.configName] && this._configStore[fileDetail.configName]._handleChange(fileDetail.configContent);
                    }
                }
            }
        }, 2000).unref();
    }
}
const _qconfig = new QConfig();
//qconfig点火
node_vampire_vi_ignite_1.CtripIgnitePlugin.register({
    igniteName: '@ctrip/node-vampire-qconfig',
    igniteType: 'sdk',
    /**
     * 组件或应用的帮助页面链接，帮助页面里最好包含联系人和基本介绍以及如何利用点火日志排错的信息
     * @return 组件或应用的帮助wiki链接
     */
    helpUrl: () => {
        return 'nodejsts@ctrip.com';
    },
    /**
   *可以将组件或应用的初始化动作放在里面，初始化中有致命问题时，可返回false。返回false会导致点火失败，点火失败的应用不会被拉入集群
   * @return true时，初始化成功。false时，初始化失败，导致点火失败。
   */
    warmUp: () => {
        return _qconfig.init().then(() => {
            node_vampire_vi_ignite_1.simpleLogger.info('qconfig init success');
            return Promise.resolve(true);
        }).catch(() => {
            return Promise.resolve(false);
        });
    },
    /**
    * 对组件或应用极为重要的一些配置（比如组件或应用的初始化参数：url,timeout等）
    * @return 包含重要配置的map
    */
    coreConfigs: () => {
        return {};
    },
    /**
     * 用来执行组件或应用的自检操作
     * @return true时，自检成功。false时，自检失败，导致点火失败。
     */
    selfCheck: () => {
        return Promise.resolve(true);
    }
});
module.exports = _qconfig;

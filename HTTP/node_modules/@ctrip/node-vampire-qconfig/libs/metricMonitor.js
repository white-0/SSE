"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const metricConst = require('./metricConst');
const Metric = require('@ctrip/node-vampire-metric');
const Version = require('../package.json');
const NODE_VERSION = 'node-' + Version.version;
class MetricMonitor {
    constructor() {
        this.metric_list = {};
        this._initMetric();
    }
    _initMetric() {
        const list = metricConst.METRICS_LIST;
        Object.getOwnPropertyNames(list).forEach((key) => {
            this.metric_list[key] = new Metric({
                name: list[key]['name'],
                tags: list[key]['tags']
            });
            this.metric_list[key].start();
        });
    }
    _sendMetric(metricName, tag, value) {
        try {
            this.metric_list[metricName].add(value, tag);
        }
        catch (e) {
            console.log('[sendMetric] ' + metricName + ' send metric fail ' + e.message);
        }
    }
    CtriputilCountQconfig(val, appId) {
        this._sendMetric('ctriputilCountQconfig', {
            'version': NODE_VERSION,
            'appId': appId
        }, val);
    }
    QconfigRequestCount(val, token, type, configFile) {
        this._sendMetric('qconfigResponseCount', {
            'version': NODE_VERSION,
            'token': token,
            'type': type,
            'configFile': configFile,
            'node_qconfig': true
        }, val);
    }
    QconfigExceptionCount(val, configFile, subEnv) {
        this._sendMetric('qconfigRequestExceptionCount', {
            'configFile': configFile,
            'subEnv': subEnv,
            'version': NODE_VERSION,
            'node_qconfig': true
        }, val);
    }
}
exports.default = MetricMonitor;

type ConfigString = string;
type JSONString = string;
type PropertyString = string;
type XMLString = string;
type YMLString = string;
type FileContent = string;

declare interface EventEmitter {
}

interface options { fileName: string, defaultConfig?: string, isHttps?: boolean, skipParsing?: boolean, isKipWarning?: boolean, isIgnite?: boolean }

export interface QConfig {
    getConfig(
        fileName: ConfigString | options,
        defaultConfig?: JSONString | PropertyString | XMLString | YMLString | FileContent,
        isHttps?: boolean,
        skipParsing?: boolean,
        isKipWarning?: boolean
    ): QConfigObject;
    init: () => Promise<void>
}

export interface QConfigObject extends EventEmitter {
    getSync<T>(key?: string | { key?: string, skipParsing?: boolean, deepCopy?: boolean, isFileExist?: boolean }): T;
    get<T>(key?: string | { key?: string, isFileExist?: boolean }): Promise<T>;

    on<T>(event: "change", listener: (data: T) => void): void;
    removeListener(fileName: string): void;
}

export const _qconfig: QConfig;

export default _qconfig;

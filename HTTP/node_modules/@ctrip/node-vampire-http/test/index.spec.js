const assert = require('assert');
const http = require('http');
const https = require('https');
const request = require('../');
const nock = require('nock');
nock('http://127.0.0.1:8899')
    .post('/hello')
    .reply(200, {
        ResponseStatus: {
            Timestamp: '/Date(1589772557210+0800)/',
            Ack: 'Success',
            Errors: [],
            Extension: []
        },
        IP: 'test case'
    });

describe('node-vampire-http UT', () => {
    let p;
    beforeEach(async () => {
        p = Promise.resolve();
    });
    it('访问内网地址', (done) => {
        p.then(() => request('http://developer.fx.ctripcorp.com/index.html').then((content) => {
            let testName = 'Offline Empty Option Test';
            assert(typeof content == 'string', testName + ': Invalid Content Type');
            assert(content.indexOf('Developer Center') != -1, testName + ': Invalid Content');
            done()
        }));
    });
    it('访问内网地址,指定contentType:json', (done) => {
        p.then(() => request('http://developer.fx.ctripcorp.com/api/qrcode.node.js', {
            contentType: 'json'
        }).then((content) => {
            let testName = 'Offline JSON Test';
            assert(typeof content == 'object', testName + ': Invalid Content Type');
            assert(content.message == 'Invalid Url', testName + ': Invalid Content');
            done();
        }));
    });
    it('访问内网地址,指定contentType:json,指定headers', (done) => {
        p.then(() => request('http://127.0.0.1:8899/hello', {
            contentType: 'json',
            headers: {
                type: 'json'
            }
        }, JSON.stringify({test: '111'})).then((content) => {
           let testName = 'Offline JSON Test';
            assert(typeof content == 'object', testName + ': Invalid Content Type');
            done();
        }));
    });
    it('访问内网地址,指定contentType:json', (done) => {
        p.then(() => request('http://developer.fx.ctripcorp.com/api/qrcode.node.js', {
            contentType: 'json'
        }).then((content) => {
            let testName = 'Offline JSON Test';
            assert(typeof content == 'object', testName + ': Invalid Content Type');
            assert(content.message == 'Invalid Url', testName + ': Invalid Content');
            done();
        }));
    });
    it('访问内网地址,指定gzip压缩', (done) => {
        p.then(() => request('https://m.ctrip.com/html5/', {
            contentType: 'response',
            gzip: true
        }).then((content) => {
            let testName = 'Online Gzip Test';
            assert(typeof content == 'object', testName + ': Invalid Content Type');
            assert(content instanceof http.IncomingMessage, testName + ': Invalid Response');
            assert(content.headers['content-encoding'] == 'gzip', testName + ': Invalid Content Encoding');
            assert(content.body.toString().indexOf('携程旅行网是中国领先的在线旅行服务公司') != -1, testName + ': Invalid Content');
            done()
        }));
    });
    it('访问内网地址,指定gzip压缩', (done) => {
        p.then(() => request('https://m.ctrip.com/html5/', {
            contentType: 'response',
            gzip: true
        }).then((content) => {
            let testName = 'Online Gzip Test';
            assert(typeof content == 'object', testName + ': Invalid Content Type');
            assert(content instanceof http.IncomingMessage, testName + ': Invalid Response');
            assert(content.headers['content-encoding'] == 'gzip', testName + ': Invalid Content Encoding');
            assert(content.body.toString().indexOf('携程旅行网是中国领先的在线旅行服务公司') != -1, testName + ': Invalid Content');
            done()
        }));
    });
    it('访问外网https地址', (done) => {
        p.then(() => request('https://www.google.com/', {
            proxy: true
        }).then((content) => {
            let testName = 'Proxy Test';
            assert(typeof content == 'string', testName + ': Invalid Content Type');
            assert(content.indexOf('<title>Google</title>') != -1, testName + ': Invalid Content');
            console.log(testName + ' Passed');
            done();
        }));
    });
    it('访问内网https地址', (done) => {
        p.then(() => request('https://cas.uat.qa.nt.ctripcorp.com/caso/serviceValidate?response_type=JSON', {
            contentType: 'json',
            // rejectUnauthorized: false
            agent: new https.Agent({
                rejectUnauthorized: false
            })
        }).then(content => {
            assert(content.code, 40001);
            assert(content.message, 'illegal argument detail : ticket can not be null.');
            done()
        }));
    });
    it('访问外网 http 地址', (done) => {
        p.then(() => request('http://www.baidu.com/', {
            proxy: true
        }).then((content) => {
            let testName = 'Proxy Test';
            assert(typeof content == 'string', testName + ': Invalid Content Type');
            assert(content.indexOf('<title>百度一下，你就知道</title>') != -1, testName + ': Invalid Content');
            console.log(testName + ' Passed');
            done();
        }));
    });
    after(() => {
        p.then(() => {
            console.log('All Tests Passed');
            process.exit(0)
        }).catch((err) => {
            console.error(err);
            process.exit(1);
        });
    })
});



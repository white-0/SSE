var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Formatter } from '../base';
import { getPlural } from '../plural';
import { DurationDayUnit, DurationHourUnit, DurationMinuteUnit, DurationSecondUnit, } from './unit';
var DurationFormatter = (function (_super) {
    __extends(DurationFormatter, _super);
    function DurationFormatter(i18n, locale) {
        var _this = _super.call(this, i18n) || this;
        _this.locale = locale || 'en-US';
        return _this;
    }
    DurationFormatter.prototype.convertToString = function (duration, pattern, isAutoAbbr, isFullName) {
        if (isAutoAbbr === void 0) { isAutoAbbr = false; }
        if (isFullName === void 0) { isFullName = false; }
        var units = [];
        for (var index = 0; index < pattern.length; index++) {
            var unit = this.unitFromFlag(pattern.charAt(index));
            if (unit !== null) {
                units.push(unit);
            }
        }
        this.calculateValue(duration, units);
        this.autoAbbrUnits(isAutoAbbr, units);
        return this.formatString(isFullName, units);
    };
    DurationFormatter.prototype.getByTemplate = function (key, values) {
        var sharkValue = getPlural(this.getI18n(), key, this.locale, values[0]);
        if (!sharkValue) {
            sharkValue = this.get(key);
        }
        values.forEach(function (value, i) {
            sharkValue = sharkValue.replace("%".concat(i + 1, "$s"), value);
        });
        return sharkValue;
    };
    DurationFormatter.prototype.unitFromFlag = function (flag) {
        switch (flag) {
            case 'd':
                return new DurationDayUnit();
            case 'h':
                return new DurationHourUnit();
            case 'm':
                return new DurationMinuteUnit();
            case 's':
                return new DurationSecondUnit();
            default:
                return null;
        }
    };
    DurationFormatter.prototype.calculateValue = function (duration, units) {
        units.forEach(function (unit, index) {
            if (index === 0) {
                unit.decimalTransform(duration);
            }
            else {
                unit.transform(duration);
            }
        });
    };
    DurationFormatter.prototype.autoAbbrUnits = function (isAutoAbbr, units) {
        if (!isAutoAbbr) {
            return;
        }
        var isAllZero = true;
        units.forEach(function (unit, index) {
            if (index === 0 && unit.value === 0 ||
                index > 0 && units[index - 1].value === 0 && unit.value === 0) {
                unit.display = false;
            }
            else {
                isAllZero = false;
            }
        });
        if (isAllZero) {
            if (units.length > 0) {
                units[units.length - 1].display = true;
            }
            return;
        }
        this.matchNoneZero(units);
    };
    DurationFormatter.prototype.matchNoneZero = function (units) {
        for (var index = units.length - 1; index >= 0; index--) {
            var unit = units[index];
            if (unit.value !== 0) {
                break;
            }
            unit.display = false;
        }
    };
    DurationFormatter.prototype.formatString = function (isFullName, units) {
        return isFullName
            ? this.formatFullNameString(units)
            : this.formatShortNameString(units);
    };
    DurationFormatter.prototype.formatFullNameString = function (units) {
        var _this = this;
        var result = [];
        var seperator = this.get('key.duration.space', '') === 'SPACE' ? ' ' : '';
        units.forEach(function (unit) {
            if (unit.display) {
                result.push(_this.getByTemplate(unit.fullSharkKey, [unit.value.toString()]));
            }
        });
        return result.join(seperator);
    };
    DurationFormatter.prototype.formatShortNameString = function (units) {
        var unitValues = [];
        var sharkKey = 'key.duration.';
        units.forEach(function (unit) {
            if (unit.display) {
                var suffix = unit.shortSharkKey.split('.')[2];
                unitValues.push(String(unit.value));
                sharkKey += suffix;
            }
        });
        return this.getByTemplate(sharkKey, unitValues);
    };
    return DurationFormatter;
}(Formatter));
export { DurationFormatter };

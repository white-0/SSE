var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import Big from 'big.js';
import { Formatter } from '../base';
import { TEMPLATE_MAP as PERCENTAGE_TEMPLATE_MAP, } from '../measurement/keys';
import { ROUNDING_MODE } from '../types';
import { getCurrencyKey, getSpecialCurrencyKey } from './keys';
import { DEFAULT_INVALID_FACTOR, DEFAULT_NUMBER_TEMPLATE, MAX_SHORT_NUMBER_POWER, SHORT_NUMBER_TEMPLATE_MAP, TEMPLATE_MAP as CURRENCY_TEMPLATE_MAP, UNICODE_SYMBOL, } from './template';
var NumberFormatter = (function (_super) {
    __extends(NumberFormatter, _super);
    function NumberFormatter(i18n) {
        return _super.call(this, i18n) || this;
    }
    NumberFormatter.prototype.decimalString = function (decimalNum, useGrouping, minimumFractionDigits, maximumFractionDigits, extendOption) {
        if (useGrouping === void 0) { useGrouping = true; }
        if (minimumFractionDigits === void 0) { minimumFractionDigits = 0; }
        if (maximumFractionDigits === void 0) { maximumFractionDigits = 3; }
        if (extendOption === void 0) { extendOption = {
            numberFormatCustomized: DEFAULT_NUMBER_TEMPLATE,
            roundingMode: ROUNDING_MODE.HALF_EVEN,
            showPercentage: false,
            trimRedundantZero: false,
        }; }
        decimalNum = extendOption.showPercentage
            ? (Number(decimalNum) * 100).toString()
            : decimalNum.toString();
        decimalNum = this.handleFractionDigits(decimalNum, minimumFractionDigits, maximumFractionDigits, extendOption.roundingMode);
        if (extendOption.trimRedundantZero) {
            decimalNum = this.trimRedundantZero(decimalNum, minimumFractionDigits);
        }
        var fractionSymbol = this.get("key.l10n.number.separator.decimal") === 'COMMA'
            ? UNICODE_SYMBOL.COMMA
            : UNICODE_SYMBOL.FULL_STOP;
        decimalNum = decimalNum.replace('.', fractionSymbol);
        decimalNum = this.handleGroupSeparator(decimalNum, fractionSymbol, useGrouping);
        if (extendOption.showPercentage) {
            decimalNum = this.handleSymbolPosition('percentage', decimalNum);
        }
        var numberFormatCustomized = extendOption.numberFormatCustomized ||
            DEFAULT_NUMBER_TEMPLATE;
        return numberFormatCustomized.replace(DEFAULT_NUMBER_TEMPLATE, decimalNum);
    };
    NumberFormatter.prototype.shortDecimalString = function (decimalNum, useGrouping, minimumFractionDigits, maximumFractionDigits, extendOption) {
        if (useGrouping === void 0) { useGrouping = true; }
        if (minimumFractionDigits === void 0) { minimumFractionDigits = 0; }
        if (maximumFractionDigits === void 0) { maximumFractionDigits = 3; }
        if (extendOption === void 0) { extendOption = {
            numberFormatCustomized: DEFAULT_NUMBER_TEMPLATE,
            roundingMode: ROUNDING_MODE.HALF_EVEN,
            showPercentage: false,
            trimRedundantZero: true,
        }; }
        var factor = this.handleShortNumberFactor(decimalNum.toString());
        if (factor === 0) {
            return this.decimalString(decimalNum, useGrouping, minimumFractionDigits, maximumFractionDigits, extendOption);
        }
        var formattedNumber = (Number(decimalNum) / Math.pow(10.0, factor)).toString();
        var numberString = this.decimalString(formattedNumber, useGrouping, minimumFractionDigits, maximumFractionDigits, extendOption);
        var numberSymbol = this.get("".concat("key.l10n.short.number.factor", ".").concat(factor));
        return this.handleSymbolPosition('short', numberString, numberSymbol);
    };
    NumberFormatter.prototype.currencyString = function (decimalNum, currency, useGrouping, minimumFractionDigits, maximumFractionDigits, extendOption) {
        if (currency === void 0) { currency = 'USD'; }
        if (useGrouping === void 0) { useGrouping = true; }
        if (extendOption === void 0) { extendOption = {
            currencyFormatCustomized: DEFAULT_NUMBER_TEMPLATE,
            numberFormatCustomized: DEFAULT_NUMBER_TEMPLATE,
            roundingMode: ROUNDING_MODE.HALF_EVEN,
        }; }
        return this.formatCurrencyString(decimalNum, currency, useGrouping, minimumFractionDigits, maximumFractionDigits, extendOption);
    };
    NumberFormatter.prototype.specialCurrencyString = function (decimalNum, currency, useGrouping, minimumFractionDigits, maximumFractionDigits, extendOption) {
        if (currency === void 0) { currency = 'USD'; }
        if (useGrouping === void 0) { useGrouping = true; }
        if (extendOption === void 0) { extendOption = {
            currencyFormatCustomized: DEFAULT_NUMBER_TEMPLATE,
            numberFormatCustomized: DEFAULT_NUMBER_TEMPLATE,
            roundingMode: ROUNDING_MODE.HALF_EVEN,
        }; }
        return this.formatCurrencyString(decimalNum, currency, useGrouping, minimumFractionDigits, maximumFractionDigits, extendOption, true);
    };
    NumberFormatter.prototype.formatCurrencyString = function (decimalNum, currency, useGrouping, minimumFractionDigits, maximumFractionDigits, extendOption, isSpecial) {
        if (currency === void 0) { currency = 'USD'; }
        if (useGrouping === void 0) { useGrouping = true; }
        if (extendOption === void 0) { extendOption = {
            currencyFormatCustomized: DEFAULT_NUMBER_TEMPLATE,
            numberFormatCustomized: DEFAULT_NUMBER_TEMPLATE,
            roundingMode: ROUNDING_MODE.HALF_EVEN,
        }; }
        currency = (currency || 'usd').toLowerCase();
        if (maximumFractionDigits === null || maximumFractionDigits === undefined) {
            maximumFractionDigits = parseInt(this.get(getCurrencyKey("key.l10n.currency.minor", currency)) || '0', 10);
        }
        else {
            maximumFractionDigits = Math.min(maximumFractionDigits, parseInt(this.get(getCurrencyKey("key.l10n.currency.minor", currency)) || '0', 10));
        }
        if (minimumFractionDigits === null || minimumFractionDigits === undefined) {
            minimumFractionDigits = parseInt(this.get(getCurrencyKey("key.l10n.currency.minimum", currency)) || '0', 10);
        }
        var decimalNumValue = Number(decimalNum);
        decimalNum = this.decimalString(Math.abs(decimalNumValue).toString(), useGrouping, minimumFractionDigits, maximumFractionDigits, {
            numberFormatCustomized: extendOption.numberFormatCustomized,
            roundingMode: extendOption.roundingMode,
            showPercentage: false,
        });
        var currencyFormatCustomized = extendOption.currencyFormatCustomized || DEFAULT_NUMBER_TEMPLATE;
        var currencySymbol = isSpecial
            ? this.get(getSpecialCurrencyKey("key.l10n.currency.symbol", currency)) || this.get(getCurrencyKey("key.l10n.currency.symbol", currency)) || currency.toUpperCase()
            : this.get(getCurrencyKey("key.l10n.currency.symbol", currency)) || currency.toUpperCase();
        currencySymbol = currencyFormatCustomized.replace(DEFAULT_NUMBER_TEMPLATE, currencySymbol);
        return "".concat(decimalNumValue < 0 ? '-' : '').concat(this.handleSymbolPosition('currency', decimalNum, currencySymbol, currency));
    };
    NumberFormatter.prototype.handleFractionDigits = function (decimalNum, minimumFractionDigits, maximumFractionDigits, roundingMode) {
        minimumFractionDigits = minimumFractionDigits > 0 && minimumFractionDigits <= 20
            ? minimumFractionDigits
            : 0;
        maximumFractionDigits = maximumFractionDigits !== null && maximumFractionDigits !== undefined
            ? Math.max(minimumFractionDigits, maximumFractionDigits)
            : 3;
        var fractionNum = decimalNum.replace(/[^\d.-]/g, '').split('').reverse().indexOf('.');
        if (fractionNum > maximumFractionDigits) {
            fractionNum = maximumFractionDigits;
        }
        else if (fractionNum < minimumFractionDigits) {
            fractionNum = minimumFractionDigits;
        }
        Big.RM = roundingMode !== null && roundingMode !== undefined
            ? roundingMode
            : ROUNDING_MODE.HALF_EVEN;
        return Big(decimalNum).toFixed(fractionNum) || '';
    };
    NumberFormatter.prototype.trimRedundantZero = function (decimalNum, minimumFractionDigits) {
        var _a = decimalNum.split(UNICODE_SYMBOL.FULL_STOP), integer = _a[0], fraction = _a[1];
        var _fraction = fraction;
        if (_fraction && /0$/.test(_fraction)) {
            while (_fraction.length >= minimumFractionDigits && /0$/.test(_fraction)) {
                _fraction = _fraction.replace(/0$/, '');
            }
            return _fraction
                ? "".concat(integer).concat(UNICODE_SYMBOL.FULL_STOP).concat(_fraction)
                : integer;
        }
        return decimalNum;
    };
    NumberFormatter.prototype.handleGroupSeparator = function (decimalNum, fractionSymbol, useGrouping) {
        if (!useGrouping) {
            return decimalNum;
        }
        var fractionIndex = decimalNum.indexOf(fractionSymbol);
        if (fractionIndex === -1) {
            fractionIndex = decimalNum.length;
        }
        var groupSeparator = this.get("key.l10n.number.separator.grouping");
        var groupingUnicode = UNICODE_SYMBOL[groupSeparator] || UNICODE_SYMBOL.COMMA;
        var numberCount = 0;
        for (var p = fractionIndex - 1; p >= 0; p--) {
            if (decimalNum[p] !== '-') {
                numberCount++;
            }
            if (numberCount > 3) {
                decimalNum = decimalNum.substring(0, p + 1) +
                    groupingUnicode +
                    decimalNum.substring(p + 1);
                numberCount = 1;
            }
        }
        return decimalNum;
    };
    NumberFormatter.prototype.handleSymbolPosition = function (formatUnit, value, symbol, currency) {
        var mapper;
        var template;
        if (formatUnit === 'percentage') {
            mapper = PERCENTAGE_TEMPLATE_MAP;
            template = this.get("key.percent.template");
            symbol = '%';
        }
        else if (formatUnit === 'currency') {
            mapper = CURRENCY_TEMPLATE_MAP;
            template = this.get(getCurrencyKey("key.l10n.currency.format", currency));
            if (!template || template === '-1') {
                template = this.get(getCurrencyKey("key.l10n.currency.format"));
            }
        }
        else {
            mapper = SHORT_NUMBER_TEMPLATE_MAP;
            template = this.get("key.l10n.short.number.format");
        }
        if (template && mapper[template]) {
            return mapper[template](symbol, value);
        }
        return formatUnit === 'percentage' ? "".concat(value).concat(symbol) : "".concat(symbol, " ").concat(value);
    };
    NumberFormatter.prototype.handleShortNumberFactor = function (decimalNum) {
        var factor = Math.floor(Math.log10(Math.abs(Number(decimalNum))));
        if (factor > MAX_SHORT_NUMBER_POWER) {
            factor = MAX_SHORT_NUMBER_POWER;
        }
        var numberSymbol = this.get("".concat("key.l10n.short.number.factor", ".").concat(factor), DEFAULT_INVALID_FACTOR);
        if (numberSymbol === DEFAULT_INVALID_FACTOR) {
            return 0;
        }
        for (var index = factor - 1; index > 1; index--) {
            if (this.get("".concat("key.l10n.short.number.factor", ".").concat(index), DEFAULT_INVALID_FACTOR) !== numberSymbol) {
                return index + 1;
            }
        }
        return 0;
    };
    return NumberFormatter;
}(Formatter));
export { NumberFormatter };

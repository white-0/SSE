"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateTimeFormatter = void 0;
var dayjs_1 = __importDefault(require("dayjs"));
var updateLocale_1 = __importDefault(require("dayjs/plugin/updateLocale"));
var base_1 = require("../base");
var converter_1 = require("./converter");
var keys_1 = require("./keys");
dayjs_1.default.extend(updateLocale_1.default);
var DateTimeFormatter = (function (_super) {
    __extends(DateTimeFormatter, _super);
    function DateTimeFormatter(i18n, timezone) {
        var _this = _super.call(this, i18n) || this;
        _this.initKeys();
        _this.dayjs = dayjs_1.default;
        _this.timezone = timezone;
        _this.dayjs.Ls[keys_1.LOCALE] = {
            formats: {},
            name: keys_1.LOCALE,
            relativeTime: {},
        };
        return _this;
    }
    DateTimeFormatter.prototype.setI18n = function (i18n) {
        _super.prototype.setI18n.call(this, i18n);
        this.initKeys();
    };
    DateTimeFormatter.prototype.mdShortString = function (timestamp) {
        return this.getString("key.datetime.md.short", timestamp);
    };
    DateTimeFormatter.prototype.mdFullString = function (timestamp) {
        return this.getString("key.datetime.md.full", timestamp);
    };
    DateTimeFormatter.prototype.mdCalendarString = function (timestamp) {
        return this.getString("key.datetime.md.calendar", timestamp, true);
    };
    DateTimeFormatter.prototype.mdeFullString = function (timestamp) {
        return this.getString("key.datetime.mde.full", timestamp);
    };
    DateTimeFormatter.prototype.mdeShortString = function (timestamp) {
        return this.getString("key.datetime.mde.short", timestamp);
    };
    DateTimeFormatter.prototype.mdhmFullString = function (timestamp) {
        return this.getString("key.datetime.mdhm.full", timestamp);
    };
    DateTimeFormatter.prototype.mdhmShortString = function (timestamp) {
        return this.getString("key.datetime.mdhm.short", timestamp);
    };
    DateTimeFormatter.prototype.mdhmsFullString = function (timestamp) {
        return this.getString("key.datetime.mdhms.full", timestamp);
    };
    DateTimeFormatter.prototype.mdhmsShortString = function (timestamp) {
        return this.getString("key.datetime.mdhms.short", timestamp);
    };
    DateTimeFormatter.prototype.ymCalendarString = function (timestamp) {
        return this.getString("key.datetime.ym.calendar", timestamp, true);
    };
    DateTimeFormatter.prototype.ymFullString = function (timestamp) {
        return this.getString("key.datetime.ym.full", timestamp);
    };
    DateTimeFormatter.prototype.ymShortString = function (timestamp) {
        return this.getString("key.datetime.ym.short", timestamp);
    };
    DateTimeFormatter.prototype.ymdFullString = function (timestamp) {
        return this.getString("key.datetime.ymd.full", timestamp);
    };
    DateTimeFormatter.prototype.ymdShortString = function (timestamp) {
        return this.getString("key.datetime.ymd.short", timestamp);
    };
    DateTimeFormatter.prototype.ymdhmFullString = function (timestamp) {
        return this.getString("key.datetime.ymdhm.full", timestamp);
    };
    DateTimeFormatter.prototype.ymdhmShortString = function (timestamp) {
        return this.getString("key.datetime.ymdhm.short", timestamp);
    };
    DateTimeFormatter.prototype.ymdhmsFullString = function (timestamp) {
        return this.getString("key.datetime.ymdhms.full", timestamp);
    };
    DateTimeFormatter.prototype.ymdhmsShortString = function (timestamp) {
        return this.getString("key.datetime.ymdhms.short", timestamp);
    };
    DateTimeFormatter.prototype.ymdeFullString = function (timestamp) {
        return this.getString("key.datetime.ymde.full", timestamp);
    };
    DateTimeFormatter.prototype.ymdeShortString = function (timestamp) {
        return this.getString("key.datetime.ymde.short", timestamp);
    };
    DateTimeFormatter.prototype.ymdhmeFullString = function (timestamp) {
        return this.getString("key.datetime.ymdhme.full", timestamp);
    };
    DateTimeFormatter.prototype.ymdhmeShortString = function (timestamp) {
        return this.getString("key.datetime.ymdhme.short", timestamp);
    };
    DateTimeFormatter.prototype.ymdhmseFullString = function (timestamp) {
        return this.getString("key.datetime.ymdhmse.full", timestamp);
    };
    DateTimeFormatter.prototype.ymdhmseShortString = function (timestamp) {
        return this.getString("key.datetime.ymdhmse.short", timestamp);
    };
    DateTimeFormatter.prototype.hmeShortString = function (timestamp) {
        return this.getString("key.datetime.hme.short", timestamp);
    };
    DateTimeFormatter.prototype.hmeFullString = function (timestamp) {
        return this.getString("key.datetime.hme.full", timestamp);
    };
    DateTimeFormatter.prototype.hmseShortString = function (timestamp) {
        return this.getString("key.datetime.hmse.short", timestamp);
    };
    DateTimeFormatter.prototype.hmseFullString = function (timestamp) {
        return this.getString("key.datetime.hmse.full", timestamp);
    };
    DateTimeFormatter.prototype.eFullString = function (timestamp) {
        return this.getString("key.datetime.e.full", timestamp);
    };
    DateTimeFormatter.prototype.eShortString = function (timestamp) {
        return this.getString("key.datetime.e.short", timestamp);
    };
    DateTimeFormatter.prototype.mFullString = function (timestamp) {
        return this.getString("key.datetime.m.full", timestamp);
    };
    DateTimeFormatter.prototype.mShortString = function (timestamp) {
        return this.getString("key.datetime.m.short", timestamp);
    };
    DateTimeFormatter.prototype.hmString = function (timestamp) {
        return this.getString("key.datetime.hm", timestamp);
    };
    DateTimeFormatter.prototype.hmsString = function (timestamp) {
        return this.getString("key.datetime.hms", timestamp);
    };
    DateTimeFormatter.prototype.yString = function (timestamp) {
        return this.getString("key.datetime.y", timestamp);
    };
    DateTimeFormatter.prototype.mdhmeShortString = function (timestamp) {
        return this.getString("key.datetime.mdhme.short", timestamp);
    };
    DateTimeFormatter.prototype.mdhmeFullString = function (timestamp) {
        return this.getString("key.datetime.mdhme.full", timestamp);
    };
    DateTimeFormatter.prototype.dFullString = function (timestamp) {
        return this.getString("key.datetime.d.full", timestamp);
    };
    DateTimeFormatter.prototype.dShortString = function (timestamp) {
        return this.getString("key.datetime.d.short", timestamp);
    };
    DateTimeFormatter.prototype.initKeys = function () {
        this.months = this.get("key.l10n.datetime.month.names").split(',');
        this.shortMonths = this.get("key.l10n.datetime.month.names.abbreviations").split(',');
        this.standaloneMonths = this.get("key.l10n.datetime.month.standalone.names").split(',');
        this.shortStandaloneMonths = this.get("key.l10n.datetime.month.standalone.names.abbreviations").split(',');
        this.shortCalendarMonths = this.get("key.l10n.datetime.month.calendar.names.abbreviations").split(',');
        this.weekdays = this.get("key.l10n.datetime.weekday.names").split(',');
        this.shortWeekdays = this.get("key.l10n.datetime.weekday.names.abbreviations").split(',');
        this.meridiemAM = this.get("key.l10n.datetime.am");
        this.meridiemPM = this.get("key.l10n.datetime.pm");
    };
    DateTimeFormatter.prototype.getLocaleSpecification = function (format, isCalendar) {
        var _this = this;
        var ls = {
            weekdays: this.weekdays,
            weekdaysShort: this.shortWeekdays,
        };
        if (format.indexOf('LLLL') > -1) {
            ls.months = function (dayjsInstance, _format) {
                if (/D[oD]?(\[[^[\]]*\]|\s)+MMMM?/.test(_format)) {
                    return _this.months[dayjsInstance.month()];
                }
                return _this.standaloneMonths[dayjsInstance.month()];
            };
            ls.monthsShort = this.shortMonths;
        }
        else if (format.indexOf('LLL') > -1) {
            ls.months = this.months;
            ls.monthsShort = function (dayjsInstance, _format) {
                if (/D[oD]?(\[[^[\]]*\]|\s)+MMM?/.test(_format)) {
                    return _this.shortMonths[dayjsInstance.month()];
                }
                return _this.shortStandaloneMonths[dayjsInstance.month()];
            };
        }
        else {
            ls.months = this.months;
            ls.monthsShort = isCalendar ? this.shortCalendarMonths : this.shortMonths;
        }
        if (this.meridiemAM && this.meridiemPM) {
            ls.meridiem = function (hour) {
                return hour < 12 ? _this.meridiemAM : _this.meridiemPM;
            };
        }
        return ls;
    };
    DateTimeFormatter.prototype.getString = function (format, timestamp, isCalendar) {
        if (isCalendar === void 0) { isCalendar = false; }
        var formatStr = this.get(format);
        var localeSpecification = this.getLocaleSpecification(formatStr, isCalendar);
        var convertedFormatStr = (0, converter_1.convertFormat)(formatStr);
        if (!convertedFormatStr) {
            console.log("Datetime formatter null(".concat(format, ", ").concat(timestamp, "), please check 6002 i18n is ready!"));
            return '';
        }
        this.dayjs.updateLocale(keys_1.LOCALE, localeSpecification);
        var result = this.dayjs.call(this.dayjs, timestamp)
            .add((0, converter_1.convertTimezoneOffset)(this.timezone), 'hour')
            .locale(keys_1.LOCALE)
            .format(convertedFormatStr);
        return result;
    };
    return DateTimeFormatter;
}(base_1.Formatter));
exports.DateTimeFormatter = DateTimeFormatter;

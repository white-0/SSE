"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RULE_MAPPING = void 0;
var few = __importStar(require("./few"));
var many = __importStar(require("./many"));
var other = __importStar(require("./other"));
var zero = __importStar(require("./zero"));
var singular = __importStar(require("./singular"));
var two = __importStar(require("./two"));
var PLURAL_TYPE = {
    ZERO: '.pluralsuffix.zero',
    ONE: '',
    TWO: '.pluralsuffix.two',
    FEW: '.pluralsuffix.few',
    MANY: '.pluralsuffix.many',
    OTHER: '.pluralsuffix.other',
};
exports.RULE_MAPPING = {
    ZH: [[PLURAL_TYPE.ONE, singular.DEFAULT]],
    JA: [[PLURAL_TYPE.ONE, singular.DEFAULT]],
    KO: [[PLURAL_TYPE.ONE, singular.DEFAULT]],
    ID: [[PLURAL_TYPE.ONE, singular.DEFAULT]],
    MS: [[PLURAL_TYPE.ONE, singular.DEFAULT]],
    TH: [[PLURAL_TYPE.ONE, singular.DEFAULT]],
    VI: [[PLURAL_TYPE.ONE, singular.DEFAULT]],
    DE: [
        [PLURAL_TYPE.ONE, singular.DE],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    ES: [
        [PLURAL_TYPE.ONE, singular.ES],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    FR: [
        [PLURAL_TYPE.ONE, singular.FR],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    EN: [
        [PLURAL_TYPE.ONE, singular.EN],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    TL: [
        [PLURAL_TYPE.ONE, singular.TL],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    TR: [
        [PLURAL_TYPE.ONE, singular.TR],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    PT: [
        [PLURAL_TYPE.ONE, singular.PT],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    EL: [
        [PLURAL_TYPE.ONE, singular.EL],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    NL: [
        [PLURAL_TYPE.ONE, singular.NL],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    IT: [
        [PLURAL_TYPE.ONE, singular.IT],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    SV: [
        [PLURAL_TYPE.ONE, singular.SV],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    FI: [
        [PLURAL_TYPE.ONE, singular.FI],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    NO: [
        [PLURAL_TYPE.ONE, singular.NO],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    KK: [
        [PLURAL_TYPE.ONE, singular.KK],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    DA: [
        [PLURAL_TYPE.ONE, singular.DA],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    'pt-PT': [
        [PLURAL_TYPE.ONE, singular.pt_PT],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    RU: [
        [PLURAL_TYPE.ONE, singular.RU],
        [PLURAL_TYPE.FEW, few.RU],
        [PLURAL_TYPE.MANY, many.RU],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    PL: [
        [PLURAL_TYPE.ONE, singular.PL],
        [PLURAL_TYPE.FEW, few.PL],
        [PLURAL_TYPE.MANY, many.PL],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    UK: [
        [PLURAL_TYPE.ONE, singular.UK],
        [PLURAL_TYPE.FEW, few.UK],
        [PLURAL_TYPE.MANY, many.UK],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    AR: [
        [PLURAL_TYPE.ZERO, zero.AR],
        [PLURAL_TYPE.ONE, singular.AR],
        [PLURAL_TYPE.TWO, two.AR],
        [PLURAL_TYPE.FEW, few.AR],
        [PLURAL_TYPE.MANY, many.AR],
        [PLURAL_TYPE.OTHER, other.DEFAULT],
    ],
    DEFAULT: [[PLURAL_TYPE.ONE, singular.DEFAULT]],
};

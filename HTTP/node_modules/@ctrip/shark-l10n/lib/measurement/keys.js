"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KEY_PREFERENCES_TEMPERATURE = exports.KEY_PREFERENCES_MEASUREMENT = exports.TEMPLATE_MAP = exports.TEMPLATE = exports.SYMBOL = void 0;
exports.SYMBOL = {
    Celsius: 'key.temperature.celsius.symbol',
    Centimeter: 'key.units.metric.distance.centimeter',
    Fahrenheit: 'key.temperature.fahrenheit.symbol',
    Feet: 'key.units.imperial.distance.feet',
    Inch: 'key.units.imperial.distance.inch',
    Kilogram: 'key.units.metric.weight.kilogram',
    Kilometer: 'key.units.metric.distance',
    Meter: 'key.units.metric.distance.meter',
    Mile: 'key.units.imperial.distance',
    Pound: 'key.units.imperial.weight.pound',
    SquareFeet: 'key.units.imperial.area',
    SquareMeter: 'key.units.metric.area',
};
exports.TEMPLATE = {
    Celsius: 'key.temperature.celsius.symbol.template',
    Centimeter: 'key.units.metric.distance.centimeter.template',
    Fahrenheit: 'key.temperature.fahrenheit.symbol.template',
    Feet: 'key.units.imperial.distance.feet.template',
    Inch: 'key.units.imperial.distance.inch.template',
    Kilogram: 'key.units.metric.weight.kilogram.template',
    Kilometer: 'key.units.metric.distance.template',
    Meter: 'key.units.metric.distance.meter.template',
    Mile: 'key.units.imperial.distance.template',
    Pound: 'key.units.imperial.weight.pound.template',
    SquareFeet: 'key.units.imperial.area.template',
    SquareMeter: 'key.units.metric.area.template',
};
exports.TEMPLATE_MAP = {
    NUMBER_SPACE_UNIT: function (sym, val) { return "".concat(val, " ").concat(sym); },
    NUMBER_UNIT: function (sym, val) { return "".concat(val).concat(sym); },
    UNIT_NUMBER: function (sym, val) { return "".concat(sym).concat(val); },
    UNIT_SPACE_NUMBER: function (sym, val) { return "".concat(sym, " ").concat(val); },
};
exports.KEY_PREFERENCES_MEASUREMENT = 'key.l10n.unit.measurement';
exports.KEY_PREFERENCES_TEMPERATURE = 'key.l10n.unit.temperature';

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.NameFormatter = void 0;
var base_1 = require("../base");
var types_1 = require("../types");
var NameFormatter = (function (_super) {
    __extends(NameFormatter, _super);
    function NameFormatter(i18n) {
        return _super.call(this, i18n) || this;
    }
    NameFormatter.prototype.nameTypesWithCredentialType = function (credentialType) {
        var order = this.get("key.l10n.name.order.".concat(credentialType.toLowerCase()));
        var names = [];
        if (order !== 'LAST_FIRST' && order !== 'FIRST_LAST') {
            return names;
        }
        var orders = order.split('_');
        for (var _i = 0, orders_1 = orders; _i < orders_1.length; _i++) {
            var item = orders_1[_i];
            var sample = this.get("key.l10n.".concat(item.toLowerCase(), ".name.sample"));
            var sampleForEn = this.get("key.l10n.".concat(item.toLowerCase(), ".name.english.sample"));
            if (item.toUpperCase() === 'FIRST' &&
                credentialType === types_1.CredentialType.UsualNoMidNameCredentialType) {
                sample = this.get("key.l10n.".concat(item.toLowerCase(), ".no.middle.name.sample"));
                sampleForEn = this.get("key.l10n.".concat(item.toLowerCase(), ".no.middle.name.english.sample"));
            }
            names.push({
                sample: sample,
                sampleForEn: sampleForEn,
                title: this.get("key.l10n.".concat(credentialType.toLowerCase(), ".").concat(item.toLowerCase(), ".name.title")),
                type: "".concat(item.toUpperCase(), "_NAME"),
            });
        }
        return names;
    };
    return NameFormatter;
}(base_1.Formatter));
exports.NameFormatter = NameFormatter;

import { Formatter } from '../base';
import { II18n, ROUNDING_MODE } from '../types';
export declare class NumberFormatter extends Formatter {
    constructor(i18n: II18n);
    decimalString(decimalNum: string | number, useGrouping?: boolean, minimumFractionDigits?: number, maximumFractionDigits?: number, extendOption?: Partial<{
        numberFormatCustomized: string;
        roundingMode: ROUNDING_MODE;
        showPercentage: boolean;
        trimRedundantZero: boolean;
    }>): string;
    shortDecimalString(decimalNum: string | number, useGrouping?: boolean, minimumFractionDigits?: number, maximumFractionDigits?: number, extendOption?: Partial<{
        numberFormatCustomized: string;
        roundingMode: ROUNDING_MODE;
        showPercentage: boolean;
        trimRedundantZero: boolean;
    }>): string;
    currencyString(decimalNum: string | number, currency?: string, useGrouping?: boolean, minimumFractionDigits?: number, maximumFractionDigits?: number, extendOption?: Partial<{
        currencyFormatCustomized: string;
        numberFormatCustomized: string;
        roundingMode: ROUNDING_MODE;
    }>): string;
    specialCurrencyString(decimalNum: string | number, currency?: string, useGrouping?: boolean, minimumFractionDigits?: number, maximumFractionDigits?: number, extendOption?: Partial<{
        currencyFormatCustomized: string;
        numberFormatCustomized: string;
        roundingMode: ROUNDING_MODE;
    }>): string;
    private formatCurrencyString;
    private handleFractionDigits;
    private trimRedundantZero;
    private handleGroupSeparator;
    private handleSymbolPosition;
    private handleShortNumberFactor;
}

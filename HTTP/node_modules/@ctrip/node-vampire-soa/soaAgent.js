'use strict'
/*
  带缓存功能的 Soa/SoaWebApi 请求包装器
*/

const SOA = {
    SoaWebApi: require('./soaWebApi.js'),
    Soa: require('./soa.js')
};

const SOAAgentCache = {};

const InitSOAAgent = function(key) {
    return new Promise((resolve, reject) => {
        let isServiceCode = /^\d+$/.test(key); // 纯数字的key，则认为是 serviceCode

        let method = isServiceCode ? 'SoaWebApi' : 'Soa';
        let args = isServiceCode ? {
            serviceCode: key
        } : {
            url: key
        };

        new SOA[method](args, (e, soaClient) => {
            if (e) {
                console.error('[soaAgent] init failed :', key, e);
                reject('initFailed');
                return;
            }

            resolve(soaClient);
        })
    })
}

const SOAAgent = function(key) {
    return {
        clear: function() {
            delete SOAAgentCache[key];
            return this;
        },
        invoke: function(method, params, skipValid=true, ...rest) {
            let agent = SOAAgentCache[key];

            if (typeof agent === 'undefined') {
                agent = SOAAgentCache[key] = InitSOAAgent(key).catch(function(e) {
                    delete SOAAgentCache[key];
                    return Promise.reject(e);
                })
            }

            return new Promise((resolve, reject) => {
                let rejectIncludeResponse = skipValid && params.rejectIncludeResponse;

                if (rejectIncludeResponse) {
                    delete params.rejectIncludeResponse;
                }

                let REJECT = (e, result) => {
                    if (rejectIncludeResponse) {
                        // 返回一个数组, 数组中包含 [错误信息, 请求参数, SOA返回的内容]
                        reject([e, params, result]);
                    } else {
                        reject(e);
                    }
                };

                agent.then((soaClient) => {
                    soaClient.invoke(method, params, (e, result) => {
                        if (e) {
                            REJECT(e, result);
                            return;
                        }

                        resolve(result);
                    }, skipValid, ...rest);
                }).catch(REJECT);
            })
        }
    }
}

module.exports = SOAAgent;

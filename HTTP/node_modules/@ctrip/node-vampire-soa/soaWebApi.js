const qs = require('querystring');
const http = require('@ctrip/node-vampire-http');
const appConfig = require('./appConfig');
const cUtil = require('@ctrip/node-vampire-util');
const cat = require('@ctrip/node-vampire-cat');
const CircuitBreaker = require('./circuitBreaker');
const circuitBreaker = new CircuitBreaker();
const soaMonitor = require('./soaMonitor.js');
const M = new soaMonitor();
const pkg = require('./package.json');
const frameworkVersion = pkg['version'];
const versionPrefix = 'NV-';

// 用K_REVISION判断是否是发布环境，本地和MARS无需开启
const IS_FAAS = process.env.K_REVISION && process.env.FUNCTION_ID && process.env.FUNCTION_ID[0] === '3';
const USE_MESH_SIDECAR = process.env.MESH_SIDECAR_INJECT === 'true' || IS_FAAS;

let SoaWebApi = function (opts, callback) {
    /*wrap original callback
     * callback(e||null) null means success; e means there's an error;
     * callback延用了原本的模式，第一个参数如果为null，则表示没有错误；反之则表示有错误，需要处理
     * 所以这里的resolve中的message为空
     */
    this._init(opts).then((message) => {
        callback(message, this);
    }).catch(e => {
        callback(e, this);
    });
};

SoaWebApi.prototype._init = function (opts) {
    cat.event('SOA2Client.version', versionPrefix + frameworkVersion);
    return new Promise((resolve, reject) => {
        appConfig.init().then(() => {
            if (!opts.serviceCode) {
                return reject('Invalid Soa ServiceCode');
            }

            this.serviceCode = opts.serviceCode;
            this.serviceTimeout = opts.serviceTimeout || appConfig['SOA.Timeout'] || 0;
            this.canary = opts.canary;
            this.format = opts.format || 'json';
            this.serviceTiming = opts.timing || appConfig['SOA.LogTime'] || false; //是否记录performance信息
            // this.isSkipMetadata = opts.isSkipMetadata || false; //2021/4/21新增，可选择不获取metaData且不校验参数
            M.CtriputilCountSOAWebApi(1, this.serviceCode);
            this._soaUrl = opts['soaWebApiUrl'];
            if (opts['soaWebApiUrl'] && !/\/$/.test(opts['soaWebApiUrl'])) {
                this._soaUrl = opts['soaWebApiUrl'] + '/';
            }
            this.agent = opts.agent || null;
            this._isGettingMetaData = false;
            this._getMetaDataQueue = [];
            this.subEnv = {};
            this._propertiesSubEnv = null;

            this.invokeFallbackUrl = false;
            this.serviceId = null;
            this.headers = null;

            this.connectionMode = USE_MESH_SIDECAR ? 'ServiceMesh' : 'WebApi';

            /* 如果Env是测试环境(fws/lpt), 那么需要继续读取子环境信息
             * 如果Env不是测试环境，那么会进入fallback的逻辑
             * 这里临时做一下兼容，原则上应该是由soawebapi operationinfo的接口返回不同的状态来区别
             */
            this.envIsFWS = (['uat', 'pro', 'prod'].indexOf(appConfig['Env']) == -1);

            /**初始化逻辑(当前版本暂时不做，后续重新开直连版本做)
             * 1. 获取serviceKey：http://gov.soa.fx.ctripcorp.com/api/external/soa/getserviceinfo.json?serviceCode=$serviceCode
             * 2. 获取subEnv(测试环境）和serviceUrl（不区分直连or非直连）传入serviceKey @ctrip/node-vampire-artemis client.js->getSubEnv
             * 3. 获取operationinfo  @ctrip/node-vampire-artemis client.js->getServiceUrl
             */
            if (this.envIsFWS && appConfig['SOA.ServerEnv']) {
                this._propertiesSubEnv = appConfig['SOA.ServerEnv']
            } else {
                this._propertiesSubEnv = appConfig['subEnv'] ? appConfig['subEnv'].toLowerCase() : null;
            }
            if (USE_MESH_SIDECAR) {
                !this._soaUrl && (this._soaUrl = `http://${this.serviceCode}.soa.mesh/`);
            }
            let span = cat.span('SOA2Client.Initialization', this.serviceCode);
            span.run((done) => {
                //serviceId必须有，在cat埋点是需要将日志串起来
                this._getServiceInfo(() => {
                    done();
                    return resolve();
                })
            });


        }).catch(e => {
            return reject(e);
        })
    });
};

SoaWebApi.prototype._getServiceInfo = function (callback) {
    let url = appConfig['SOA.ServiceInfo.Url'] + this.serviceCode;
    http(url).then((body) => {
        let result = null;
        try {
            result = JSON.parse(body);
            this.serviceId = result['serviceId'];
            callback();
        } catch (e) {
            cat.event('_getServiceInfo error.', e.message);
            callback(e);
        }
    }).catch((err) => {
        cat.event('_getServiceInfo error.', err)
        callback(err)
    });
}


/**处理_operationinfo的返回值
 *
 */
// SoaWebApi.prototype._handleMetaData = function (url, query, body, statusCode, callback) {
//     this._isGettingMetaData = false

//     let json = null;

//     try {
//         json = JSON.parse(body);
//     } catch (e) {
//         cat.error('SOA2Client.getMetadata url', url);
//         cat.error('SOA2Client.getMetadata body', body);
//         cat.error('SOA2Client.getMetadataError', e.message);

//         if (appConfig.debug) {
//             console.error('[SOA.getMetaData] parse json error.', url, body);
//         }

//     }

//     if (cUtil.type(json) !== 'array') {
//         cat.event('SOA2Client.metadataTypeNotArray' + ' subEnv=' + query, json);
//         if (appConfig.debug) {
//             console.error('subEnv=' + query + ' [SOA.getMetaData] typeof json is not array.', url, body);
//         }

//         /*根据返回值，做处理 */
//         if (this.envIsFWS) {
//             if (statusCode === 404) {
//                 if (query) {
//                     this._propertiesSubEnv = null;
//                     this._getMetaData(null, callback);
//                 } else {
//                     callback('Error MetaData Request Parse Json error: ' + JSON.stringify(json));
//                 }
//             } else {
//                 callback('Error MetaData Request Parse Json error');
//             }
//         } else {
//             callback('Error MetaData Request Parse Json error' + body);
//         }

//         return;
//     }

//     if (this.envIsFWS) {
//         this.subEnv = this._propertiesSubEnv ? {
//             subEnv: this._propertiesSubEnv
//         } : {}
//     }


//     let metaData = {};
//     json.forEach((d) => {
//         if (d.RequestMessage && d.RequestMessage.Json) {
//             let method = d.Name.toLowerCase();
//             let define = null;
//             try {
//                 define = JSON.parse(d.RequestMessage.Json);
//                 if (method && define) {
//                     metaData[method] = {
//                         define: define
//                     };
//                 }
//             } catch (e) {
//                 // empty
//                 metaData[method] = {};
//                 cat.error('SOA2Client.getMetadataRequest JSON parse error', `Method:${method}, Json:${d.RequestMessage.Json}`);
//             }
//         }
//     });

//     this._metaData = metaData;
//     callback(null, null);

//     let fn = null;
//     while ((fn = this._getMetaDataQueue.shift())) {
//         fn(null, null);
//     }
// }

// SoaWebApi.prototype._getMetaData = function (query = null, callback) {
//     this.url = this._soaUrl ? this._soaUrl : appConfig['SOA.WebApi.Url'] + this.serviceCode + '/';
//     if (this.isSkipMetadata) {
//         callback(null, null);
//         return;
//     }
//     if (this._isGettingMetaData) {
//         this._getMetaDataQueue.push(callback);
//         return;
//     }

//     this._isGettingMetaData = true;
//     let metaQuery = '?jsonType=' + this.format;
//     query && (metaQuery = metaQuery + '&subEnv=' + query);
//     let url = this.url + '_operationinfo' + metaQuery;

//     let httpOpt = {
//         'headers': {
//             'Content-Type': 'application/json'
//         },
//         'contentType': 'response'
//     };

//     if (this.invokeFallbackUrl) {
//         this.invokeFallbackUrl = false;
//         httpOpt['gzip'] = true;
//     }

//     http(url, httpOpt).then((res) => {
//         const body = res.body.toString();
//         this._handleMetaData(url, query, body, res.statusCode, callback);
//     }).catch((e) => {
//         console.error('[SoaWebApi]', 'Request Url Error:', url, e);
//         this._isGettingMetaData = false;
//         cat.error('SOA2Client.getMetadataRequestError', e.message);
//         callback(e, null);
//     });
// };

// SoaWebApi.prototype.isValid = function (method, args, errs) {
//     errs = errs || [];

//     if (this._metaData) {
//         if (Object.prototype.hasOwnProperty.call(this._metaData, method)) {
//             let target = this._metaData[method];

//             if (Object.prototype.hasOwnProperty.call(target, 'define')) {
//                 return this._checkVariType(args, target.define, errs);
//             }

//             errs.push('Method (' + method + ') Cann\'t Call By JSON');
//         } else {
//             errs.push('Invalid Method (' + method + ')');
//         }
//     } else {
//         errs.push('Empty MetaData');
//     }

//     return false;
// };

// SoaWebApi.prototype._checkVariType = function (vari1, vari2, errs, key) {
//     errs = errs || [];
//     key = key || 'args';

//     let type1 = cUtil.type(vari1);
//     let type2 = cUtil.type(vari2);

//     if (type1 == type2) {
//         if (type1 == 'object') {
//             for (let k in vari1) {
//                 // fix: 当 vari1 是通过 Object.create(null) 创建的时候, 该对象是没有 hasOwnProperty 方法, 然后代码会出错的问题
//                 // example: typeof require('querystring').parse('foo=bar&abc=xyz&abc=123').hasOwnProperty === 'undefined'
//                 if (Object.prototype.hasOwnProperty.call(vari1, k)) {
//                     if (this._checkVariType(vari1[k], vari2[k], errs, k) === false) {
//                         return false;
//                     }
//                 }
//             }
//         }
//         return true;
//     }

//     if (type2 == 'undefined') {
//         errs.push('Invalid Arguments (' + key + ')');
//     } else {
//         errs.push('Arguments (' + key + ') Type Error, Should Be ' + cUtil.upperCaseFirstChar(type2) + ', But Got ' + cUtil.upperCaseFirstChar(type1));
//     }

//     return false;
// };

/** 新增invokeWithCustomization */

SoaWebApi.prototype.invoke = function (method, args, callback, skipValid = true, ...rest) {
    skipValid || !skipValid; //2022/3/31 删除metadata,skipValid 字段保留是为了向下兼容
    let connectionMode = this.connectionMode;
    this.url = this._soaUrl ? this._soaUrl : appConfig['SOA.WebApi.Url'] + this.serviceCode + '/';
    M.CtriputilCountSOAWebApiInvoke(1, this.serviceCode);
    // 检查webservice的tag值是否已经ready。如果已经ready，直接赋值；如果没有ready，则发送空
    M.SOARequestCount(1, '', connectionMode, 'json',
        this.serviceCode,
        this.serviceCode + '.' + method,
        this.serviceCode);
    M.SOARequestSettingRequesttimeout(this.serviceTimeout, '', connectionMode,
        this.serviceCode,
        this.serviceCode + '.' + method,
        this.serviceCode);
    M.SOARequestSettingRequesttimeoutDistribution(this.serviceTimeout, '', connectionMode,
        M.distribution(this.serviceTimeout),
        this.serviceCode,
        this.serviceCode + '.' + method,
        this.serviceCode);
    // M.sendUsage('CtriputilCountSOAWebApiInvoke', this.serviceCode);

    let span = cat.span('SOA2Client', this.serviceId + '.' + method.toLowerCase());
    span.run((done) => {
        let wrapCallback = (err, result) => {
            if (!err) { // 如果没有出错，则记录耗时
                let t = (new Date() - span.__startTime) || 0; // 修改invoke时间
                // this._metricTagData['webservice'] = this.serviceCode + '.' + method;
                M.SOARequestLatency(t, '', connectionMode,
                    this.serviceCode,
                    this.serviceCode + '.' + method,
                    this.serviceCode);
                M.SOARequestLatencyDistribution(1, '', connectionMode,
                    M.distribution(t),
                    this.serviceCode,
                    this.serviceCode + '.' + method,
                    this.serviceCode);
            }
            callback(err, result);
            done();
        };
        this._invoke(method, args, wrapCallback, ...rest);
    });
};

SoaWebApi.prototype._invoke = function (method, args, callback, ...rest) {
    //如果不是通过url访问的，是app内部invoke的，这个span会为空，导致报错引起内存泄漏
    //容错办法：新增一个catspan
    let connectionMode = this.connectionMode;
    let span = cat.getActiveSpan() || cat.span(null, "InterSpan", method);
    let catMessageId = span.__messageId;
    let catInheritValueOfReqEntity = span.getInheritValue('reqEntity') || null;
    let traceContext = span.getTraceContext ? span.getTraceContext(true).getContext() : false;
    let reqHeaders = catInheritValueOfReqEntity ? catInheritValueOfReqEntity.headers : {};
    let query = rest[0];
    cat.event('query.string', query && qs.stringify(query) || null);
    let reqEphemeralParams = rest[1];
    let isResHeaders = rest[2];
    let isHandleServiceErrorManually = rest[3];
    // 访问部分(酒店BU)soa 服务需要重定向
    let redirect_url = rest[rest.length - 1] && rest[rest.length - 1].statusCode_307_redirect_url ? rest[rest.length - 1].statusCode_307_redirect_url : null;
    method = ('' + method).toLowerCase();
    let reqUrl = redirect_url ? redirect_url : this.url + this.format + '/' + encodeURIComponent(method);
    if (query) {
        query = Object.assign(this.subEnv, query)
    } else {
        query = this.subEnv
    }
    query = qs.stringify(query);
    if (query !== '') {
        reqUrl += '?' + query;
    }
    let body = JSON.stringify(args || {})
    cat.event('SOA2Client.reqSize', reqUrl, Buffer.byteLength(body));
    const rootMessageId = (span.__root && span.__root.__outerIds) ? span.__root.__outerIds['x-cat-root-id'] : span.__messageId;
    let headers = {
        'RootMessageId': rootMessageId, // root message id, 整个调用树的message id
        'CurrentMessageId': catMessageId, // current message id，当前message id，即当前SOA Call所在的Message Id
        'ServerMessageId': cat.getMessageId(), // service端的message id，由call端生成，传给server端
        'app': appConfig['AppID'],
        'SOA20-Client-AppId': appConfig['AppID'],
        'SOA20-Client-Idc': appConfig['IDC'],
        'x-soa20-client-content-length': Buffer.byteLength(body)
    };
    // 2019/7/22新增：应用可自定义headers
    if (reqEphemeralParams && reqEphemeralParams.headers && (cUtil.type(reqEphemeralParams.headers) == 'object')) {
        headers = Object.assign(cUtil.copy(reqEphemeralParams.headers), headers);
    }
    // 2019/7/22 新增：预留全局this.headers,同一个实例下的接口共享this.headers值
    this.headers && (headers = Object.assign(cUtil.copy(this.headers), headers));
    reqHeaders && reqHeaders['x-soa20-caller'] && (headers['x-soa20-caller'] = reqHeaders['x-soa20-caller']);
    /** 新增全链路headers设置 */
    if (traceContext) {
        /** traceContext中的值都设置到header中（增加x-ctx prefix) */
        for (let key in traceContext) {
            if (Object.prototype.hasOwnProperty.call(traceContext, key)) {
                let newKey = 'x-ctx-' + key;
                headers[newKey] = traceContext[key];
            }
        }
    }

    /** 判断是否需要新增堡垒测试的头部（参考自java代码）*/
    let canaryValue = false;
    // 判断context中是否有新的堡垒标识
    canaryValue = traceContext && traceContext['canary-req'];
    // 判断header中是否有老的堡垒标识 或者是否有新的堡垒标识
    if (!canaryValue) {
        canaryValue = (reqHeaders && reqHeaders['x-ctrip-canary-req']) || (reqHeaders && reqHeaders['x-ctx-canary-req']);
    }

    if (canaryValue == '1') { // 如果是有堡垒标示
        headers['x-ctrip-canary-req'] = '1';
        // headers['x-ctrip-canary-soaserviceid'] = this._metricTagData['operation']; // ip直连的时候需要，目前不需要
        let localIP = cUtil.getHostAddress();
        if (localIP) {
            headers['X-Forwarded-For'] = localIP;
        }
        cat.event('Canary.Request', 'Send. Url:' + reqUrl);
    }

    cat.event('RemoteCall', 'PigeonRequest', headers.ServerMessageId); // 很重要，通过这个Event中的message id,可以在Log View查看子的Message Tree

    let httpOpt = {
        'agent': this.agent,
        'contentType': 'response',
        'headers': headers
    };

    if (this.serviceTimeout > 0) {
        httpOpt['responseTimeout'] = this.serviceTimeout;
    }
    reqEphemeralParams && reqEphemeralParams.responseTimeout > 0 && (httpOpt['responseTimeout'] = reqEphemeralParams.responseTimeout); // 2019/7/22 新增,用户可自定义超时时间
    if (appConfig['circuitBreaker.enabled']) { //是否启用熔断
        circuitBreaker.setStatus();
        circuitBreaker.state === appConfig['circuitBreaker.closed'] ? circuitBreaker.recordRequestCount() : '';
        // console.log(circuitBreaker.state);
    }

    httpOpt.time = this.serviceTiming;

    if (!appConfig['circuitBreaker.enabled'] || (appConfig['circuitBreaker.enabled'] && (circuitBreaker.state === appConfig['circuitBreaker.closed'] || circuitBreaker.state === appConfig['circuitBreaker.half-open']))) {
        http(reqUrl, httpOpt, body).then((res) => {
            let ret = null;
            // 酒店BU 客户端访问服务时，需要重定向
            if (res.statusCode == 307 && res.headers && res.headers.location) {
                return this._invoke(method, args, callback, ...rest, {
                    statusCode_307_redirect_url: res.headers.location
                })
            }
            if (res.statusCode && res.statusCode >= 300) {
                M.SOAExceptionCount(1, '', connectionMode,
                    'Ctriputil.errorStatusCode',
                    res.statusCode,
                    this.serviceCode,
                    this.serviceCode + '.' + method,
                    this.serviceCode);
            }
            if (this.serviceTiming) {
                cat.event('SOA2Client.resolveDns', (res.timings && res.timings.dnsLookup) || 'null');
                cat.event('SOA2Client.firstByte', (res.timings && res.timings.firstByte) || 'null');
            }

            let body = res.body.toString();
            try {
                ret = JSON.parse(body);
            } catch (e) {
                if (appConfig['circuitBreaker.enabled']) {
                    circuitBreaker.state === appConfig['circuitBreaker.closed'] ? circuitBreaker.recordFailure() : circuitBreaker.recordHalfOpenTest()
                }
                try {
                    //2020/3/13 包含有 '\u0010' 这样字符串的转义
                    ret = JSON.parse(JSON.parse(JSON.stringify(body).replace(/(^|[^\\])(\\u\d{4})/, '$1\\$2')));
                } catch (err) {
                    if (appConfig.debug) {
                        console.error('[SoaWebApi]', 'Parse Json Error:', reqUrl, JSON.stringify(headers, 0, 2), body, err);
                    }
                    // 当解析response body出错时，将错误的body记录到cat中
                    cat.error('SOA2Client.responseParseJsonError', JSON.stringify({
                        url: reqUrl,
                        body
                    }));
                    callback('Error Parse Json', body);
                    return;
                }
            }
            let status = '',
                responseStatus = null;
            // let responseContainsAck = true;
            try {
                responseStatus = ret.ResponseStatus || ret.responseStatus;
                status = responseStatus.ack || responseStatus.Ack;
            } catch (e) {
                // empty
            }

            cat.event('SOA2Client.resCode', status);
            cat.event('SOA2Client.serviceApp', res.headers['soa20-service-appid']);
            cat.event('SOA2Client.serviceIP', res.headers['soa20-service-hostip']);
            reqHeaders && reqHeaders['x-soa20-caller'] && cat.event('SOA2Client.caller', reqHeaders['x-soa20-caller']);
            isResHeaders ? ret['SOA.ResponseHeaders'] = res.headers : '';
            span.__properties = {
                'SOA2Client.serviceApp': res.headers['soa20-service-appid'],
                'SOA2Client.serviceIP': res.headers['soa20-service-hostip'],
                'SOA2Client.serviceIdc': res.headers['soa20-service-idc'],
                'SOA2Client.caller': reqHeaders && reqHeaders['x-soa20-caller'] || null
            };
            if (isHandleServiceErrorManually || appConfig['SOA.HandleServiceErrorManually']) {
                //如果用户设置自行处理，则将结果直接抛给应用层
                callback(null, ret);
            } else { //是否需要自行处理错误
                /* （暂缓修改）修改responseStatus.ack的逻辑，满足条件之一则认为请求失败
                 *   1. 没有responseStatus属性
                 *   2. status.toLowerCase() == 'failure' (json和bjjson大小写不敏感)
                 */
                let SOAResponseFailedStatus = !(status === 'Success' || status === 0);
                if (SOAResponseFailedStatus) {
                    M.SOAExceptionCount(1, '', connectionMode,
                        'Ctriputil.badRequest',
                        status,
                        this.serviceCode,
                        this.serviceCode + '.' + method,
                        this.serviceCode);
                }
                cat.event('SOA2Client.responseStatusAckValue', status);
                callback(SOAResponseFailedStatus ? 'Reponsestatus Ack is failure or missing' : null, ret);
            }
        }).catch((e) => {
            if (appConfig['circuitBreaker.enabled']) {
                circuitBreaker.state === appConfig['circuitBreaker.closed'] ? circuitBreaker.recordFailure() : circuitBreaker.recordHalfOpenTest()
            }
            cat.event('Node.WebApi.SOA2Client.requestFailure', reqUrl);
            cat.event('SOA2Client.resCode', 'failure');
            cat.error('SOA2Client.invalidRequest', e);
            // function (val, codegenversion, connectionmode, exceptionname, exceptiontype, operation, webservice, servicecode)
            M.SOAExceptionCount(1, '', connectionMode,
                e.name || 'Ctriputil.invalidRequest',
                e.code || 'invalidrequest',
                this.serviceCode,
                this.serviceCode + '.' + method,
                this.serviceCode);
            if (appConfig.debug) {
                console.error('[SoaWebApi]', 'Request Url Error:', reqUrl, JSON.stringify(headers, 0, 2), e);
            }
            callback('Error Soa Request', e);
        })
    } else {
        cat.error('SOA2Client.circuitBreakerOpen', 'circuitBreaker Open time: ' + new Date());
        callback('Error Soa Request', circuitBreaker.openMeassage());
    }


};

SoaWebApi.prototype.addEphemeralHeader = function (reqHeaders) {
    if (cUtil.type(reqHeaders) === 'object') {
        this.headers = reqHeaders;
    }
}

module.exports = SoaWebApi;
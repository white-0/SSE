'use strict';
process.mainModule = {filename: __filename};
const soaWebApi = require('../../soaWebApi');
const assert = require('assert');

describe('The \'SOAWebAPI\' Class', function () {
    let _soaWebApi = null;
    beforeEach((done) => {
        _soaWebApi = new Promise((resolve, reject) => {
            new soaWebApi({
                serviceCode: "10190",
               // format: 'bjjson'
                // serviceTimeout: 1, // 可以自定义timeout
                // canary:true //是否请求堡垒
                // soaWebApiUrl:'http://localhost:8089/nodejs' // 调用本地node soa服务端 调试
            }, function (err, testSoa) {
                if (err) {
                    reject(err);
                }
                resolve(testSoa)
                done()
            })
        })
    })

    it('调用SOA服务', (done) => {
        _soaWebApi.then((testSoa) => {
            testSoa.invoke('SearchHotelData', {
                "SearchTypeEntity": {
                    "SearchType": 14,
                    "PageIndex": 1,
                    "IntlCity": 2,
                    "HotelCount": 15
                },
                "PublicSearchParameter": {
                    "City": 73,
                    "CheckInDate": "2019-09-28T16:00:00.000Z",
                    "CheckOutDate": "2019-09-29T16:00:00.000Z",
                    "OrderName": 20,
                    "OrderType": 0,
                    "UID": 3591911,
                    "CurrentTime": "2019-09-29T02:38:48.829Z",
                    "ShowShadowRooms": true,
                    "QuerySubCity": true,
                    "ChannelList": "9",
                    "BreakFast": false,
                    "Person": null,
                    "BreakfastNum": null,
                    "IsRequestTravelMoney": false,
                    "OnlyFGPrice": false,
                    "StarList": "1,2,3,4,5,0",
                    "MultiDimensionUnion": null,
                    "ZoneList": null,
                    "PlotType": 1
                },
                "FacilityEntity": {
                    "LowPrice": null,
                    "HighPrice": null,
                    "HasKingSize": false,
                    "HasTwinBed": false,
                    "FamilyRoom": false,
                    "HotelMgrGroupList": null,
                    "IsJustifyConfirm": false,
                    "IsCanReserve": false
                },
                "ReturnClassList": [0, 3, 1, 6],
                "MapSearchEntity": null
            }, function (err, ret) {
                console.log(err,ret)
                assert.strictEqual(typeof ret, 'object', 'invoke result: ' + JSON.stringify(ret))
                done()
            }, true, {}, {headers: {'test': 'test'}, responseTimeout: 3000}, true)
        }).catch((err) => {
            console.log(err)
            done()
        })
    })

    it('调用SOA服务，无效的方法名', (done) => {
        _soaWebApi.then((testSoa) => {
            testSoa.invoke('GetPurchasableFlightXProductInfo111', {
                'userID': 'M02701605',
                'orderID': 3093809360,
                'language': 'CN',
                'channel': 'Online'
            }, function (err, ret) {
                assert.strictEqual(typeof err, 'string', 'err is : ' + err)
                done()
            }, false, {}, {headers: {'test': 'test'}, responseTimeout: 3000})
        }).catch((err) => {
            console.log(err)
            done()
        })
    });

    it('调用SOA服务,传入无效参数', (done) => {
        _soaWebApi.then((testSoa) => {
            testSoa.invoke('GetPurchasableFlightXProductInfo111', {
                'user': 'M02701605',
                'orderID': 3093809360,
                'language': 'CN',
                'channel': 'Online'
            }, function (err, ret) {
                assert.strictEqual(typeof err, 'string', 'err is : ' + err)
                done()
            }, false, {}, {headers: {'test': 'test'}, responseTimeout: 3000})
        }).catch((err) => {
            console.log(err)
            done()
        })
    });
    afterEach(function () {
        setTimeout(() => {
            process.exit(0)
        }, 3000);
    });
})

const qs = require('querystring');
const http = require('@ctrip/node-vampire-http');
const cUtil = require('@ctrip/node-vampire-util');

const cat = require('@ctrip/node-vampire-cat');
const appConfig = require('./appConfig');

const soaMonitor = require('./soaMonitor.js');
const M = new soaMonitor();

let Soa = function(opts, callback) {
    this._init(opts, callback);
};

Soa.prototype._init = function(opts, callback) {
    if (!opts.url) {
        callback('Invalid Soa Url', this);
        return;
    }

    this.url = opts.url;
    this.serviceTimeout = opts.serviceTimeout || appConfig['SOA.Timeout'] || 0;
    this.canary = opts.canary;

    M.CtriputilCountSOA(1, this.url);

    if (!/\/$/.test(this.url)) {
        this.url += '/';
    }
    this._metricTagData = {
        'operation': '',
        'webservice': ''
    };
    this.agent = opts.agent || null;
    this._isGettingMetaData = false;
    this._getMetaDataQueue = [];
    this._getMetaData((err) => {
        callback(err, this);
    });
};

Soa.prototype._getMetaData = function(callback) {
    if (this._isGettingMetaData) {
        this._getMetaDataQueue.push(callback);
        return;
    }

    this._isGettingMetaData = true;

    let url = this.url + '_operationinfo';

    http(url).then((body) => {
        this._isGettingMetaData = false;

        let json = null;

        try {
            json = JSON.parse(body);
        } catch (e) {
            // empty
        }

        if (cUtil.type(json) !== 'array') {
            callback('Error MetaData Response');
            return;
        }

        let metaData = {};
        json.forEach((d) => {
            if (d.RequestMessage && d.RequestMessage.Json) {
                let method = d.Name.toLowerCase();
                let define = null;
                try {
                    define = JSON.parse(d.RequestMessage.Json);
                } catch (e) {
                    // empty
                }
                if (method && define) {
                    metaData[method] = {
                        define: define
                    };
                }
            }
        });
        this._metaData = metaData;
        callback(null);

        let fn = null;
        while ((fn = this._getMetaDataQueue.shift())) {
            fn(null);
        }
    }).catch((e) => {
        console.error('[soa] request url error: ', url, e)
        this._isGettingMetaData = false;
        callback('Error MetaData Request');
    })
};

Soa.prototype.isValid = function(method, args, errs) {
    errs = errs || [];

    if (this._metaData) {
        if (Object.prototype.hasOwnProperty.call(this._metaData, method)) {
            let target = this._metaData[method];

            if (Object.prototype.hasOwnProperty.call(target, 'define')) {
                return this._checkVariType(args, target.define, errs);
            }

            errs.push('Method (' + method + ') Cann\'t Call By JSON');
        } else {
            errs.push('Invalid Method (' + method + ')');
        }
    } else {
        errs.push('Empty MetaData');
    }

    return false;
};

Soa.prototype._checkVariType = function(vari1, vari2, errs, key) {
    let ret = true;
    errs = errs || [];
    key = key || 'args';
    let type1 = cUtil.type(vari1);
    let type2 = cUtil.type(vari2);
    if (type1 == type2) {
        if (type1 == 'object') {
            for (let k in vari1) {
                if (Object.prototype.hasOwnProperty.call(vari1, k)) {
                    ret = ret && this._checkVariType(vari1[k], vari2[k], errs, k);
                    if (!ret) {
                        break;
                    }
                }
            }
        }
    } else {
        if (type2 == 'undefined') {
            errs.push('Invalid Arguments (' + key + ')');
        } else {
            errs.push('Arguments (' + key + ') Type Error, Should Be ' + cUtil.upperCaseFirstChar(type2) + ', But Got ' + cUtil.upperCaseFirstChar(type1));
        }
        ret = false;
    }
    return ret;
};

Soa.prototype.invoke = function(method, args, callback, skipValid=true, query) {
    M.CtriputilCountSOAInvoke(1, this.url);
    //检查webservice的tag值是否已经ready。如果已经ready，直接赋值；如果没有ready，则发送空
    M.SOARequestCount(1, '', 'Direct', 'json',
        '',
        method,
        '',
        this.url
    );
    M.SOARequestSettingRequesttimeout(this.serviceTimeout, '', 'Direct',
        '',
        method,
        '',
        this.url
    );
    M.SOARequestSettingRequesttimeoutDistribution(this.serviceTimeout, '', 'Direct',
        M.distribution(parseInt(this.serviceTimeout)),
        '',
        method,
        '',
        this.url
    );

    let span = cat.span('SOA2Client', this.url + '.' + method.toLowerCase());
    span.run((done) => {
        let catMessageId = this.__messageId;
        let wrapCallback = (message, err) => {
            if (!message) { //如果没有出错，则记录耗时
                let t = (new Date() - span.__startTime) || 0; //修改invoke时间
                M.SOARequestLatency(t, '', 'Direct',
                    '',
                    method,
                    '',
                    this.url
                );
                M.SOARequestLatencyDistribution(1, '', 'Direct',
                    M.distribution(t),
                    '',
                    method,
                    '',
                    this.url
                );
            }
            callback(message, err);
            done();
        }
        if (!this._metaData) {
            this._getMetaData(() => {
                this._invoke(method, args, wrapCallback, skipValid, query, catMessageId);
            });
        } else {
            this._invoke(method, args, wrapCallback, skipValid, query, catMessageId);
        }
    });
};

Soa.prototype._invoke = function(method, args, callback, skipValid=true, query, catMessageId) {
    if (!this._metaData) {
        M.SOAExceptionCount(1, '', 'Direct',
            'Ctriputil.InvalidMetaData',
            'invalidmetadata',
            '',
            method,
            '', this.url);
        cat.error('SOA2Client.invalidMetaData');
        setTimeout(() => {
            callback('Invalid MetaData', null);
        });
    } else {
        let errs = [];

        method = ('' + method).toLowerCase()

        if (skipValid === true || this.isValid(method, args, errs)) {
            let reqUrl = this.url + 'json/' + encodeURIComponent(method);

            if (query) {
                query = qs.stringify(query);

                if (query !== '') {
                    reqUrl += '?' + query;
                }
            }

            cat.event('SOA2Client.reqSize', reqUrl, (JSON.stringify(args || {})).length);

            let headers = {
                'RootMessageId': catMessageId, // root message id, 整个调用树的message id
                'CurrentMessageId': catMessageId, // current message id，当前message id，即当前SOA Call所在的Message Id
                'ServerMessageId': cat.getMessageId(), // service端的message id，由call端生成，传给server端
                'app': appConfig['AppID'],
                'SOA20-Client-AppId': appConfig['AppID']
            };

            if (this.canary) {
                headers['x-ctrip-canary-req'] = 1;
            }

            cat.event('RemoteCall', 'PigeonRequest', headers.ServerMessageId); // 很重要，通过这个Event中的message id,可以在Log View查看子的Message Tree

            let httpOpt = {
                'agent': this.agent,
                'contentType': 'response',
                'headers': headers
            };

            if (this.serviceTimeout > 0) {
                httpOpt['responseTimeout'] = this.serviceTimeout;
            }

            // console.log('==serviceTimeout==', this.serviceTimeout);

            http(reqUrl, httpOpt, JSON.stringify(args || {})).then((res) => {
                let ret = null;
                // console.log('==res==', res);
                try {
                    ret = JSON.parse(res.body);
                } catch (e) {
                    callback('Error Parse Json', res.body);
                    return;
                }

                let status = '';
                try {
                    status = ret.ResponseStatus.Ack;
                } catch (e) {
                    try {
                        status = ret.responseStatus.ack;
                    } catch (e) {
                        // empty
                    }
                }
                cat.event('SOA2Client.resCode', status);
                cat.event('SOA2Client.serviceApp', res.headers['soa20-service-appid']);
                cat.event('SOA2Client.serviceIP', res.headers['soa20-service-hostip']);

                if (!(status === 'Success' || status === 0)) {
                    M.SOAExceptionCount(1, '', 'Direct',
                        'Ctriputil.badRequest',
                        status,
                        '',
                        method,
                        '', this.url);
                }
                callback((status === 'Success' || status === 0) ? null : 'Found Error', ret);
            }).catch((e) => {
                cat.event('SOA2Client.resCode', 'failure');
                cat.error('SOA2Client.invalidRequest ', e.message);
                M.SOAExceptionCount(1, '', 'Direct',
                    'Ctriputil.invalidRequest',
                    'invalidrequest',
                    this.url,
                    method,
                    '', this.url);
                console.error('[SOA] request url error: ', reqUrl, e)
                callback(e, null);
            });
        } else {
            let reqUrl = this.url + 'json/' + encodeURIComponent(method);

            let stack = {
                reqUrl: reqUrl,
                method: method,
                args: JSON.stringify(args || {})
            };
            cat.error('SOA2Client.invalidMethodorArgs ', JSON.stringify(stack));
            M.SOAExceptionCount(1, '', 'Direct',
                'Ctriputil.invalidMethodorArgs',
                'invalidmethodorargs',
                '',
                method,
                '', this.url);
            setTimeout(() => {
                errs.unshift('Invalid Method Or Arguments');
                callback(errs.join('\r\n'), null);
            });
        }
    }
};

module.exports = Soa;
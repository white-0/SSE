const appConfigModule = require('@ctrip/node-vampire-appconfig');
const frameworkFoundation = require('@ctrip/node-vampire-foundation-framework');
const qconfig = require('@ctrip/node-vampire-qconfig');

class soaConfig {
    constructor() {
        this.cachePromise = false;
        this.SOA_WebApi_Url = {
            'fws': 'http://webapi.soa.fws.qa.nt.ctripcorp.com/api',
            'lpt': 'http://webapi.soa.fws.qa.nt.ctripcorp.com/api',
            'uat': 'http://webapi.soa.uat.qa.nt.ctripcorp.com/api',
            'pro': 'http://webapi.soa.ctripcorp.com/api'
        };
        this.SOA_WebApi_Url_Yun = {
            'FRA-AWS': 'http://webapi.soa.fraaws.tripws.com/api',
            'SHA-ALI': 'http://webapi.soa.shaali.tripws.com/api',
            'SIN-AWS': 'http://webapi.soa.sinaws.tripws.com/api'
        }
        this.SOA_ServiceInfo_Url = {
            'fws': 'http://ws.soa.fws.qa.nt.ctripcorp.com/core/metadata/services/',
            'lpt': 'http://ws.soa.fws.qa.nt.ctripcorp.com/core/metadata/services/',
            'uat': 'http://ws.soa.uat.qa.nt.ctripcorp.com/core/metadata/services',
            'pro': 'http://ws.soa.ctripcorp.com/core/metadata/services/'
        };

        this.SOA_ServiceInfo_Url_Yun = {
            'FRA-AWS': 'http://region.fraaws.tripws.com/ctrip/fx/soacore/metadata/services/',
            'SIN-AWS': 'http://region.sinaws.tripws.com/ctrip/fx/soacore/metadata/services/',
            'SHA-ALI': 'http://region.shaali.tripws.com/ctrip/fx/soacore/metadata/services/',
        }

        /** 熔断这块暂时不做自定义 */
        this.setDefaultConfig('circuitBreaker.enabled', false);
        this.setDefaultConfig('circuitBreaker.execution-count-threshold', 5);
        this.setDefaultConfig('circuitBreaker.error-percentage-threshold', 50);
        this.setDefaultConfig('circuitBreaker.retry-interval', 5000);
        this.setDefaultConfig('circuitBreaker.execution-timeout', 2000);
        this.setDefaultConfig('circuitBreaker.closed', 'CLOSED');
        this.setDefaultConfig('circuitBreaker.half-open', 'HALF-OPEN');
        this.setDefaultConfig('circuitBreaker.open', 'OPEN');

        /** 下列参数接收用户的自定义 */
        this.setDefaultConfig('debug', appConfigModule['debug']);
        this.setDefaultConfig('SOA.ServerEnv', appConfigModule['SOA.ServerEnv']); // 在 fws / lpt / fat 环境，应用自己指定调用不同环境下的 soa 服务
        this.setDefaultConfig('SOA.HandleServiceErrorManually', appConfigModule['SOA.HandleServiceErrorManually'] || false); // 是否自行处理错误，默认为 false，如果设置为 true，则不做任何结果的解析处理，直接将结果抛给应用层
        this.setDefaultConfig('SOA.Timeout', appConfigModule['SOA.Timeout']);
        this.setDefaultConfig('SOA.LogTime', appConfigModule['SOA.LogTime']);


        // 用户是否有自定义的SOA.WebApi.Url
        this.privateSOAWebApiUrl = appConfigModule['SOA.WebApi.Url'];

    }

    setDefaultConfig(key, value) {
        this[key] = value;
        !key.includes('circuitBreaker') && (appConfigModule[key] = value);
    }

    updateSoaConfigByEnv(configs) {
        let soa_webapi_url = configs && configs['artemis.client.soa.client.webapi-service.url'] ? configs['artemis.client.soa.client.webapi-service.url'] : this.SOA_WebApi_Url_default;
        let soa_serviceInfo_url = configs && configs['artemis.client.soa.metadata-service.url'] ? configs['artemis.client.soa.metadata-service.url'] : this.SOA_ServiceInfo_Url_default;
        this.setDefaultConfig('SOA.WebApi.Url', this._checkData(this.privateSOAWebApiUrl) || this._checkData(soa_webapi_url));
        this.setDefaultConfig('SOA.ServiceInfo.Url', this._checkData(soa_serviceInfo_url));
    }

    init() {
        if (!this.cachePromise) {
            this.cachePromise = this.getQconfigFileName().then((qconfigFileName) => {
                const _qconfigName = qconfigFileName || '';
                const soaQConfig = qconfig.getConfig(`100012112:artemis-reserved${_qconfigName}.properties`);
                return soaQConfig.get().then((data) => {
                    this.updateSoaConfigByEnv(data);
                    soaQConfig.on('change', (datas) => {
                        this.updateSoaConfigByEnv(datas.configData);
                    });
                    return;
                });
            }).catch((e) => {
                console.log('[node-vampire-soaWebApi] Init config error, ', e);
                delete this.cachePromise;
                throw e;
            });
        }
        return this.cachePromise;
    }

    //新增ali回源国内的处理策略
    getQconfigFileName() {
        return new Promise((resolve, reject) => {
            Promise.all(
                [frameworkFoundation.getServerProperties('*'), frameworkFoundation.getEnv(), frameworkFoundation.getIDC(), frameworkFoundation.getSubEnv()]
            ).then((args) => {
                let serverProperties = args[0];
                this.Env = args[1];
                this.IDC = args[2] || 'NTGXH';
                this.subEnv = args[3];
                this.AppID = frameworkFoundation.getAppID();
                this.SOA_WebApi_Url_default = this.Env === 'pro' && this.SOA_WebApi_Url_Yun[this.IDC] ? this.SOA_WebApi_Url_Yun[this.IDC] : this.SOA_WebApi_Url[this.Env];
                this.SOA_ServiceInfo_Url_default = this.Env === 'pro' && this.SOA_ServiceInfo_Url_Yun[this.IDC] ? this.SOA_ServiceInfo_Url_Yun[this.IDC] : this.SOA_ServiceInfo_Url[this.Env];
                let qconfigName = null;
                if (serverProperties['tenant'] && serverProperties['cloudprovider'] && serverProperties['region'] && serverProperties['idc']) {
                    let isPci = serverProperties['pci'] && serverProperties['pci'] == 'true' ? 'true' : 'false';
                    qconfigName = `_${serverProperties['tenant'].toLowerCase()}_${serverProperties['cloudprovider'].toLowerCase()}_${serverProperties['region'].toLowerCase()}_${serverProperties['idc'].toLowerCase()}_${isPci}`;
                }
                resolve(qconfigName);
            }).catch((e) => {
                console.log('[node-vampire-soa-client] get aliYun qconfigFileName error, ', e);
                reject(e)
            });
        });
    }

    _checkData(url) {
        if (url) {
            if (!url.startsWith('http')) {
                url = 'http://' + url;
            }
            if (!url.endsWith('/')) {
                url += '/';
            }
        }
        return url;
    }
}

module.exports = new soaConfig();
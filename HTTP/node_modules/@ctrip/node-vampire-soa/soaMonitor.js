const SOACONST = require('./soaConst.js');
const Metric = require('@ctrip/node-vampire-metric');
const pkg = require('./package.json');
const frameworkversion = pkg['version'];
const versionPrefix = 'CT-';

function SOAMonitor() {
    this.metric_list = {};
    this.initMetric();
}

SOAMonitor._instance = null;
SOAMonitor.getInstance = function () {
    if (!SOAMonitor._instance) {
        SOAMonitor._instance = new SOAMonitor();
    }
    return SOAMonitor._instance;
};

SOAMonitor.prototype.sendUsage = function (metricName, val) {
    this.sendMetric(metricName, [frameworkversion, (val || '')], 1);
};

SOAMonitor.prototype.initMetric = function () {
    let list = SOACONST.METRICS_LIST;

    for (let key in list) {
        this.metric_list[key] = new Metric({
            name: list[key]['name'],
            tags: list[key]['tags']
        });
        this.metric_list[key].start();
    }
};

SOAMonitor.prototype.sendMetric = function (metricName, tag, value) {
    try {
        // console.log('[sendMetric] metricName:' + metricName + ';tag:' + JSON.stringify(tag) + ';value:' + value);
        this.metric_list[metricName].add(value, tag);
    } catch (e) {
        console.log('[sendMetric] ' + metricName + ' send metric fail ' + e.message);
    }
};

SOAMonitor.prototype.CtriputilCountSOA = function (val, url) {
    this.sendMetric('CtriputilCountSOA', {
            'version': frameworkversion,
            'url': url
        },
        val
    );
};

SOAMonitor.prototype.CtriputilCountSOAInvoke = function (val, url) {
    this.sendMetric('CtriputilCountSOAInvoke', {
            'version': frameworkversion,
            'url': url
        },
        val
    );
};

SOAMonitor.prototype.CtriputilCountSOAWebApi = function (val, serviceCode) {
    this.sendMetric('CtriputilCountSOAWebApi', {
            'version': frameworkversion,
            'serviceCode': serviceCode
        },
        val
    );
};

SOAMonitor.prototype.CtriputilCountSOAWebApiInvoke = function (val, serviceCode) {
    this.sendMetric('CtriputilCountSOAWebApiInvoke', {
            'version': frameworkversion,
            'serviceCode': serviceCode
        },
        val
    );
};

SOAMonitor.prototype.SOARequestCount = function (val, codegenversion, connectionmode, format, webservice,operation, servicecode, serviceurl = null) {
    this.sendMetric('SOARequestCount', {
            'frameworkversion': versionPrefix + frameworkversion,
            'codegenversion': codegenversion,
            'connectionmode': connectionmode,
            'format': format,
            'operation': operation,
            'webservice': webservice,
            'servicecode': servicecode,
            'serviceurl': serviceurl,
            'nodejs_webapi': true
        },
        val
    );
};

SOAMonitor.prototype.SOARequestLatency = function (val, codegenversion, connectionmode, webservice, operation, servicecode, serviceurl = null) {
    this.sendMetric('SOARequestLatency', {
            'frameworkversion': versionPrefix + frameworkversion,
            'codegenversion': codegenversion,
            'connectionmode': connectionmode,
            'operation': operation,
            'webservice': webservice,
            'servicecode': servicecode,
            'serviceurl': serviceurl,
            'nodejs_webapi': true
        },
        val
    );
};

SOAMonitor.prototype.SOARequestLatencyDistribution = function (val, codegenversion, connectionmode, distribution,webservice, operation,servicecode, serviceurl = null) {
    this.sendMetric('SOARequestLatencyDistribution', {
        'frameworkversion': versionPrefix + frameworkversion,
        'codegenversion': codegenversion,
        'connectionmode': connectionmode,
        'distribution': distribution,
        'operation': operation,
        'webservice': webservice,
        'servicecode': servicecode,
        'serviceurl': serviceurl,
        'nodejs_webapi': true
    }, val);
};

SOAMonitor.prototype.SOARequestNoncodeLatency = function (val, codegenversion, connectionmode, webservice, operation,servicecode, serviceurl = null) {
    this.sendMetric('SOARequestNoncodeLatency', {
        'frameworkversion': versionPrefix + frameworkversion,
        'codegenversion': codegenversion,
        'connectionmode': connectionmode,
        'operation': operation,
        'webservice': webservice,
        'servicecode': servicecode,
        'serviceurl': serviceurl,
        'nodejs_webapi': true
    }, val);
};

SOAMonitor.prototype.SOARequestNoncodeLatencyDistribution = function (val, codegenversion, connectionmode, distribution,webservice, operation, servicecode, serviceurl = null) {
    this.sendMetric('SOARequestNoncodeLatencyDistribution', {
        'frameworkversion': versionPrefix + frameworkversion,
        'codegenversion': codegenversion,
        'connectionmode': connectionmode,
        'distribution': distribution,
        'operation': operation,
        'webservice': webservice,
        'servicecode': servicecode,
        'serviceurl': serviceurl,
        'nodejs_webapi': true
    }, val);
};

SOAMonitor.prototype.SOARequestSettingRequesttimeout = function (val, codegenversion, connectionmode, webservice, operation, servicecode, serviceurl = null) {
    this.sendMetric('SOARequestSettingRequesttimeout', {
            'frameworkversion': versionPrefix + frameworkversion,
            'codegenversion': codegenversion,
            'connectionmode': connectionmode,
            'operation': operation,
            'webservice': webservice,
            'servicecode': servicecode,
            'serviceurl': serviceurl,
            'nodejs_webapi': true
        },
        val
    );
};

SOAMonitor.prototype.SOARequestSettingRequesttimeoutDistribution = function (val, codegenversion, connectionmode, distribution,webservice,  operation, servicecode, serviceurl = null) {
    this.sendMetric('SOARequestSettingRequesttimeoutDistribution', {
            'frameworkversion': versionPrefix + frameworkversion,
            'codegenversion': codegenversion,
            'connectionmode': connectionmode,
            'distribution': distribution,
            'operation': operation,
            'webservice': webservice,
            'servicecode': servicecode,
            'serviceurl': serviceurl,
            'nodejs_webapi': true
        },
        val
    );
};

SOAMonitor.prototype.SOAExceptionCount = function (val, codegenversion, connectionmode, exceptionname, exceptiontype, webservice, operation, servicecode, serviceurl = null) {
    this.sendMetric('SOAExceptionCount', {
            'frameworkversion': versionPrefix + frameworkversion,
            'codegenversion': codegenversion,
            'connectionmode': connectionmode,
            'exceptionname': exceptionname,
            'exceptiontype': exceptiontype,
            'operation': operation,
            'webservice': webservice,
            'servicecode': servicecode,
            'serviceurl': serviceurl,
            'nodejs_webapi': true
        },
        val
    );
};

SOAMonitor.prototype.distribution = function (value) {
    let d;
    value = parseInt(value);

    if (value >= 0 && value < 10) {
        d = '0~10ms';
    } else if (value >= 10 && value < 50) {
        d = '10 ~ 50ms';
    } else if (value >= 50 && value < 200) {
        d = '50 ~ 200ms';
    } else if (value >= 200 && value < 500) {
        d = '200 ~ 500ms';
    } else if (value >= 500 && value < 1000) {
        d = '500ms ~ 1s';
    } else if (value >= 1000 && value < 5000) {
        d = '1s ~ 5s';
    } else if (value >= 5000 && value < 10000) {
        d = '5s ~ 10s';
    } else if (value >= 10000 && value < 30000) {
        d = '10s ~ 30s';
    } else if (value >= 30000 && value < 100000) {
        d = '30s ~ 100s';
    } else {
        d = '>= 100s';
    }
    return d;
};

module.exports = SOAMonitor;
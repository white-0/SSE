const {
    tripLog
} = require('@ctrip/node-vampire-triplog');
const cUtil = require('@ctrip/node-vampire-util');

const clog = (() => new Proxy(tripLog, {
    get: (target, type) => {
        if (['info', 'warn', 'error', 'fatal', 'debug'].includes(type)) {
            return function (...args) {
                let data = {
                    type: type.toLowerCase(),
                    title: '',
                    message: '',
                    addInfo: {}
                };
                let orginMessage = [];
                for (let i = 0; i < args.length; i++) {
                    switch (cUtil.type(args[i])) {
                        case 'string':
                            orginMessage.push(args[i]);
                            break;
                        case 'object':
                            cUtil.extendMap(data.addInfo, args[i]);
                            break;
                        case 'error':
                            orginMessage.push((args[i].message || 'Error') + '\r\n----\r\n' + args[i].stack);
                            break;
                        default:
                            break;
                    }
                }
                data.message = orginMessage.join('\r\n====\r\n');
                target.custom(data);
            }
        } else if (type === 'custom') {
            return function (args) {
                return target.custom(args);
            }
        } else if (type === 'setCollectStdio') {
            return (flag) => {
                collectStdio = !!flag;
                hookStdio("stdout");
                hookStdio("stderr");
            };
        }
    }
}))();

let collectStdio = false;
let escapeRe =
    // eslint-disable-next-line no-control-regex
    /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;

function hookStdio(ipcName) {
    let ipc = process[ipcName];
    let ipcUpperName = ipcName.toUpperCase();
    if (!ipc.__originWrite) {
        ipc.__originWrite = ipc.write;
        ipc.write = (chunk, encoding, callback) => {
            if (collectStdio) {
                try {
                    clog.info(
                        `[${ipcUpperName}] ${("" + chunk).replace(escapeRe, "")}`
                    );
                } catch (e) {
                    // empty
                }
            }
            return ipc.__originWrite(chunk, encoding, callback);
        };
    }
}

module.exports = clog
var http = require('http');
var https = require('https');
var util = require('util');
var EventEmitter = require('events');

var serverMap = new Map();
var serverList = [];

function ServerHook () {

}

ServerHook.prototype.getServers = function () {
	return serverList.slice(0);
}

ServerHook.prototype.addServer = function (server) {
	serverHandler(server);
}

util.inherits(ServerHook, EventEmitter);
var serverHook = new ServerHook();

function serverHandler (server) {
	if (!serverMap.has(server)) {
		serverMap.set(server, true);
		serverList.push(server);
		
		var emit = server.emit;
		server.emit = function (name, req, res) {
			var ret = false;
			var args = arguments;
			var emitHandler = function () {
				return emit.apply(server, args);
			};
			if (name == 'request') {
				var fns = serverHook.listeners('request');
				ret = !!server.listenerCount(name);
				var emitHook = function () {
					var fn = fns.shift();
					if (fn) {
						var p = fn(req, res, emitHandler);
						if (p instanceof Promise) {
							p.then(function (r) {
								if (!r) {
									emitHook();
								}
							}).catch(emitHook);
						} else if (p instanceof Function) {
							emitHandler = p;
							emitHook();
						} else {
							if (!p) {
								emitHook();
							}
						}
					} else {
						emitHandler();
					}
				}
				emitHook();
			} else {
				ret = emitHandler();
			}
			return ret;
		};

		serverHook.emit('server', server);
	}
}


process._getActiveHandles().forEach(function (server) {
	if (server && (server instanceof http.Server || server instanceof https.Server)) {
		serverHandler(server);
	}
});

var httpCreateServer = http.createServer;
http.createServer = function () {
	var server = httpCreateServer.apply(this, arguments);
	process.nextTick(serverHandler, server);
	return server;
};

var httpsCreateServer = https.createServer;
https.createServer = function () {
	var server = httpsCreateServer.apply(this, arguments);
	process.nextTick(serverHandler, server);
	return server;
};

module.exports = serverHook;
var os = require('os');
var net = require('net');
var fs = require('fs');

var getChannel = require('../libs/getChannel.js');
var MsgParser = require('./MsgParser.js');

function Master (pm2) {
	this._pm2 = pm2;
	this._count = pm2.count;
	this._isReady = false;
	this._socket = [];
	this._msgQueue = [];
	for (var id = 0; id < this._count; id ++){
		this._socket[id] = null;
		this._msgQueue[id] = [];
	}
	getChannel((channel) => {
		this._channel = channel;
		this._initServer();
	});
}

Master.prototype._initServer = function () {
	this._isReady = false;
	var isListen = false;
	if (os.platform() != 'win32' && fs.existsSync(this._channel)){
		fs.unlinkSync(this._channel);
	}
	this._server = net.createServer((socket) => {
		socket._id = null;
		var msgParser = new MsgParser(socket);
		msgParser.on('bind', (id) => {
			socket._id = id;
			socket._isSending = false;
			this._socket[id] = socket;
			this._checkReady();
			this._trySend(id);
		});
		msgParser.on('message', (name, data) => {
			this._pm2._nextTickEmit(name, data);
		});
		socket._msgParser = msgParser;
		socket.on('close', () => {
			if (socket._id !== null){
				this._socket[socket._id] = null;
			}
		});
	}).listen({
		path: this._channel,
		exclusive: true
	}, function () {
		isListen = true;
	});
	this._server.on('error', (err) => {
		if (!isListen){
			this._isReady = false;
			console.log('CtripUtil PM2 Module Server Listen Failed');
			setTimeout(() => {
				this._initServer();
			}, 1000);
		}
	});
}

Master.prototype._checkReady = function () {
	if (!this._isReady){
		var clients = 0;
		for (var id = 1; id < this._count; id ++){
			if (this._socket[id]){
				clients ++;
			}
		}
		if (clients.length >= this._count - 1){
			this._isReady = true;
		}
	}
};

Master.prototype.broadcast = function (name, data) {
	this._pm2._nextTickEmit(name, data);
	for (var id = 1; id < this._count; id ++) {
		this._msgQueue[id].push({
			name: name,
			data: data
		});
		this._trySend(id);
	}
};

Master.prototype._trySend = function (id) {
	if (this._socket[id]  && !this._socket[id]._isSending){
		this._socket[id]._isSending = true;
		var msg = this._msgQueue[id].shift();
		if (msg) {
			this._socket[id]._msgParser.send(msg.name, msg.data, (err) => {
				if (err) {
					console.log('CtripUtil PM2 Module Send Message Error');
					this._msgQueue[id].unshift(msg);
					this._socket[id]._isSending = false;
					setTimeout(() => {
						this._trySend(id);
					}, 5000);
				} else {
					this._socket[id]._isSending = false;
					this._trySend(id);
				}
			});
		} else {
			this._socket[id]._isSending = false;
		}
	}
};

module.exports = Master;

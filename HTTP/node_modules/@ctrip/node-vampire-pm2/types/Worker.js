var os = require('os');
var net = require('net');
var fs = require('fs');

var getChannel = require('../libs/getChannel.js');
var MsgParser = require('./MsgParser.js');

function Worker (pm2) {
	this._pm2 = pm2;
	this._id = pm2.id;
	this._isReady = false;
	this._socket = null;
	this._msgQueue = [];

	getChannel((channel) => {
		this._channel = channel;
		this._initClient();
	});
}

Worker.prototype._initClient = function () {
	this._isReady = false;
	var socket = net.connect({
		path: this._channel
	}, () => {
		var msgParser = new MsgParser(socket);
		msgParser.on('message', (name, data) => {
			this._pm2._nextTickEmit(name, data);
		});
		msgParser.bind(this._id);
		socket._msgParser = msgParser;
		this._isReady = true;
		this._socket = socket;
		socket._isSending = false;
		this._trySend();
	});

	socket.on('error', () => {});
	socket.on('close', () => {
		this._isReady = false;
		setTimeout(() => {
			this._initClient();
		}, 1000);
	});
}

Worker.prototype.send = function (name, data) {
	this._msgQueue.push({
		name: name,
		data: data
	});
	this._trySend();
};

Worker.prototype._trySend = function () {
	if (this._socket && !this._socket._isSending){
		this._socket._isSending = true;
		var msg = this._msgQueue.shift();
		if (msg) {
			this._socket._msgParser.send(msg.name, msg.data, (err) => {
				if (err) {
					console.log('CtripUtil PM2 Module Send Message Error');
					this._msgQueue.unshift(msg);
					this._socket._isSending = false;
					setTimeout(() => {
						this._trySend();
					}, 5000);
				} else {
					this._socket._isSending = false;
					this._trySend();
				}
			});
		} else {
			this._socket._isSending = false;
		}
	}
};

module.exports = Worker;
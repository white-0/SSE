var path = require('path');
var cluster = require('cluster');
var util = require('util');
var EventEmitter = require('events');
var getInstanceCount = require('../libs/getInstanceCount.js');
var Master = require('./Master.js');
var Worker = require('./Worker.js');

var Pm2 = function(){
	var insVar = process.env.instance_var || 'NODE_APP_INSTANCE';
	this.usePm2 = process.env.hasOwnProperty(insVar);
	this.isCluster = cluster.isWorker;
	this.id = parseInt(process.env[insVar], 10) || 0;
	this.name = process.env.name || 'Unknown';
	this.count = 0;
	if (this.usePm2){
		if (process.env.hasOwnProperty('instances')){
			this.count = parseInt(process.env.instances, 10);
		}
		if (!this.count){
			this.count = getInstanceCount(this.name);
		}
	} else {
		this.count = 1;
	}
	this.isMaster = this.id == 0;
	this.isWorker = !this.isMaster;
	this._mode = this.usePm2 && this.count > 1 ? 'ipc' : 'local';
	if (this._mode == 'ipc') {
		if (this.isMaster) {
			this._master = new Master(this);
		} else {
			this._worker = new Worker(this);
		}
	}
};

util.inherits(Pm2, EventEmitter);

Pm2.prototype.broadcast = function(name, data){
	if (this._mode == 'ipc') {
		if (this.isMaster) {
			this._master.broadcast(name, data);
		} else {
			throw new Error('Invalid Broadcast By Worker');
		}
	} else {
		this._nextTickEmit(name, data);
	}
};

Pm2.prototype.send = function(name, data) {
	if (this._mode == 'ipc') {
		if (this.isMaster) {
			this._nextTickEmit(name, data);
		} else {
			this._worker.send(name, data);
		}
	} else {
		this._nextTickEmit(name, data);
	}
};

Pm2.prototype._nextTickEmit = function () {
	var args = arguments;
	process.nextTick(() => {
		this.emit.apply(this, args);
	});
};

module.exports = Pm2;
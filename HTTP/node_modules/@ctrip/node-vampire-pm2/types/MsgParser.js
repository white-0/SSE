var util = require('util');
var EventEmitter = require('events');
var readline = require('readline');

function MsgParser (socket) {
	this._socket = socket;
	this._lastSendCallback = null;

	socket.on('error', function (err) {
		this._lastSendCallback && this._lastSendCallback(err);
	});

	var rl = readline.createInterface({
		input: socket
	});

	rl.on('line', (str) => {
		if (str){
			var msg = null;
			try {
				msg = JSON.parse(str);
			} catch (e) {};
			if (msg) {
				switch (msg.type){
					case 'Control':
						switch (msg.name){
							case 'bind':
								this.emit('bind', msg.data);
								break;
						}
						break;
					case 'User':
						this.emit('message', msg.name, msg.data);
						break;
				}
			}
		}
	});
};

util.inherits(MsgParser, EventEmitter);

MsgParser.prototype.bind = function (id) {
	this._sendRaw({
		type: 'Control',
		name: 'bind',
		data: id
	});
};

MsgParser.prototype.send = function (name, data, callback) {
	this._lastSendCallback = function (err) {
		callback && callback(err);
	};
	this._sendRaw({
		type: 'User',
		name: name,
		data: data
	}, () => {
		this._lastSendCallback = null;
		callback && callback();
	});
};

MsgParser.prototype._sendRaw = function (data, callback) {
	this._socket.write('\n' + JSON.stringify(data) + '\n', callback);
};

module.exports = MsgParser;

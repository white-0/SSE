import { UBT, PVStatus, AsyncRefreshOption, TrackMetricOption, ErrorData, ArgumentTypes, UBTMethods, UBTSettings, UBTConfig } from './interface';
export declare function addJob<K extends UBTMethods>(method: K, args: ArgumentTypes<UBT[K]>): void;
/**
 * 设置 ubt 选项
 * 注： 配置要在加载脚本前，否则配置会失效。
 * @param key
 * @param value
 */
export declare function setUBTConfig<K extends keyof UBTConfig>(key: K, value: UBTConfig[K]): void;
/**
 * 此接口的调用要在PV数据发送之前，不然数据会丢失， 使用方式
 *
 * 在加载UBT脚本之前调用此接口。
 * 如果在脚本加载之后调用，可在页面配置<input type="hidden" id="page_id" value="wait" />, 然后在通过【_asynRefresh】自定义PV接口发送数据
 * @see http://docs.ubt.ctripcorp.com/books/ubt-manual/dev-guide/js/api#SET%EF%BC%9A%E8%AE%BE%E7%BD%AEloginName
 * @param key
 * @param value
 */
export declare function setUBT<K extends keyof UBTSettings>(key: K, value: UBTSettings[K]): void;
/**
 * 获取PV串值
 * 值包含vid.sid.pvid，返回的值是一个字符串，包含VID，SID，PVID的值， 如果要获取单个的值，建议使用 _getStatus 接口。
 */
export declare function getFullPV(): Promise<string>;
/**
 * 获取PV状态，包含PV的基本信息
 */
export declare function getStatus(): Promise<PVStatus>;
/**
 * 获取浏览器指纹接口
 */
export declare function getFingerPrint(): Promise<string>;
/**
 * 通过调用UBT接口获取Pageid值
 */
export declare function getPageId(): Promise<string>;
/**
 * TRACK：自定义PV接口
 *
 * 自定义PV接口，在某些特定场景，如页面的局部更新要统计PV数据的时候可以使用此接口
 * 此API的使用会影响业务数据统计，请慎重考虑使用。
 * @param opt
 */
export declare function asyncRefresh(opt: AsyncRefreshOption): Promise<void>;
/**
 * TRACK：自定义数据收集
 *
 * 自定义数据收集，一般是“短期业务”使用此接口收集数据，数据落地后对应的TOPIC是CUSTOM，可通过HIVE查询，一般称tracelog的表。
 *
 * #### 接口使用流程
 *
 * 1. 申请自定义埋点 申请自定义埋点
 * 2. 开发人员在部署了UBT采集脚本的页面上，通过调用 tacklog 接口收集数据
 * 3. 查看自定义埋点信息及数据
 *
 * #### 内置参数，value中使用以下变量获取对应的值
 *
 * - ${duid}:        加密加密用户id,
 * - ${page_id}:     页面page_id,
 * - ${is_login}:    用户是否登录
 */
export declare function trackLog(key: string, val: string): Promise<void>;
/**
 * TRACE数据接口
 *
 * @param {string} name - 填入在 [申请自定义埋点](https://cdataportal.ctripcorp.com/acq/mine?hasRegisterOpen=true) 生成的KEY
 * @parma {Map<string,string>} data - Map<string,string>对象
 */
export declare function trace(key: string, val: {
    [s: string]: string;
}): Promise<void>;
/**
 * GDPR TRACE数据接口
 *
 * IBU需要对隐私数据加密处理的tracelog接口， 调用方式和 _tracklog 一样， 落地数据由IBU做加密处理后入队列
 *
 * #### 声明：
 *
 * - tracklog的数据是在PV数据回发之后发送
 * - tracklog接口不适用于页面跳转的时候使用，页面跳转容易丢失数据。
 * - 此接口的数据是落地到HDFS，每天凌晨1：00落地前一天的数据，数据归属BI，各BU如需使用数据请找BI申请。
 * @param key
 * @param val
 */
export declare function privateTrace(key: string, val: string): void;
/**
 * DEVTRACE数据接口
 *
 * @param {string} name - 填入在 [申请自定义埋点](https://cdataportal.ctripcorp.com/acq/mine?hasRegisterOpen=true) 生成的KEY
 * @parma {Map<string,string>} data - Map<string,string>对象
 */
export declare function devTrace(key: string, val: {
    [s: string]: string;
}): void;
/**
 * TRACK: 自定义Metric数据接口
 *
 * 主要针对数值统计，如统计性能耗时、接口请求成功率等
 *
 * 接口使用流程
 *
 * 1. [申请自定义埋点](https://cdataportal.ctripcorp.com/acq/register) 申请自定义埋点
 * 2. 开发人员在部署了UBT采集脚本的页面上，通过调用Metric接口收集数据
 * 3. [查看自定义埋点信息及数据](http://cdataportal.ctripcorp.com/acq/list)
 * @param options
 */
export declare function trackMetric(options: Omit<TrackMetricOption, 'callback'>): Promise<number>;
/**
 * 错误统计接口， 发送的数据可以在cdataportal上查看, 目前主要用于JS脚本错误。
 * @see https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error
 * @param error
 */
export declare function trackError(error: ErrorData): void;
/**
 * 加载UBT的模块以及个别BU的脚本。
 */
export declare function UBTRequire(name: string): Promise<void>;

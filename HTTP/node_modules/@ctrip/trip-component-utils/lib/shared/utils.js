"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatLocale = formatLocale;
exports.formatTripEnv = formatTripEnv;
exports.formatUrlWithTripContext = formatUrlWithTripContext;
exports.getLangFromLocale = getLangFromLocale;
exports.getRuntimeType = getRuntimeType;
exports.getSiteByLocale = getSiteByLocale;
var _sitemap = require("./sitemap");
var _urlHelper = require("./url-helper");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function includes(str, target) {
  return str.indexOf(target) > -1;
}
function formatLocale() {
  var locale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'en-US';
  var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'aa-BB';
  var splitter = includes(locale, '-') ? '-' : '_';
  var _locale$split = locale.split(splitter),
    _locale$split2 = _slicedToArray(_locale$split, 2),
    _locale$split2$ = _locale$split2[0],
    lang = _locale$split2$ === void 0 ? 'en' : _locale$split2$,
    _locale$split2$2 = _locale$split2[1],
    zone = _locale$split2$2 === void 0 ? 'US' : _locale$split2$2;
  return style.replace('aa', lang.toLowerCase()).replace('AA', lang.toUpperCase()).replace('bb', zone.toLowerCase()).replace('BB', zone.toUpperCase());
}
function formatTripEnv(appEnv) {
  switch (appEnv) {
    case 'dev':
    case 'fat':
    case 'fws':
      return 'fws';
    case 'lpt':
      return 'lpt';
    case 'uat':
      return 'uat';
    case 'pro':
    case 'prd':
    case 'prod':
      return 'prod';
    default:
      return 'prod';
  }
}

/**
 * 是 Browser 环境还是 Node 环境
 */
function getRuntimeType() {
  var isBrowser = typeof window !== 'undefined';
  return {
    type: isBrowser ? 'browser' : 'node',
    isBrowser: isBrowser,
    isNode: !isBrowser
  };
}

/**
 * 从语种中获取到语言类型
 * @param locale
 */
function getLangFromLocale(locale) {
  return formatLocale(locale, 'aa-bb').split('-')[0];
}

/**
 * 依据 locale 获取站点
 * @param locale
 */
function getSiteByLocale(locale) {
  var formattedLocale = formatLocale(locale, 'aa_bb');
  return _sitemap.LOCALE_MAP_SITE[formattedLocale] || formattedLocale.split('_')[1].toUpperCase();
}
function formatUrlWithTripContext(url, tripContext, opt) {
  if (!url) return '';
  if (typeof url !== 'string') {
    console.error("[TripComponent]: (formatUrlWithTripContext) error: the type of url is invalid!");
    return '';
  }
  var urlBase = '',
    urlQuery = '',
    urlHash = '',
    _url = url;
  if (url.indexOf('#') > -1) {
    var _url$split = _url.split('#');
    var _url$split2 = _slicedToArray(_url$split, 2);
    _url = _url$split2[0];
    urlHash = _url$split2[1];
  }
  var _url$split3 = _url.split('?');
  var _url$split4 = _slicedToArray(_url$split3, 2);
  urlBase = _url$split4[0];
  urlQuery = _url$split4[1];
  if (!urlBase) return url;
  try {
    var _ref = opt || {},
      isCover = _ref.isCover;
    var locale = tripContext.locale,
      currency = tripContext.currency;
    var originQuery = (urlQuery ? (0, _urlHelper.parseQuery)(urlQuery, true) : {}) || {};
    var newLocale = locale;
    var newCurr = currency;
    if (!isCover) {
      newLocale = originQuery.locale || locale;
      newCurr = originQuery.curr || originQuery.currency || currency;
    }
    originQuery.locale = newLocale;
    originQuery.curr = newCurr;
    delete originQuery.currency;
    var newUrl = "".concat(urlBase || '', "?").concat((0, _urlHelper.buildQuery)(originQuery)).concat(urlHash ? "#".concat(urlHash) : '');
    return newUrl;
  } catch (e) {
    console.error("[TripComponent]: (formatUrlWithTripContext) error: ");
    console.error(e);
    return url;
  }
}
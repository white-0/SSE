function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function isArray(val) {
  return Object.prototype.toString.call(val) === '[object Array]';
}

/**
 * 把对象转化成 search query
 * @param ignoreNull 忽略值为 null or undefined 的键
 */
export var buildQuery = function buildQuery() {
  var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var ignoreNull = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var encoder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : encodeURIComponent;
  var params = [];
  for (var key in query) {
    if (Object.hasOwnProperty.call(query, key)) {
      var _val = query[key];
      if (ignoreNull && (_val === null || _val === undefined)) {
        continue;
      }
      if (typeof _val === 'function') {
        _val = _val();
      } else if (_val === null) {
        _val = '';
      }
      params.push("".concat(key, "=").concat(encoder(_val === undefined ? '' : String(_val))));
    }
  }
  return params.join('&');
};
function tryDecodeURIComponent(str, decoder) {
  if (!str) {
    return '';
  }
  try {
    return decoder(str);
  } catch (error) {
    return str;
  }
}

/**
 * 把 search query 转换成对象
 * @param query
 * @param overrideSameKey 当有多个相同的 key 是，是否 override, 如果不 override, 则会组成一个数组
 * @example parseQuery('id=1&id=2', false) => { id: [1, 2] }
 */

export function parseQuery(query) {
  var overrideSameKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var decoder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : decodeURIComponent;
  if (typeof query !== 'string') {
    return {};
  }
  var out = {};
  query.split('&').forEach(function (item) {
    var _item$split = item.split('='),
      _item$split2 = _slicedToArray(_item$split, 2),
      key = _item$split2[0],
      val = _item$split2[1];
    if (!key) {
      return;
    }
    var decodeVal = tryDecodeURIComponent(val, decoder);
    var prev = out[key];
    if (prev && !overrideSameKey) {
      if (isArray(prev)) {
        prev.push(decodeVal);
      } else {
        out[key] = [prev, decodeVal];
      }
    } else {
      out[key] = decodeVal;
    }
  });
  return out;
}
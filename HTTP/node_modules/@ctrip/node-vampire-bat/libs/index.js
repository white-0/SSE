"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = exports.setRootToActiveContext = exports.setPropertiesToRootActiveSpan = exports.setPropertiesToActiveSpan = exports.getCurrentMessageId = exports.getParentMessageId = exports.getRootMessageId = exports.isFromInfoSec = exports.isOriginatedFromInfoSec = exports.setURLTranscation = exports.setAggregatorRules = exports.isCanaryRequest = exports.__setCatSpanTimeout = exports.getMessageId = exports.getActiveSpan = exports.tags = exports.error = exports.event = exports.span = exports.http = exports.runInGlobalContextAsync = exports.getData = exports.getActiveRootScope = exports.getActiveScope = exports.getActiveContext = void 0;
const http_1 = require("./servlet/http"); //hook http
const BatSpan_1 = require("./types/BatSpan");
const BatEvent_1 = require("./types/BatEvent");
const Heartbeat_1 = require("./types/Heartbeat");
const BatTags_1 = require("./types/BatTags");
const sender_1 = require("./servlet/sender");
const BatSpanAggregator_1 = require("./types/Aggregator/BatSpanAggregator");
const storage_1 = require("./utils/storage");
Object.defineProperty(exports, "runInGlobalContextAsync", { enumerable: true, get: function () { return storage_1.runInGlobalContextAsync; } });
const node_vampire_console_1 = __importDefault(require("@ctrip/node-vampire-console"));
const console = (0, node_vampire_console_1.default)('vampire:bat');
const messageId_1 = require("./utils/messageId");
const const_1 = require("./utils/const");
const m_timeoutStatsMap = [];
//作用: 当进程退出时启用子进程发送剩余日志
require("./servlet/subProcess");
const context_1 = require("./types/context");
Object.defineProperty(exports, "getActiveContext", { enumerable: true, get: function () { return context_1.getActiveContext; } });
Object.defineProperty(exports, "getActiveScope", { enumerable: true, get: function () { return context_1.getActiveScope; } });
Object.defineProperty(exports, "getActiveRootScope", { enumerable: true, get: function () { return context_1.getActiveRootScope; } });
Object.defineProperty(exports, "getData", { enumerable: true, get: function () { return context_1.getData; } });
/**
 * 发送心跳
 */
async function sendHeartbeat() {
    let _span = (0, exports.span)("System", "Status");
    await _span.runAsync(async () => {
        m_timeoutStatsMap.forEach((item) => {
            if (typeof item.timeoutStats === 'object') {
                _span.event(item.type, item.name, new URLSearchParams((item.timeoutStats)).toString());
            }
        }); //触发注册的timeoutStatsMap
        let heartbeat = new Heartbeat_1.BatHeartbeat(sender_1.sender.getSendBytes());
        await heartbeat.heartbeat();
        await heartbeat.threadDump(exports.event);
        _span.__splitProcess = true;
    });
}
setInterval(async () => (0, storage_1.runInGlobalContextAsync)(sendHeartbeat), 60000).unref();
setTimeout(async () => (0, storage_1.runInGlobalContextAsync)(sendHeartbeat), 200).unref();
/**** 对外提供的API ****/
exports.http = http_1.batHttp;
const span = (type, name, data) => new BatSpan_1.BatSpan(type, name, data);
exports.span = span;
const event = (type, name, data) => new BatEvent_1.BatEvent(type, name, data);
exports.event = event;
const error = (err, stack) => new BatEvent_1.BatEvent('ERROR', err, stack);
exports.error = error;
const tags = (scenario, indexedTags, storedTags) => new BatTags_1.BatTags(scenario, indexedTags, storedTags);
exports.tags = tags;
const getActiveSpan = () => {
    const store = storage_1.storage.getStore();
    return store && store.scope;
};
exports.getActiveSpan = getActiveSpan;
const getMessageId = () => messageId_1.messageId.getMessageId();
exports.getMessageId = getMessageId;
//external api: debug function, don't use in production
const __setCatSpanTimeout = (timeout) => {
    global._SPAN_TIMEOUT = timeout;
};
exports.__setCatSpanTimeout = __setCatSpanTimeout;
//external api:是否为网关请求
const isCanaryRequest = () => {
    const context = (0, context_1.getActiveContext)(false);
    return !!context?.__traceContext?.containsKey(const_1.CANARY_REQ);
};
exports.isCanaryRequest = isCanaryRequest;
//external api: 用户和自定义数据聚合规则，减轻客户端和服务端压力
const setAggregatorRules = (opts) => {
    BatSpanAggregator_1.batSpanAggregator.aggregatorRules = opts;
};
exports.setAggregatorRules = setAggregatorRules;
//external api: 用户自定义URL name,比如grphql URL对应的name不完整，需要自己处理的情况
const setURLTranscation = (callback) => {
    global.__setURLTranscation = callback;
};
exports.setURLTranscation = setURLTranscation;
// external api: 是否是原始请求来自infosec的请求
const isOriginatedFromInfoSec = () => {
    const context = (0, context_1.getActiveContext)(false);
    return !!context?.isOriginatedFromInfoSec;
};
exports.isOriginatedFromInfoSec = isOriginatedFromInfoSec;
// external api: 是否是infosec的请求
const isFromInfoSec = () => {
    const context = (0, context_1.getActiveContext)(false);
    return !!context?.isFromInfoSec;
};
exports.isFromInfoSec = isFromInfoSec;
const getRootMessageId = () => {
    return (0, context_1.getActiveScope)()?.__outerIds?.['x-cat-root-id'];
};
exports.getRootMessageId = getRootMessageId;
const getParentMessageId = () => {
    return (0, context_1.getActiveScope)()?.__outerIds?.['x-cat-parent-id'];
};
exports.getParentMessageId = getParentMessageId;
const getCurrentMessageId = () => {
    return (0, context_1.getActiveScope)()?.__messageId;
};
exports.getCurrentMessageId = getCurrentMessageId;
//deprecated
const setPropertiesToActiveSpan = (key, value) => {
    console.warn('cat.setPropertiesToActiveSpan has been deprecated');
    const activeScope = (0, context_1.getActiveScope)();
    activeScope && (activeScope.__properties[key] = value);
};
exports.setPropertiesToActiveSpan = setPropertiesToActiveSpan;
const setPropertiesToRootActiveSpan = (key, value) => {
    const activeRootScope = (0, context_1.getActiveRootScope)();
    activeRootScope && (activeRootScope.__properties[key] = value);
};
exports.setPropertiesToRootActiveSpan = setPropertiesToRootActiveSpan;
const setRootToActiveContext = (key, value) => {
    const activeContext = (0, context_1.getActiveContext)();
    if (activeContext && typeof key === 'string') { //todo: 以后不需要这样的兼容,直接调setUpdateIds
        if (activeContext.__outerIds) {
            activeContext.__outerIds[key] = value;
        }
        else {
            activeContext.__outerIds = {
                [key]: value
            };
        }
    }
    if (activeContext && typeof key === 'object') {
        activeContext.setUpdateIds(key);
    }
};
exports.setRootToActiveContext = setRootToActiveContext;
// register 提供给SDK 注册一些必要的埋点信息，比如超时时间等
const register = (opts) => {
    if (opts.name) {
        m_timeoutStatsMap.push(opts);
    }
};
exports.register = register;
// 全局异常记录
process.on('uncaughtExceptionMonitor', function (err) {
    (0, exports.error)(err);
});
// 兼容历史版本
exports.default = {
    http: exports.http,
    span: exports.span,
    event: exports.event,
    error: exports.error,
    tags: exports.tags,
    getActiveSpan: exports.getActiveSpan,
    getMessageId: exports.getMessageId,
    getRootMessageId: exports.getRootMessageId,
    getParentMessageId: exports.getParentMessageId,
    getCurrentMessageId: exports.getCurrentMessageId,
    isCanaryRequest: exports.isCanaryRequest,
    setAggregatorRules: exports.setAggregatorRules,
    setURLTranscation: exports.setURLTranscation,
    isOriginatedFromInfoSec: exports.isOriginatedFromInfoSec,
    isFromInfoSec: exports.isFromInfoSec,
    getActiveContext: context_1.getActiveContext,
    getActiveScope: context_1.getActiveScope,
    getData: context_1.getData,
    setPropertiesToActiveSpan: exports.setPropertiesToActiveSpan,
    getActiveRootScope: //deprecated
    context_1.getActiveRootScope,
    setPropertiesToRootActiveSpan: exports.setPropertiesToRootActiveSpan,
    setRootToActiveContext: exports.setRootToActiveContext,
    register: exports.register,
    runInGlobalContextAsync: storage_1.runInGlobalContextAsync
};

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.np1 = void 0;
const node_vampire_foundation_framework_1 = __importDefault(require("@ctrip/node-vampire-foundation-framework"));
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
/**
 * es log 协议
 */
let hostIpBuff = (function () {
    let ipArr = node_vampire_util_1.default.getHostIp().split('.');
    let hostIpInt = 0;
    while (ipArr.length) {
        hostIpInt = hostIpInt * 256 + (parseInt(ipArr.shift(), 10) || 0);
    }
    return node_vampire_util_1.default.intToBuff(hostIpInt, 8);
})();
function createRaw(item) {
    let head = Buffer.concat([
        Buffer.from('NP1\t'),
        node_vampire_util_1.default.intToBuff(0, 1),
        hostIpBuff,
        node_vampire_util_1.default.intToBuff(1, 1),
        createVarString(node_vampire_foundation_framework_1.default.getAppID()),
        createVarString(node_vampire_util_1.default.getHostName()) // Host Name
    ]);
    let body = createItemRaw(item);
    return Buffer.concat([
        node_vampire_util_1.default.intToBuff(head.length + body.length, 4),
        head,
        body
    ]);
}
function createItemRaw(item) {
    let body = Buffer.alloc(0);
    if (item.__type == 'tags') {
        body = Buffer.concat([
            node_vampire_util_1.default.varint(1),
            node_vampire_util_1.default.intToBuff(item.__startTime, 8),
            node_vampire_util_1.default.intToBuff(process.pid, 8),
            createVarString(item.scenario),
            createVarString(item.__messageId),
            createMapRaw(item.indexedTags),
            createMapRaw(item.storedTags)
        ]);
    }
    return body;
}
function createMapRaw(item) {
    let ret;
    if (item) {
        let size = 0;
        let map = Buffer.concat(node_vampire_util_1.default.objectToArray(item, function (key, value) {
            size++;
            return Buffer.concat([
                createVarString(key),
                createObjectRaw(value)
            ]);
        }));
        ret = Buffer.concat([
            node_vampire_util_1.default.varint(size),
            map
        ]);
    }
    else {
        ret = node_vampire_util_1.default.varint(0);
    }
    return ret;
}
let maxInt = 0x7FFFFFFF;
let minInt = -0x7FFFFFFF;
let maxLong = 9007199254740991;
let minLong = -9007199254740991;
function createObjectRaw(value) {
    let ret;
    switch (node_vampire_util_1.default.type(value)) {
        case 'null':
        case 'undefined':
            ret = node_vampire_util_1.default.intToBuff(0, 1);
            break;
        case 'boolean':
            ret = Buffer.concat([
                node_vampire_util_1.default.intToBuff(3, 1),
                node_vampire_util_1.default.intToBuff(value ? 1 : 0, 1)
            ]);
            break;
        case 'number':
            if (isNaN(value)) {
                ret = node_vampire_util_1.default.intToBuff(0, 1);
            }
            else {
                if (node_vampire_util_1.default.isInt(value)) {
                    if (value >= minInt && value <= maxInt) {
                        ret = Buffer.concat([
                            node_vampire_util_1.default.intToBuff(5, 1),
                            node_vampire_util_1.default.intToBuff(value, 4)
                        ]);
                    }
                    else {
                        if (value > maxLong) {
                            value = maxLong;
                        }
                        else if (value < minLong) {
                            value = minLong;
                        }
                        ret = Buffer.concat([
                            node_vampire_util_1.default.intToBuff(6, 1),
                            node_vampire_util_1.default.intToBuff(value, 8)
                        ]);
                    }
                }
                else {
                    ret = Buffer.concat([
                        node_vampire_util_1.default.intToBuff(8, 1),
                        node_vampire_util_1.default.doubleToBuff(value, 8)
                    ]);
                }
            }
            break;
        case 'date':
            if (isNaN(value)) {
                ret = node_vampire_util_1.default.intToBuff(0, 1);
            }
            else {
                ret = Buffer.concat([
                    node_vampire_util_1.default.intToBuff(10, 1),
                    node_vampire_util_1.default.intToBuff(+value, 8)
                ]);
            }
            break;
        case 'array':
        case 'object':
            value = node_vampire_util_1.default.stringify(value);
            ret = Buffer.concat([
                node_vampire_util_1.default.intToBuff(9, 1),
                createVarString(value)
            ]);
            break;
        case 'string': // eslint-disable-line
            ret = Buffer.concat([
                node_vampire_util_1.default.intToBuff(9, 1),
                createVarString(value)
            ]);
            break;
        default:
            ret = node_vampire_util_1.default.intToBuff(0, 1);
            break;
    }
    return ret;
}
function createVarString(str) {
    if (node_vampire_util_1.default.type(str) != 'string') {
        str = '' + str;
    }
    let buff = Buffer.from(str);
    return Buffer.concat([
        node_vampire_util_1.default.varint(buff.length),
        buff
    ]);
}
exports.np1 = createRaw;

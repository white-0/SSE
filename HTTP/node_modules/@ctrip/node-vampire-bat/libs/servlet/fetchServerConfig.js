"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchServerConfig = void 0;
const http_1 = __importDefault(require("http"));
const url_1 = __importDefault(require("url"));
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const node_vampire_foundation_framework_1 = __importDefault(require("@ctrip/node-vampire-foundation-framework"));
const console_1 = require("../utils/console");
const appConfig_1 = require("../appConfig");
const const_1 = require("../utils/const");
/**获取cat的server ip list*/
/** 通过CatServer.Config.Url获得数据
 * {
    "kvs": {
        "catLogEnable": "true",
        "logSample": "1.0",
        "enable.bizlog.truncate": "true",
        "bizLogEnable": "true", //是否允许发ES日志
        "sample": "1.0",
        "collectGcFile": "true",
        "logServers": "10.30.129.35:2280;10.30.129.202:2280;", //发送给ES的地址
        "startTransactionTypes": "",
        "collectGcFileSizeLimit": "2097152",
        "globalClockConfig": "10.2.35.8:8080;false;false;2;false;false;2",
        "enable": "false", //是否允许发CAT日志
        "matchTransactionTypes": "",
        "routers": "10.30.128.120:2280;10.30.129.245:2280;", //发送给CAT的地址
        "clientMergeEnabled": "true",
        "bizLogType": "netty",
        "enableCatFilter": "true"
    }
}
 * ES和CAT的发送地址不是同一个地址,且不再推荐ES
 */
const fetchServerConfig = function () {
    return appConfig_1.appConfig.init().then(() => {
        let tarUrlRouter = url_1.default.parse(appConfig_1.appConfig['CatServer.Config.Url'], true);
        tarUrlRouter.query.domain = appConfig_1.appConfig['AppID'];
        tarUrlRouter.query.op = 'json';
        tarUrlRouter.query.ip = node_vampire_util_1.default.getHostIp();
        tarUrlRouter.query.dc = appConfig_1.appConfig['IDC'];
        tarUrlRouter.query.az = node_vampire_foundation_framework_1.default.getServerPropertiesSync('az');
        tarUrlRouter.query.region = node_vampire_foundation_framework_1.default.getServerPropertiesSync('region');
        tarUrlRouter.query.corp = node_vampire_foundation_framework_1.default.getServerPropertiesSync('corp');
        tarUrlRouter.query.tenant = node_vampire_foundation_framework_1.default.getServerPropertiesSync('tenant');
        tarUrlRouter.query.cloudprovider = node_vampire_foundation_framework_1.default.getServerPropertiesSync('cloudprovider');
        tarUrlRouter = url_1.default.parse(url_1.default.format(tarUrlRouter));
        tarUrlRouter.method = 'GET';
        let arr = [], esArr = [], infoSecIp = [];
        return new Promise((resolve, reject) => {
            let reqRouter = http_1.default.request(tarUrlRouter, function (resRouter) {
                resRouter.on('error', () => {
                    reject('Cat Server[' + appConfig_1.appConfig['CatServer.Config.Url'] + '] Response Unavaliable');
                });
                let buffArr = [];
                resRouter.on('data', function (buff) {
                    buffArr.push(buff);
                });
                resRouter.on('end', function () {
                    let result = Buffer.concat(buffArr).toString();
                    try {
                        let content = JSON.parse(result);
                        let routers = content['kvs'] && content['kvs']['routers'];
                        let specialSourceIp = content['kvs'] && content['kvs']['specialSourceIp'];
                        specialSourceIp = specialSourceIp && specialSourceIp.split('infoSec:')[1];
                        routers.replace(/(\d{0,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(:(\d{1,5}))?/g, function (a, b, c, d) {
                            arr.push(b + ':' + (d || const_1.DEFAULT_PORT));
                        });
                        if (!arr.length) {
                            (0, console_1.log)('Cat Server List is empty, please contact NodeJs support: https://c.ctrip.cn/apk/cchatcp.html?action=openChat&type=groupchat&jid=1159365719599611936');
                            return reject('Cat Server List is empty, please contact NodeJs support: https://c.ctrip.cn/apk/cchatcp.html?action=openChat&type=groupchat&jid=1159365719599611936');
                        }
                        specialSourceIp && specialSourceIp.replace(/(\d{0,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(,)?/g, function (a, b) {
                            infoSecIp.push(b);
                        });
                        let logServers = content['kvs'] && content['kvs']['logServers'];
                        logServers.replace(/(\d{0,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(:(\d{1,5}))?/g, function (a, b, c, d) {
                            esArr.push(b + ':' + (d || const_1.DEFAULT_PORT));
                        });
                        appConfig_1.appConfig['CatServer'] = arr;
                        if (!esArr.length) {
                            (0, console_1.log)('Es Server List is empty, please contact NodeJs support: https://c.ctrip.cn/apk/cchatcp.html?action=openChat&type=groupchat&jid=1159365719599611936');
                            return reject('Es Server List is empty, please contact NodeJs support: https://c.ctrip.cn/apk/cchatcp.html?action=openChat&type=groupchat&jid=1159365719599611936');
                        }
                        appConfig_1.appConfig['esServer'] = esArr;
                        appConfig_1.appConfig['specialSourceIpArr'] = infoSecIp.concat(const_1.SPECIAL_SOURCE_IP_LIST);
                        appConfig_1.appConfig['es.bizLogEnable'] = content['kvs'] && content['kvs']['bizLogEnable'];
                        appConfig_1.appConfig['cat.enable'] = content['kvs'] && content['kvs']['enable'];
                        (0, console_1.log)('get cat serverList: ' + arr + ' ---- ' + 'get es serverList: ' + esArr);
                        return resolve({ arr, esArr }); //返回值在test
                    }
                    catch (e) {
                        reject('Cat Server[' + appConfig_1.appConfig['CatServer.Config.Url'] + '] Invalid response, ' + e.message);
                    }
                });
            });
            reqRouter.on('error', () => {
                reject('Cat Server[' + appConfig_1.appConfig['CatServer.Config.Url'] + '] Request Unavaliable');
            });
            reqRouter.end();
        });
    }).catch((err) => {
        (0, console_1.log)('fetchServerConfig.js error: ' + err);
        throw err;
    });
};
exports.fetchServerConfig = fetchServerConfig;
setInterval(() => (0, exports.fetchServerConfig)().catch((err) => (0, console_1.log)('fetchServerConfig.js error: ' + err)), const_1.FETCH_SERVER_TIME).unref();

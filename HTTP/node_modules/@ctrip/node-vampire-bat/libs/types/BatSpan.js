"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatSpan = void 0;
const context_1 = require("./context");
const node_vampire_foundation_framework_1 = __importDefault(require("@ctrip/node-vampire-foundation-framework"));
const messageId_1 = require("../utils/messageId");
const BaseScope_1 = require("./BaseScope");
const BatSpanAggregator_1 = require("./Aggregator/BatSpanAggregator");
const const_1 = require("../utils/const");
const BatEvent_1 = require("./BatEvent");
const BatTags_1 = require("./BatTags");
class BatSpan extends BaseScope_1.BaseScope {
    constructor(...args) {
        super(...args);
        this.__properties = {};
        this.__children = [];
        this.__RemoteCall = false; //是否为远程调用(串联:查看更多）
        this.isRun = false; //是否已经执行过run方法,兼容云函数多次run的情况
        this.outerIds = {}; //上游传递的traceContext
        const context = (0, context_1.appendToContext)(this);
        const outerIds = context.__outerIds; //** 兼容旧版本的！！！ */
        this.__type = const_1.TYPES.SPAN;
        this.status = const_1.STATUS[this.__type];
        let scope = (0, context_1.getActiveScope)();
        this.__splitProcess = false;
        this.__messageId = outerIds && outerIds['x-cat-id'] || scope && scope.__messageId || messageId_1.messageId.getMessageId();
        this.setProperties();
        context.enter(this); //创建store
    }
    setMessageId(messageId) {
        this.__messageId = messageId;
    }
    getMessageId() {
        return this.__messageId;
    }
    get __outerIds() {
        const activeContext = (0, context_1.getActiveContext)(false, this);
        return activeContext && activeContext.__outerIds || this.outerIds;
    }
    set __outerIds(outerIds) {
        this.outerIds = outerIds;
    }
    // 兼容旧版本
    get __root() {
        const activeContext = (0, context_1.getActiveContext)(false, this);
        return { __outerIds: activeContext && activeContext.__outerIds };
    }
    async runAsync(fn, data = {}) {
        const activeContext = (0, context_1.getActiveContext)(false, this);
        activeContext.resetEnter(this);
        return await activeContext.runAsync(this, fn, data);
    }
    run(fn, data = {}) {
        const activeContext = (0, context_1.getActiveContext)(false, this);
        activeContext.resetEnter(this);
        return activeContext.run(this, fn, data);
    }
    setProperties() {
        this.__properties = {
            "Tree.Begin": new Date().getTime(),
            idc: node_vampire_foundation_framework_1.default.getServerPropertiesSync("idc"),
            region: node_vampire_foundation_framework_1.default.getServerPropertiesSync("region"),
            az: node_vampire_foundation_framework_1.default.getServerPropertiesSync("az"),
            groupId: process.env.PAAS_APP_GROUPID || "",
            orgId: process.env.PAAS_ORGID || "",
            buCode: process.env.CDOS_BUCODE || "",
        };
    }
    beforeSend() {
        if (this.__close)
            return;
        this.baseBeforeSend();
        BatSpanAggregator_1.batSpanAggregator.aggregate(this);
    }
    // 兼容历史用法
    end() {
        //log("span.end() is deprecated,recommended usage of span.runAsync", true);
        const _context = (0, context_1.getActiveContext)(false, this);
        _context && _context.exit(this);
    }
    event(type, name, data) {
        return new BatEvent_1.BatEvent(type, name, data);
    }
    error(err, stack) {
        return new BatEvent_1.BatEvent('ERROR', err, stack);
    }
    span(type, name, data) {
        return new BatSpan(type, name, data);
    }
    tags(type, name, data) {
        return new BatTags_1.BatTags(type, name, data);
    }
    //获取上有传递的所有的请求头信息
    getInheritValue(key) {
        return (0, context_1.getActiveContext)().__inheritValue[key];
    }
    //获取上游传递的traceContext(x-ctx-开头的请求头参数)
    getTraceContext() {
        return (0, context_1.getActiveContext)().__traceContext;
    }
    //是否为堡垒请求
    isCanaryRequest() {
        const context = this.getTraceContext();
        if (context && context.containsKey) {
            return context.containsKey(const_1.CANARY_REQ);
        }
        return false;
    }
    // 兼容之前的用法
    setTimeout(timeout) {
        global._SPAN_TIMEOUT = timeout;
    }
    setTimeOutError() {
        new BatEvent_1.BatEvent("ERROR", "TIMEOUT");
    }
}
exports.BatSpan = BatSpan;

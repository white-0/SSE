"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatHeartbeat = void 0;
//heartbeat & threadDump
const os_1 = __importDefault(require("os"));
const node_vampire_hostinfo_1 = __importDefault(require("@ctrip/node-vampire-hostinfo"));
const moduleHelper_1 = require("../utils/moduleHelper");
const context_1 = require("./context");
const messageId_1 = require("../utils/messageId");
const BaseScope_1 = require("./BaseScope");
const queue_1 = require("../servlet/queue");
const const_1 = require("../utils/const");
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const healthLatency_1 = require("../utils/catThreadHelper/healthLatency");
const activeHandles_1 = require("../utils/catThreadHelper/activeHandles");
let appStartTime = +new Date();
let lastMessageIdCount = 0;
let lastDropMessageCount = 0;
let lastSendBytes = 0;
let isWin = os_1.default.platform().indexOf("win") != -1;
let isLinux = os_1.default.platform() == "linux";
let isDocker = os_1.default.platform() == "linux" && process.env["CDOS_CPUS"];
function getMessageIdCountDelta() {
    let t1 = lastMessageIdCount;
    let t2 = messageId_1.messageId.getMessageIdCount();
    lastMessageIdCount = t2;
    return t2 - t1;
}
function getDropMessageCountDelta() {
    let t1 = lastDropMessageCount;
    let t2 = queue_1.queue.getDropMessageCount();
    lastDropMessageCount = t2;
    return t2 - t1;
}
function getSendBytesDelta(sendBytes) {
    let t1 = lastSendBytes;
    let t2 = sendBytes;
    lastSendBytes = t2;
    return t2 - t1;
}
/**
 * 应用 Heartbeat & ThreadDump 指标，可在BAT/CAT 平台查看
 */
class BatHeartbeat extends BaseScope_1.BaseScope {
    constructor(sendBytes) {
        super(...['Heartbeat', node_vampire_util_1.default.getHostIp(), '']);
        this.sendBytes = sendBytes;
        this.__type = const_1.TYPES.HEARTBEAT;
        this.status = const_1.STATUS[this.__type];
        (0, context_1.appendToContext)(this);
        let scope = (0, context_1.getActiveScope)();
        this.__messageId = scope && scope.__messageId || messageId_1.messageId.getMessageId();
    }
    heartbeat() {
        let now = +new Date();
        let cpu = {};
        let memory = {};
        let version = process.version.slice(1);
        let disk = [];
        let fileDescriptor = {};
        let net = {};
        let pArr = [];
        if (isDocker) {
            pArr.push(new Promise((resolve) => {
                node_vampire_hostinfo_1.default.getDockerCpuInfo((dockerCpuInfo) => {
                    cpu = dockerCpuInfo;
                    resolve(void 0);
                });
            }));
        }
        else {
            pArr.push(new Promise((resolve) => {
                node_vampire_hostinfo_1.default.getCpuInfo((cpuInfo) => {
                    cpu = cpuInfo;
                    resolve(void 0);
                });
            }));
        }
        pArr.push(new Promise((resolve) => {
            node_vampire_hostinfo_1.default.getMemoryInfo((memoryInfo) => {
                memory = memoryInfo;
                resolve(void 0);
            });
        }));
        pArr.push(new Promise((resolve) => {
            node_vampire_util_1.default.getDiskInfo((err, diskInfo) => {
                if (!err) {
                    disk = diskInfo;
                }
                resolve(void 0);
            });
        }));
        if (isLinux) {
            pArr.push(new Promise((resolve) => {
                node_vampire_hostinfo_1.default.getFileDescriptorStatus((fileDescriptorStatus) => {
                    fileDescriptor = fileDescriptorStatus;
                    resolve(void 0);
                });
            }));
            pArr.push(new Promise((resolve) => {
                node_vampire_hostinfo_1.default.getNetInfo((netInfo) => {
                    net = netInfo;
                    resolve(void 0);
                });
            }));
        }
        let versionStr = "";
        pArr.push(new Promise((resolve) => {
            (0, moduleHelper_1.getVersions)().then((versions) => {
                versionStr = node_vampire_hostinfo_1.default.createVersionString(versions || {});
                resolve(void 0);
            }).catch(() => {
                // empty
            });
        }));
        return Promise.all(pArr).then(() => {
            this.data = node_vampire_util_1.default.stringBuilder([
                '<?xml version="1.0" encoding="utf-8"?>',
                '<status timestamp="' +
                    node_vampire_util_1.default.formatDateTime(now, "yyyy-MM-dd hh:mm:ss.SSS") +
                    '">',
                '<runtime start-time="' +
                    appStartTime +
                    '" up-time="' +
                    (now - appStartTime) +
                    '" java-version="' +
                    version +
                    '" user-name="' +
                    (os_1.default.userInfo ? os_1.default.userInfo().username : "") +
                    '">',
                "<user-dir>" + process.cwd() + "</user-dir>",
                "<java-classpath>" + versionStr + "</java-classpath>",
                "</runtime>",
                '<os name="' +
                    os_1.default.type() +
                    '" arch="' +
                    os_1.default.arch() +
                    '" version="' +
                    os_1.default.release() +
                    '" available-processors="' +
                    (isDocker ? cpu.dockerCount : cpu.count) +
                    '" system-load-average="' +
                    cpu.load +
                    '" process-time="0" total-physical-memory="' +
                    memory.total +
                    '" free-physical-memory="' +
                    memory.free +
                    '" committed-virtual-memory="0" total-swap-space="0" free-swap-space="0" />',
                "<disk>",
                disk.map((item) => '<disk-volume id="' +
                    item.path +
                    (isWin ? "\\" : "") +
                    '" total="' +
                    item.size +
                    '" free="' +
                    item.freeSpace +
                    '" usable="' +
                    (item.size - item.freeSpace) +
                    '" />'),
                "</disk>",
                '<memory max="' +
                    memory.total +
                    '" total="' +
                    memory.total +
                    '" free="' +
                    memory.free +
                    '" heap-usage="' +
                    memory.heapUsed +
                    '" non-heap-usage="' +
                    (memory.rss - memory.heapTotal) +
                    '">',
                "</memory>",
                '<thread count="1" total-started-count="1">',
                "</thread>",
                '<message produced="0" overflowed="0" bytes="0"/>',
                isLinux ?
                    [
                        '<extension id="Network">',
                        node_vampire_util_1.default.objectToArray(node_vampire_hostinfo_1.default.netStatusRe, function (key) {
                            return ('<extensionDetail id="' +
                                key +
                                '" value="' +
                                net[key] +
                                '"/>');
                        }),
                        "</extension>",
                    ] :
                    null,
                '<extension id="System">',
                isDocker ?
                    [
                        '<extensionDetail id="DockerHostLoadAverage" value="' +
                            cpu.load +
                            '"/>',
                        '<extensionDetail id="DockerHostCpuUsage" value="' +
                            cpu.usage * 100 +
                            '"/>',
                        '<extensionDetail id="DockerGuestCpuUsage" value="' +
                            cpu.dockerUsage * 100 +
                            '"/>',
                        '<extensionDetail id="DockerSystemCpuThrottledTime" value="' +
                            cpu.dockerThrottledTime / 1e9 +
                            '"/>',
                        '<extensionDetail id="DockerSystemCpuThrottledCount" value="' +
                            cpu.dockerThrottledCount +
                            '"/>',
                    ] :
                    '<extensionDetail id="LoadAverage" value="' + cpu.load + '" />',
                '<extensionDetail id="AvailableMemory" value="' +
                    memory.avalible +
                    '"/>',
                '<extensionDetail id="FreePhysicalMemory" value="' +
                    memory.free +
                    '"/>',
                isLinux ?
                    [
                        '<extensionDetail id="OpenFileDescriptorCount" value="' +
                            fileDescriptor.open +
                            '"/>',
                        '<extensionDetail id="MaxFileDescriptorCount" value="' +
                            fileDescriptor.max +
                            '"/>',
                        '<extensionDetail id="AvailableFileDescriptorCount" value="' +
                            fileDescriptor.avalible +
                            '"/>',
                    ] :
                    null,
                "</extension>",
                '<extension id="Disk">',
                disk.map((item) => '<extensionDetail id="' +
                    item.path +
                    (isWin ? "\\" : "") +
                    ' Free" value="' +
                    item.freeSpace +
                    '" />'),
                "</extension>",
                '<extension id="CatUsage">',
                '<extensionDetail id="Produced-Delta" value="' +
                    getMessageIdCountDelta() +
                    '" />',
                '<extensionDetail id="Overflowed-Delta" value="' +
                    getDropMessageCountDelta() +
                    '"/>',
                '<extensionDetail id="Bytes-Delta" value="' +
                    getSendBytesDelta(this.sendBytes) +
                    '"/>',
                "</extension>",
                '<extension id="JVMHeap">',
                '<extensionDetail id="Heap Usage" value="' + memory.rss + '" />',
                "</extension>",
                isLinux ?
                    [
                        '<extension id="Tcp">',
                        '<extensionDetail id="SynRecv" value="' +
                            net["SYN_RECV"] +
                            '"/>',
                        '<extensionDetail id="TimeWait" value="' +
                            net["TIME_WAIT"] +
                            '"/>',
                        '<extensionDetail id="Established" value="' +
                            net["ESTABLISHED"] +
                            '"/>',
                        "</extension>",
                    ] :
                    null,
                "</status>",
            ], "\n");
            return;
        }).catch(() => {
            //empty
            return;
        });
    }
    threadDump(event) {
        let pArr = [];
        let eventLoopLatencyMin = healthLatency_1.healthLatency.getEventLoopLatencyMin();
        let libuvThreadPoolLatencyMin = healthLatency_1.healthLatency.getLibuvThreadPoolLatencyMin();
        pArr.push(activeHandles_1.activeHandles.dump().then((statistics) => {
            event("ThreadDump", node_vampire_util_1.default.getHostIp() + "@@" + const_1.pm2Id, JSON.stringify({
                activeHandles: statistics,
                eventLoopLatency: eventLoopLatencyMin,
                libuvThreadPoolLatency: libuvThreadPoolLatencyMin,
            }, null, "\t"));
            return;
        }));
        /* send pkginfo
         * only when the pid of current process is 0(master)
         */
        if (const_1.pm2Id == 0) {
            pArr.push(new Promise(function (resolve) {
                (0, moduleHelper_1.getVersions)().then(function (versions) {
                    for (let key in versions) {
                        if (Object.prototype.hasOwnProperty.call(versions, key)) {
                            event("Node." + key + ".Version", versions[key], null);
                        }
                    }
                    resolve(void 0);
                });
            }));
        }
        return Promise.all(pArr).catch(() => {
            return [];
        });
    }
}
exports.BatHeartbeat = BatHeartbeat;

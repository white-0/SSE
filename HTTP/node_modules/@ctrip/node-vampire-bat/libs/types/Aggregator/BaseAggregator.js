"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Aggregator = void 0;
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const BatStatMsgSpans_1 = require("./BatStatMsgSpans");
const BatStatMsgEvents_1 = require("./BatStatMsgEvents");
const const_1 = require("../../utils/const");
class Aggregator {
    constructor() {
        this.AggregatorQueue = Object.create(null); //{ timestamp: {statMessageTree} }; 
        this.addQueueInternal();
    }
    addQueueInternal() {
        setInterval(() => {
            this.sendData();
        }, 5000).unref();
    }
    /**
     * BatSpan 中调用aggregate，将原始Tree 添加到聚合tree
     * @param originSpan
     */
    aggregate(originSpan) {
        const { type, name } = this.aggregateFilter({
            type: originSpan.type,
            name: originSpan.name
        });
        const aggregatorData = this.makeSurSpanExist(type, name, originSpan.__startTime, originSpan.__type);
        aggregatorData.add(originSpan);
    }
    /**
     * 聚合一颗statMessageTree,以三个维度聚合
     * @param {string} _type
     * @param {string} _name
     * @param {number} _timestamp
     * @returns
    */
    makeSurSpanExist(_type, _name, _timestamp, type) {
        const timestamp = this.getTimeTampMm(_timestamp);
        let timeItem = this.AggregatorQueue[timestamp];
        if (!timeItem) {
            let sendScope = null;
            if (const_1.TYPES.SPAN === type) {
                timeItem = this.AggregatorQueue[timestamp] = {
                    ['statMessageTree']: new BatStatMsgSpans_1.BatStatMsgSpans('', '')
                };
                sendScope = new BatStatMsgSpans_1.BatStatMsgSpans('System', 'CatSpanAggregator');
            }
            else {
                timeItem = this.AggregatorQueue[timestamp] = {
                    ['statMessageTree']: new BatStatMsgEvents_1.BatStatMsgEvents('', '')
                };
                sendScope = new BatStatMsgEvents_1.BatStatMsgEvents('System', 'CatEventAggreator');
            }
            sendScope.__timeStamp = timestamp;
            sendScope.durationInMicro = 100 * 1000; //ms
            timeItem['statMessageTree'].message = sendScope;
            timeItem['statMessageTree'].__timeStamp = timestamp;
            const _itemAggregator = new this.StatData(_type, _name);
            timeItem['statMessageTree']._itemAggregator = {
                [_type]: {
                    [_name]: _itemAggregator
                }
            };
            return _itemAggregator;
        }
        let typeItem = timeItem['statMessageTree']._itemAggregator[_type];
        if (!typeItem) {
            const _itemAggregator = new this.StatData(_type, _name);
            timeItem['statMessageTree']._itemAggregator[_type] = {
                [_name]: _itemAggregator
            };
            return _itemAggregator;
        }
        let nameItem = typeItem[_name];
        if (!nameItem) {
            const _itemAggregator = new this.StatData(_type, _name);
            typeItem[_name] = _itemAggregator;
            return _itemAggregator;
        }
        return nameItem;
    }
    /**
     * 发送一定时间段内聚合的tree
     */
    sendData() {
        if (Object.keys(this.AggregatorQueue).length > 0) {
            const _AggregatorQueue = this.AggregatorQueue;
            this.AggregatorQueue = Object.create(null);
            for (const timeStamp in _AggregatorQueue) {
                if (Object.prototype.hasOwnProperty.call(_AggregatorQueue, timeStamp)) {
                    const { statMessageTree } = _AggregatorQueue[timeStamp];
                    statMessageTree.end();
                }
            }
        }
    }
    getTimeTampMm(timestamp) {
        try {
            return new Date(node_vampire_util_1.default.formatDateTime(new Date(timestamp), "yyyy-MM-dd hh:mm")).getTime();
        }
        catch (e) {
            return new Date(node_vampire_util_1.default.formatDateTime(new Date(), "yyyy-MM-dd hh:mm")).getTime();
        }
    }
}
exports.Aggregator = Aggregator;

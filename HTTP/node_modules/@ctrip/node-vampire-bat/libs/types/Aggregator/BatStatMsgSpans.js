"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatStatMsgSpans = void 0;
const node_vampire_appconfig_1 = __importDefault(require("@ctrip/node-vampire-appconfig"));
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const messageId_1 = require("../../utils/messageId");
const queue_1 = require("../../servlet/queue");
const node_vampire_foundation_framework_1 = __importDefault(require("@ctrip/node-vampire-foundation-framework"));
const const_1 = require("../../utils/const");
const BaseScope_1 = require("../BaseScope");
class BatStatMsgSpans extends BaseScope_1.BaseScope {
    constructor(...args) {
        super(...args);
        this.__properties = {
            idc: node_vampire_foundation_framework_1.default.getServerPropertiesSync("idc"),
            region: node_vampire_foundation_framework_1.default.getServerPropertiesSync("region"),
            az: node_vampire_foundation_framework_1.default.getServerPropertiesSync("az")
        };
        this.__children = [];
        this.__id = node_vampire_util_1.default.uid();
        this.__messageId = messageId_1.messageId.getMessageId();
        this.__type = const_1.TYPES.STATMESSAGE;
        this.status = const_1.STATUS[this.__type];
        this.durationInMicro = -1;
        this.__domain = node_vampire_appconfig_1.default['AppID'];
        this.__hostName = process.env.HOSTNAME;
        this.__ipAddress = node_vampire_util_1.default.getHostIp();
        this.__timeStamp = null;
    }
    statMessageTree(type, name, data) {
        return new BatStatMsgSpans(type, name, data);
    }
    end() {
        if (this._itemAggregator) {
            for (const key in this._itemAggregator) {
                if (Object.prototype.hasOwnProperty.call(this._itemAggregator, key)) {
                    const type = key;
                    for (const typeItem in this._itemAggregator[key]) {
                        if (Object.prototype.hasOwnProperty.call(this._itemAggregator[key], typeItem)) {
                            const name = typeItem;
                            const data = this._itemAggregator[key][typeItem];
                            const _durations = data.MapToString(data.durations);
                            const _distribution = data.MapToString(data.distribution);
                            const _span = this.statMessageTree(type, name, data);
                            _span.__properties.count = data.count;
                            _span.__properties.sum = data.sum;
                            _span.__properties.self = 0;
                            _span.__properties.fail = data.fail;
                            _span.__properties.min = data.min;
                            _span.__properties.max = data.max.value;
                            _span.__properties.messageId = data.messageId;
                            _span.__properties.maxMessageId = data.max.messageId;
                            _span.__properties.durations = _durations;
                            _span.__properties.distribution = _distribution;
                            _span.__timeStamp = this.__timeStamp;
                            _span.durationInMicro = 1 * 1000;
                            this.message && this.message.__children.push(_span);
                        }
                    }
                }
            }
        }
        queue_1.queue.addSendQueue(this);
    }
}
exports.BatStatMsgSpans = BatStatMsgSpans;

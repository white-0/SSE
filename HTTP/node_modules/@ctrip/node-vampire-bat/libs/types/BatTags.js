"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatTags = void 0;
const context_1 = require("./context");
const messageId_1 = require("../utils/messageId");
const BatEvent_1 = require("./BatEvent");
const const_1 = require("../utils/const");
const node_vampire_console_1 = __importDefault(require("@ctrip/node-vampire-console"));
const console = (0, node_vampire_console_1.default)('vampire:bat');
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const queue_1 = require("../servlet/queue");
/** 2023年起 不推荐 */
class BatTags {
    constructor(scenario, indexedTags, storedTags) {
        this.__startTime = new Date().getTime();
        console.warn('cat.tags has been deprecated, refer to: https://node.fx.ctripcorp.com/docs/api/ctriputil/MonitorLogs/ClickHouse ,');
        this.__type = const_1.TYPES.TAGS;
        this.status = const_1.STATUS[this.__type];
        this.scenario = scenario;
        this.indexedTags = node_vampire_util_1.default.copy(indexedTags);
        this.storedTags = node_vampire_util_1.default.copy(storedTags);
        const __context = (0, context_1.appendToContext)(this);
        this.name = node_vampire_util_1.default.getHostIp();
        const __outerMessage = __context.__outerIds && __context.__outerIds['x-cat-id'];
        let scope = (0, context_1.getActiveScope)();
        this.__messageId = __outerMessage || scope && scope.__messageId || messageId_1.messageId.getMessageId();
        // infosec 请求直接丢弃
        if (!__context.isOriginatedFromInfoSec && !__context.isFromInfoSec) {
            queue_1.queue.addSendQueue(this);
            new BatEvent_1.BatEvent('Cat.BizLog.Tried', scenario, '');
        }
    }
    debug() {
        return ("TAGS " +
            node_vampire_util_1.default.formatDateTime(this.__startTime, "hh:mm:ss,SSS") +
            " " +
            node_vampire_util_1.default.getHostIp());
    }
}
exports.BatTags = BatTags;

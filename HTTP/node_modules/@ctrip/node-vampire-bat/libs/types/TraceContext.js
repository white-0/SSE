"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TraceContext = void 0;
const BatEvent_1 = require("./BatEvent");
const const_1 = require("../utils/const");
// 构建TraceContext对象，用于存储请求的上下文信息
class TraceContext {
    constructor() {
        this.context = {};
        this.markerId = 0;
        this.TraceContextOP = 'TraceContext.Op';
    }
    //public markerId Increase
    increaseMarkerId() {
        this.markerId++;
    }
    //重置当前TraceContext
    restoreTraceContext(headers) {
        if (!headers) {
            return;
        }
        let contextHash = {};
        for (let key in headers) {
            if (Object.prototype.hasOwnProperty.call(headers, key)) {
                let lowerCaseKey = key.toLowerCase(); //this step can be ignored.
                const regex = new RegExp(`^${const_1.TRACE_PREFIX}`);
                if (regex.test(lowerCaseKey) &&
                    lowerCaseKey.length > const_1.TRACE_PREFIX.length) {
                    let newKey = key.replace(const_1.TRACE_PREFIX, "");
                    contextHash[newKey] = headers[key];
                }
            }
        }
        if (Object.keys(contextHash).length > 0) {
            this.restore(contextHash);
        }
    }
    // 重置当前TraceContext
    restore(objs) {
        if (!objs) {
            new BatEvent_1.BatEvent(this.TraceContextOP, 'Restore.Null', this.toString());
            return;
        }
        new BatEvent_1.BatEvent(this.TraceContextOP, 'Before.Restore', this.toString());
        this.context = objs;
        new BatEvent_1.BatEvent(this.TraceContextOP, 'After.Restore', this.toString());
    }
    // 删除TraceContext中某个key,返回值参照java hashmap->remove
    remove(key) {
        new BatEvent_1.BatEvent(this.TraceContextOP, 'Before.Remove', this.toString());
        let originValue = Object.prototype.hasOwnProperty.call(this.context, key) ? this.context[key] : null;
        delete this.context[key];
        new BatEvent_1.BatEvent(this.TraceContextOP, 'After.Remove', this.toString());
        return originValue;
    }
    // 判断是否包含key
    containsKey(key) {
        return Object.prototype.hasOwnProperty.call(this.context, key);
    }
    // 获取完整TraceContext 
    getContext() {
        return this.context;
    }
    // 获取key对应的value
    get(key) {
        return this.context[key];
    }
    // 批量添加TraceContext 
    addAll(objs) {
        new BatEvent_1.BatEvent(this.TraceContextOP, 'Before.AddAll', this.toString());
        for (let key in objs) {
            this.context[key] = objs[key];
        }
        new BatEvent_1.BatEvent(this.TraceContextOP, 'After.AddAll', this.toString());
    }
    // 添加一个TraceContext ，返回值参照java hashmap->put;tripLog中会设置
    add(key, value) {
        new BatEvent_1.BatEvent(this.TraceContextOP, 'Before.Add', this.toString());
        let originValue = Object.prototype.hasOwnProperty.call(this.context, key) ? this.context[key] : null;
        this.context[key] = value;
        new BatEvent_1.BatEvent(this.TraceContextOP, 'After.Add', this.toString());
        return originValue;
    }
    toString() {
        let str = 'DefaultTraceContext value is: ';
        for (let key in this.context) {
            str += 'key: ' + key + ' value: ' + this.context[key] + ' ';
        }
        return str;
    }
}
exports.TraceContext = TraceContext;

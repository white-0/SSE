"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = void 0;
const node_vampire_foundation_framework_1 = __importDefault(require("@ctrip/node-vampire-foundation-framework"));
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const node_vampire_cache_1 = __importDefault(require("@ctrip/node-vampire-cache"));
const node_vampire_locker_1 = __importDefault(require("@ctrip/node-vampire-locker"));
const Cache = node_vampire_cache_1.default.Cache;
const AppID = node_vampire_foundation_framework_1.default.getAppID();
const cacheName = "node-vampire-cat-" + AppID;
const lockerName = "node-vampire-cat-MessageId-" + AppID;
let store = new Cache(cacheName, 512 * 1024);
let locker = new node_vampire_locker_1.default(lockerName);
function getHourString() {
    return Math.floor(+new Date() / 3600000).toString();
}
const maxMsgSeq = 2147483647; //JS中的最大正整数值
let msgCount = 0;
locker.lockSync();
if (!store[getHourString() + "-hour"]) {
    store[getHourString() + "-hour"] =
        Math.floor(maxMsgSeq / 60) * new Date().getMinutes();
}
locker.unlockSync();
let hostIp = node_vampire_util_1.default
    .getHostIp()
    .split(".")
    .map(function (item) {
    return node_vampire_util_1.default.fillZero(parseInt(item, 10).toString(16), 2);
})
    .join("");
// 规则:msgSeq 不超过maxMsgSeq的随机数，不保证连续;
exports.messageId = {
    getMessageId: () => {
        let messageIdArr = [];
        messageIdArr.push(AppID);
        messageIdArr.push(hostIp);
        let hourStr = getHourString();
        messageIdArr.push(hourStr);
        let msgSeq = node_vampire_cache_1.default.increase(store, hourStr + "-hour", 1) % maxMsgSeq;
        messageIdArr.push(msgSeq);
        msgCount++;
        return messageIdArr.join("-");
    },
    getMessageIdCount: () => {
        return msgCount;
    }
};

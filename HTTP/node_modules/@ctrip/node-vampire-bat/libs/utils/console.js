"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = void 0;
const node_vampire_appconfig_1 = __importDefault(require("@ctrip/node-vampire-appconfig"));
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const node_vampire_console_1 = __importDefault(require("@ctrip/node-vampire-console"));
const console = (0, node_vampire_console_1.default)('vampire:bat');
const os_1 = __importDefault(require("os"));
const fs_1 = __importDefault(require("fs"));
const platform = os_1.default.platform();
const id = parseInt(process.env[process.env.instance_var || 'NODE_APP_INSTANCE'], 10) || 0;
let filename = `/opt/logs/${node_vampire_appconfig_1.default['appId']}/${id}-catLog.log`;
let writeStream = null;
if (platform == "linux" && fs_1.default.existsSync(`/opt/logs/${node_vampire_appconfig_1.default['appId']}`))
    writeStream = fs_1.default.createWriteStream(filename, { flags: 'a' });
function log(message, warn) {
    if (platform == "linux") {
        try {
            if (writeStream)
                writeStream.write(`[${node_vampire_util_1.default.formatDateTime()}-${id} Vampire-Cat ]: ` + message + '\n', function (err) {
                    err && console.error(err);
                });
        }
        catch (err) {
            //empty
        }
    }
    else {
        if (warn) {
            console.warn(`[${node_vampire_util_1.default.formatDateTime()}-${id} Vampire-Cat ]: ` + message);
        }
        else {
            console.debug(`[${node_vampire_util_1.default.formatDateTime()}-${id} Vampire-Cat ]: ` + message);
        }
    }
}
exports.log = log;

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.appConfig = void 0;
const node_vampire_appconfig_1 = __importDefault(require("@ctrip/node-vampire-appconfig"));
const node_vampire_foundation_framework_1 = __importDefault(require("@ctrip/node-vampire-foundation-framework"));
const console_1 = require("./utils/console");
class catConfig {
    constructor() {
        this.cat_server_host_default = {
            'fws': 'cat.fws.qa.nt.ctripcorp.com',
            'lpt': 'cat.fws.qa.nt.ctripcorp.com',
            'uat': 'cat.uat.qa.nt.ctripcorp.com',
            'pro': 'cat.ctripcorp.com'
        };
        this.debug = node_vampire_appconfig_1.default["debug"];
    }
    setDefaultConfig(key, value) {
        this[key] = value;
        node_vampire_appconfig_1.default[key] = value;
    }
    updateCatServerConfig() {
        let cat_server_host = this.cat_server_host_default[this.Env];
        this.setDefaultConfig("CatServer.Config.Url", `http://${cat_server_host}/cat/s/router`);
        this.setDefaultConfig("CatServer.Url", `http://${cat_server_host}:80/cat/r/m/`);
        this.setDefaultConfig("CatServer.Host", `${cat_server_host}:80`);
    }
    async init() {
        if (!this.initPromise) {
            this.initPromise = Promise.all([node_vampire_foundation_framework_1.default.getEnv(), node_vampire_foundation_framework_1.default.getIDC(), node_vampire_foundation_framework_1.default.getZone()]).then((args) => {
                let env = args[0];
                let idc = args[1];
                let zone = args[2];
                this.AppID = node_vampire_foundation_framework_1.default.getAppID();
                this.Env = env;
                this.IDC = idc;
                this.Zone = zone;
                this.setDefaultConfig("CatServer", []);
                this.updateCatServerConfig();
                /**2019/6/18修改 判断是否读取metadata成功，如果成功的话，则直接覆盖
                 * 不再hard-code env和idc
                 */
                return node_vampire_foundation_framework_1.default
                    .getConfig("*")
                    .then((data) => {
                    if (node_vampire_foundation_framework_1.default.configNeedToBeUpdated) {
                        if (data["cat.server.host"]) {
                            this.cat_server_host_default[env] = data["cat.server.host"];
                            this.updateCatServerConfig();
                        }
                    }
                }).catch((e) => {
                    //如果没有metadata_domain没有返回，则仍然返回默认设置的（数据无法回发，但是不会影响应用运行）
                    (0, console_1.log)("Get cat.server.host error, reuse the default server value: " + e);
                });
            });
        }
        try {
            return await this.initPromise;
        }
        catch (e) {
            (0, console_1.log)('Init config error, ' + e);
            this.initPromise = null;
            throw e;
        }
    }
}
exports.appConfig = new catConfig();

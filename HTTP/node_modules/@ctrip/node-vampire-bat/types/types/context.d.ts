/// <reference types="node" />
/// <reference types="node" />
import { IncomingMessage } from "http";
import type { InfoSec } from "../utils/interface";
import type { BatScope, Store } from '../utils/interface';
import { TraceContext } from './TraceContext';
import { BaseScope } from "./BaseScope";
declare class Context {
    seq: number;
    children: Array<BatScope>;
    clock: NodeJS.Timeout;
    __inheritValue: object;
    infoSecPrefix: string;
    isFromInfoSec: boolean;
    isOriginatedFromInfoSec: boolean;
    __traceContext: TraceContext;
    __outerIds: object;
    constructor();
    setTimeout(isEndTree?: boolean): void;
    private buildStore;
    enter(scope?: any): void;
    resetEnter(scope?: any): void;
    exit(scope?: any): void;
    /**
     * 在当前上下文内运行一个异步函数，绑定合并上下文数据
     * @param scope 上下文span
     * @param fn 应用fn(支持Promise,callback)
     * @param data 参数(rootmessageid等信息)
     * @returns
     */
    runAsync(scope: any, fn: any, data?: {}): Promise<any>;
    run(scope: any, fn: any, data?: {}): unknown;
    /**
     *
     */
    end(scope?: BatScope): void;
    /**
     * 发送当前上下文树
     * */
    private send;
    /**
     * 合并当前上下文树
     * 如果当前树不是未关闭的root tree,那么需要封装一层__CatMergeTree
     */
    private catMergeTree;
    /**
     * 当 Tree 关闭的时候，设置 =查看更多
     */
    private setRemoteCall;
    debug(): string;
    setInheritValue(key: string, req: IncomingMessage, infoSec?: InfoSec): void;
    /**
     * 初始化messageId, parentId 和 rootId(根据header中的X-CAT-TRACE-MODE来判断是否需要从头部获取相关id)
    * @param {object} headers 头部信息
    */
    private updateIds;
    setUpdateIds(headers: object): void;
}
declare function getActiveContext(forceCreate?: boolean, node?: BaseScope): Context;
declare function getActiveScope(): BatScope;
declare function getActiveRootScope(): BatScope;
declare function getData(key?: string): string | Store<Context>;
declare function appendToContext(node: any, isEndTree?: boolean): Context;
export { getActiveContext, getActiveScope, getActiveRootScope, getData, appendToContext, Context };

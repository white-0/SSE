import type { timeoutStatsMap } from './utils/interface';
import { BatSpan } from "./types/BatSpan";
import { BatEvent } from "./types/BatEvent";
import { BatTags } from "./types/BatTags";
import { runInGlobalContextAsync } from './utils/storage';
import './servlet/subProcess';
import { getActiveContext, getActiveScope, getActiveRootScope, getData } from "./types/context";
export { getActiveContext, getActiveScope, getActiveRootScope, getData, runInGlobalContextAsync };
/**** 对外提供的API ****/
export declare const http: (server: any) => void;
export declare const span: (type: string, name: string, data?: any) => BatSpan;
export declare const event: (type: string, name: string, data?: any) => BatEvent;
export declare const error: (err: any, stack?: any) => BatEvent;
export declare const tags: (scenario: string, indexedTags: object, storedTags?: any) => BatTags;
export declare const getActiveSpan: () => import("./utils/interface").BatScope;
export declare const getMessageId: () => string;
export declare const __setCatSpanTimeout: (timeout: any) => void;
export declare const isCanaryRequest: () => boolean;
export declare const setAggregatorRules: (opts: any) => void;
export declare const setURLTranscation: (callback: any) => void;
export declare const isOriginatedFromInfoSec: () => boolean;
export declare const isFromInfoSec: () => boolean;
export declare const getRootMessageId: () => string;
export declare const getParentMessageId: () => string;
export declare const getCurrentMessageId: () => string;
export declare const setPropertiesToActiveSpan: (key: string, value: any) => void;
export declare const setPropertiesToRootActiveSpan: (key: string, value: any) => void;
export declare const setRootToActiveContext: (key: string | object, value?: any) => void;
export declare const register: (opts: timeoutStatsMap) => void;
declare const _default: {
    http: (server: any) => void;
    span: (type: string, name: string, data?: any) => BatSpan;
    event: (type: string, name: string, data?: any) => BatEvent;
    error: (err: any, stack?: any) => BatEvent;
    tags: (scenario: string, indexedTags: object, storedTags?: any) => BatTags;
    getActiveSpan: () => import("./utils/interface").BatScope;
    getMessageId: () => string;
    getRootMessageId: () => string;
    getParentMessageId: () => string;
    getCurrentMessageId: () => string;
    isCanaryRequest: () => boolean;
    setAggregatorRules: (opts: any) => void;
    setURLTranscation: (callback: any) => void;
    isOriginatedFromInfoSec: () => boolean;
    isFromInfoSec: () => boolean;
    getActiveContext: typeof getActiveContext;
    getActiveScope: typeof getActiveScope;
    getData: typeof getData;
    setPropertiesToActiveSpan: (key: string, value: any) => void;
    getActiveRootScope: typeof getActiveRootScope;
    setPropertiesToRootActiveSpan: (key: string, value: any) => void;
    setRootToActiveContext: (key: string | object, value?: any) => void;
    register: (opts: timeoutStatsMap) => void;
    runInGlobalContextAsync: typeof runInGlobalContextAsync;
};
export default _default;

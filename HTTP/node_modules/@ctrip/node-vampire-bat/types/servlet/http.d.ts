/// <reference types="node" />
/** cat new http createServer */
import { IncomingMessage } from 'http';
import type { InfoSec } from '../utils/interface';
/**generate URL.client part
 * IPS: 客户端真实IP
 * VirtualIP: remote_addr
 * Server：请求的domainName（参照Java的request.getServerName())
 * Referer:referrer 或 referer
 * Agent: user-agent
 * @param req {Object} http.IncomingMessage
 * @return {string} 用&连接的类似querystring格式的内容
 */
export declare function logRequestClientInfo(req: IncomingMessage): string;
/**generate URL.method part
 * Method: HTTP/{method}
 * URL: request url(remove domainName)
 * @param req {Object} http.IncomingMessage
 * @return {string} 用&连接的类似querystring格式的内容
 */
export declare function logRequestMethodInfo(req: IncomingMessage): string;
/**
 * 判断上游链路中是否有source,用于全链路串联
 * @param req {Object} http.IncomingMessage
 * @return {number} 0: normal, 1: from header, 2: from container
 */
export declare function detectMode(req: IncomingMessage): number;
export declare function getIsInfoSec(req: IncomingMessage): InfoSec;
export declare const ucsFilter: (headers: object) => void;
export declare const batHttp: (server: any) => void;

/// <reference types="node" />
import { AgentOptions, OutgoingHttpHeaders, ServerResponse } from 'http';
import { SoaClientInitOptions, InvokeOptions } from './utils/soaMonitor';
export declare abstract class SoaClientBaseApi {
    protected serviceId: string;
    protected serviceCode: string;
    protected serviceTimeout: number;
    protected agent: AgentOptions;
    protected url: string;
    protected format: string;
    protected headers: object;
    protected SOAInitCache: Promise<void>;
    protected subEnv: string;
    protected soaClientType: any;
    protected responseUtils: ResponseUtils;
    protected userId: string;
    protected originalResponse: boolean;
    constructor(opts: SoaClientInitOptions);
    baseInit(): Promise<void>;
    private _getServiceInfo;
    baseInvoke<T>(opt: InvokeOptions<T>): Promise<any>;
    private _invoke;
    addEphemeralHeader(reqHeaders: object): void;
    protected urlCheck(str: any): any;
    protected abstract childInvoke(opts: {
        method?: string;
        reqUrl: string;
        httpOpt: any;
        requestBody: string;
    }): Promise<any>;
    protected abstract init(): Promise<any>;
}
declare class ResponseUtils {
    private responseFlag;
    private responseCodeDetail;
    private serviceId;
    private subEnv?;
    private clientInfo;
    constructor(opts: {
        serviceId: string;
        subEnv?: string;
    });
    readResponseFlag(headers: OutgoingHttpHeaders): void;
    logResponseFlag(statusCode: number): void;
    checkEnvoy503Exception(opts: {
        response: ServerResponse;
        format: string;
        operation: string;
        serviceURI: string;
        ack?: string;
        status?: string;
    }): void;
    private getBaseUriNotFoundExceptionMessage;
    getOrCreateClientInfo(opts: {
        format: string;
        operation: string;
        serviceURI: string;
        ack?: string;
        status?: string;
        skipBodyParse?: boolean;
    }): object;
}
export {};

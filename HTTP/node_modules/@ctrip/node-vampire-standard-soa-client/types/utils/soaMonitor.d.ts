/// <reference types="node" />
import { AgentOptions } from 'http';
export declare function SOAMonitor(): void;
export declare namespace SOAMonitor {
    var _instance: any;
    var ENUM_CON_MODE: {
        0: string;
        1: string;
        2: string;
        CONNECTION_REQUEST_TIMEOUT: string;
        CONNECT_TIMEOUT: string;
        SOCKET_TIMEOUT: string;
        connectionRequestTimeout: number;
        connectTimeout: number;
        socketTimeout: number;
        CONFIGURED_SUB_ENV: string;
        MACHINE_SUB_ENV: string;
        CONTEXT_SUB_ENV: string;
    };
    var getInstance: () => any;
}
export declare enum CLIENT_TYPE {
    'Direct' = 0,
    'WebApi' = 1
}
export declare enum CLIENT_TYPE_INTERNAL {
    'Direct' = 0,
    'WebApi' = 1,
    'Sidecar' = 2
}
export declare const Sidecar: {
    RESPONSE_FLAG_HEADER_NAME: string;
    RESPONSE_CODE_DETAIL_HEADER_NAME: string;
    UH: string;
    UC: string;
    STATUS_CODE: string;
    SIDECAR_RESPONSE_CODE_DETAIL: string;
    SIDECAR_RESPONSE_FLAG: string;
};
export interface SoaClientInitOptions {
    serviceId?: string;
    serviceCode?: string;
    serviceTimeout?: number;
    soaServerUrl?: string;
    agent?: AgentOptions;
    format?: string;
    subEnv?: string;
    soaClientType?: CLIENT_TYPE;
    isMock?: string;
    originalResponse?: boolean;
}
export interface SoaInvokeOptions<T> {
    args: T;
    query?: string[][] | Record<string, string> | string | URLSearchParams;
    reqEphemeralParams?: {
        headers?: object;
        responseTimeout?: number;
    };
    skipBodyParse?: boolean;
    format?: string;
    isResHeaders?: boolean;
    isHandleServiceErrorManually?: boolean;
    statusCode_307_redirect_url?: string;
    hardUrl?: string;
}
export interface InvokeOptions<T> extends SoaInvokeOptions<T> {
    method: string;
}

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SoaClientDirectApi = void 0;
const node_vampire_http_1 = __importDefault(require("@ctrip/node-vampire-http"));
const soaMonitor_1 = require("./utils/soaMonitor");
const soaClientBaseApi_1 = require("./soaClientBaseApi");
const node_vampire_artemis_1 = require("@ctrip/node-vampire-artemis");
const node_vampire_cat_1 = __importDefault(require("@ctrip/node-vampire-cat"));
const appConfig_1 = require("./utils/appConfig");
class SoaClientDirectApi extends soaClientBaseApi_1.SoaClientBaseApi {
    constructor(opts) {
        super(opts);
        /* 初始化
         * @param {Object} opts
         * @param {String} opts.serviceCode serviceCode //2019/07/11 新增，为了BU尽可能少的修改代码
         * @param {String} opts.serviceId serviceId
         * @param {String} opts.subEnv subEnv * 对于serviceMesh 指定子环境是无效的
         * @param {String=} opts.serviceTimeout  设置调用timeout，默认为server.timeout 120000(2mins)
         * @param {String=} opts.soaServerUrl 可以覆盖IP (需要加上协议)
         * @param {Object=} opts.agent 设置http agent (https://nodejs.org/dist/latest-v10.x/docs/api/http.html#http_class_http_agent)
         */
        this.artemisClient = null;
        this.SoaDirectInitCache = null;
        this.soaServerUrl = null;
        this.soaServerUrl = opts['soaServerUrl'];
        this.soaClientType = soaMonitor_1.CLIENT_TYPE.Direct;
        this.init();
    }
    init() {
        if (this.SoaDirectInitCache)
            return this.SoaDirectInitCache;
        this.SoaDirectInitCache = this.baseInit().then(() => {
            this.artemisClient = new node_vampire_artemis_1.Client({
                'serviceId': this.serviceId.toLowerCase(),
                'subEnv': this.subEnv
            });
            return this.artemisClient.init();
        }).catch((err) => {
            this.SoaDirectInitCache = null;
            throw err;
        });
        return this.SoaDirectInitCache;
    }
    invoke(opts) {
        return this.init().then(() => {
            let span = node_vampire_cat_1.default.getActiveSpan() || { "getTraceContext": null };
            let traceContext = span.getTraceContext ? span.getTraceContext(true).getContext() : {};
            if (!this.soaServerUrl) {
                this.url = this.artemisClient.getServiceUrl(opts.method, opts.routeId ? opts.routeId : null, opts.userId || this.userId || traceContext['ucs-user-id'] || null);
            }
            opts.statusCode_307_redirect_url && (opts.hardUrl = opts.statusCode_307_redirect_url);
            opts.routeId && delete opts.routeId;
            return this.baseInvoke(opts);
        });
    }
    /*初始化
     * @param {Object} opts
     * @param {String} opts.method 方法名
     * @param {String=} opts.args 参数
     * @param {Object=} opts.query query参数
     * @param {String=} opts.format 格式
     * @param {String=} opts.skipBodyParse 是否跳过解析
     * @param {String=} opts.isResHeaders 是否返回headers
     * @param {String=} opts.isHandleServiceErrorManually 是否跳过解析直接返回数据。用于响应是JSON,但不符合SOA规范的报文
     * @param {Object=} opts.reqEphemeralParams 如 headers, reqTimeout, {headers: {'cookie': [req.headers.cookie]}, responseTimeout: 2000}
     */
    childInvoke(opts) {
        if (opts.httpOpt && opts.httpOpt.headers['x-ctrip-canary-req'] === '1') {
            opts.httpOpt.headers['x-ctrip-canary-soaserviceid'] = this.serviceId.toLowerCase(); // ip直连需要
            opts.httpOpt.headers['x-ctrip-canary-soaserviceappids'] = this.artemisClient.getServerAppIdByURL(this.url); // ip直连需要
            opts.httpOpt.headers['x-ctrip-canary-targetinstanceurl'] = this.url; // ip直连需要
            opts.reqUrl = opts.reqUrl.replace(this.url, appConfig_1.appConfig.SOACanaryGatewayUrl); //堡垒网关
            node_vampire_cat_1.default.event('Canary.Request', 'Send. Url:' + opts.reqUrl);
        }
        return (0, node_vampire_http_1.default)(opts.reqUrl, opts.httpOpt, opts.requestBody).then((res) => {
            //Sidecar 特有日志
            this.responseUtils.readResponseFlag(res.headers);
            this.responseUtils.logResponseFlag(res.statusCode);
            this.responseUtils.checkEnvoy503Exception({ response: res, format: this.format, operation: opts.method, serviceURI: opts.reqUrl });
            // 酒店BU 客户端访问服务时，需要重定向
            if (res.statusCode == 307 && res.headers && res.headers.location) {
                return this.childInvoke(Object.assign({}, opts, {
                    hardUrl: res.headers.location
                }));
            }
            return res;
        });
    }
}
exports.SoaClientDirectApi = SoaClientDirectApi;

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SoaClientWebApi = void 0;
const node_vampire_http_1 = __importDefault(require("@ctrip/node-vampire-http"));
const soaMonitor_1 = require("./utils/soaMonitor");
const soaClientBaseApi_1 = require("./soaClientBaseApi");
const appConfig_1 = require("./utils/appConfig");
class SoaClientWebApi extends soaClientBaseApi_1.SoaClientBaseApi {
    /* 初始化
     * @param {Object} opts
     * @param {String} opts.serviceCode serviceCode //2019/07/11 新增，为了BU尽可能少的修改代码
     * @param {String} opts.serviceId serviceId
     * @param {String} opts.subEnv subEnv * 对于serviceMesh 指定子环境是无效的
     * @param {String=} opts.serviceTimeout  设置调用timeout，默认为server.timeout 120000(2mins)
     * @param {String=} opts.soaServerUrl 可以覆盖IP (需要加上协议)
     * @param {Object=} opts.agent 设置http agent (https://nodejs.org/dist/latest-v10.x/docs/api/http.html#http_class_http_agent)
     */
    constructor(opts) {
        super(opts);
        this.soaClientType = soaMonitor_1.CLIENT_TYPE.WebApi;
        if (!this.serviceCode) {
            throw new TypeError(`[@ctrip/node-vampire-soa-client] ${this.soaClientType} error: serviceCode is required`);
        }
        this.init();
    }
    init() {
        return this.baseInit().then(() => {
            this.url = this.url || appConfig_1.appConfig.SOAWebApiUrl + this.serviceCode + '/';
        });
    }
    invoke(opts) {
        return this.init().then(() => this.baseInvoke(opts));
    }
    /*初始化
     * @param {Object} opts
     * @param {String} opts.method 方法名
     * @param {String=} opts.args 参数
     * @param {Object=} opts.query query参数
     * @param {String=} opts.format 格式
     * @param {String=} opts.skipBodyParse 是否跳过解析
     * @param {String=} opts.isResHeaders 是否返回headers
     * @param {String=} opts.isHandleServiceErrorManually 是否跳过解析直接返回数据。用于响应是JSON,但不符合SOA规范的报文
     * @param {Object=} opts.reqEphemeralParams 如 headers, reqTimeout, {headers: {'cookie': [req.headers.cookie]}, responseTimeout: 2000}
     */
    childInvoke(opts) {
        return (0, node_vampire_http_1.default)(opts.reqUrl, opts.httpOpt, opts.requestBody);
    }
}
exports.SoaClientWebApi = SoaClientWebApi;

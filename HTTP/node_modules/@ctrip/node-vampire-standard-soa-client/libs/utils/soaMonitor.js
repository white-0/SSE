"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sidecar = exports.CLIENT_TYPE_INTERNAL = exports.CLIENT_TYPE = exports.SOAMonitor = void 0;
const soaConst_1 = require("./soaConst");
const node_vampire_metric_1 = __importDefault(require("@ctrip/node-vampire-metric"));
const versionPrefix = 'CT-';
function SOAMonitor() {
    this.metric_list = {};
    this.initMetric();
}
exports.SOAMonitor = SOAMonitor;
SOAMonitor._instance = null;
var CLIENT_TYPE;
(function (CLIENT_TYPE) {
    CLIENT_TYPE[CLIENT_TYPE["Direct"] = 0] = "Direct";
    CLIENT_TYPE[CLIENT_TYPE["WebApi"] = 1] = "WebApi";
})(CLIENT_TYPE = exports.CLIENT_TYPE || (exports.CLIENT_TYPE = {}));
var CLIENT_TYPE_INTERNAL;
(function (CLIENT_TYPE_INTERNAL) {
    CLIENT_TYPE_INTERNAL[CLIENT_TYPE_INTERNAL["Direct"] = 0] = "Direct";
    CLIENT_TYPE_INTERNAL[CLIENT_TYPE_INTERNAL["WebApi"] = 1] = "WebApi";
    CLIENT_TYPE_INTERNAL[CLIENT_TYPE_INTERNAL["Sidecar"] = 2] = "Sidecar";
})(CLIENT_TYPE_INTERNAL = exports.CLIENT_TYPE_INTERNAL || (exports.CLIENT_TYPE_INTERNAL = {}));
SOAMonitor.ENUM_CON_MODE = {
    [CLIENT_TYPE_INTERNAL.Direct]: "DIRECT",
    [CLIENT_TYPE_INTERNAL.WebApi]: "WEBAPI",
    [CLIENT_TYPE_INTERNAL.Sidecar]: "SIDECAR",
    CONNECTION_REQUEST_TIMEOUT: "SOA2Client.connectionRequestTimeout",
    CONNECT_TIMEOUT: "SOA2Client.connectTimeout",
    SOCKET_TIMEOUT: "SOA2Client.socketTimeout",
    connectionRequestTimeout: 120000,
    connectTimeout: -1,
    socketTimeout: 120000,
    CONFIGURED_SUB_ENV: "SOA2Client.configuredSubEnv",
    MACHINE_SUB_ENV: "SOA2Client.machineSubEnv",
    CONTEXT_SUB_ENV: "SOA2Client.ctxSubEnv"
};
exports.Sidecar = {
    RESPONSE_FLAG_HEADER_NAME: 'x-service-response-flag',
    RESPONSE_CODE_DETAIL_HEADER_NAME: 'x-service-response-detail',
    UH: 'UH',
    UC: 'UC',
    STATUS_CODE: "SOA2Client.statusCode",
    SIDECAR_RESPONSE_CODE_DETAIL: "SOA2Client.Sidecar.responseCodeDetail",
    SIDECAR_RESPONSE_FLAG: "SOA2Client.Sidecar.responseFlag"
};
SOAMonitor.getInstance = function () {
    if (!SOAMonitor._instance) {
        SOAMonitor._instance = new SOAMonitor();
    }
    return SOAMonitor._instance;
};
SOAMonitor.prototype.initMetric = function () {
    let list = soaConst_1.soaConst.METRICS_LIST;
    for (let key in list) {
        this.metric_list[key] = new node_vampire_metric_1.default({
            name: list[key]['name'],
            tags: list[key]['tags']
        });
        this.metric_list[key].start();
    }
};
SOAMonitor.prototype.sendMetric = function (metricName, tag, value) {
    try {
        // console.log('[sendMetric] metricName:' + metricName + ';tag:' + JSON.stringify(tag) + ';value:' + value);
        this.metric_list[metricName].add(value, tag);
    }
    catch (e) {
        console.log('[sendMetric] ' + metricName + ' send metric fail ' + e.message);
    }
};
SOAMonitor.prototype.CtriputilCountSOAClient = function ({ val, serviceCode, frameworkversion }) {
    this.sendMetric('CtriputilCountSOAClient', {
        'version': frameworkversion,
        'serviceCode': serviceCode
    }, val);
};
SOAMonitor.prototype.CtriputilCountSOAClientInvoke = function ({ val, serviceCode, frameworkversion }) {
    this.sendMetric('CtriputilCountSOAClientInvoke', {
        'version': frameworkversion,
        'serviceCode': serviceCode
    }, val);
};
SOAMonitor.prototype.SOARequestCount = function ({ val, frameworkversion, connectionmode, format, webservice, operation }) {
    this.sendMetric('SOARequestCount', {
        'frameworkversion': versionPrefix + frameworkversion,
        'codegenversion': '',
        'connectionmode': connectionmode,
        'format': format,
        'operation': operation,
        'webservice': webservice,
        'nodejs_direct': connectionmode === SOAMonitor.ENUM_CON_MODE[CLIENT_TYPE_INTERNAL.Direct] || false,
        'nodejs_webapi': connectionmode === SOAMonitor.ENUM_CON_MODE[CLIENT_TYPE_INTERNAL.WebApi] || false,
    }, val);
};
SOAMonitor.prototype.SOARequestLatency = function ({ val, frameworkversion, connectionmode, webservice, operation }) {
    this.sendMetric('SOARequestLatency', {
        'frameworkversion': versionPrefix + frameworkversion,
        'codegenversion': '',
        'connectionmode': connectionmode,
        'operation': operation,
        'webservice': webservice,
        'nodejs_direct': connectionmode === SOAMonitor.ENUM_CON_MODE[CLIENT_TYPE_INTERNAL.Direct] || false,
        'nodejs_webapi': connectionmode === SOAMonitor.ENUM_CON_MODE[CLIENT_TYPE_INTERNAL.WebApi] || false,
    }, val);
};
SOAMonitor.prototype.SOARequestLatencyDistribution = function ({ val, frameworkversion, connectionmode, distribution, webservice, operation }) {
    this.sendMetric('SOARequestLatencyDistribution', {
        'frameworkversion': versionPrefix + frameworkversion,
        'codegenversion': '',
        'connectionmode': connectionmode,
        'distribution': distribution,
        'operation': operation,
        'webservice': webservice,
        'nodejs_direct': connectionmode === SOAMonitor.ENUM_CON_MODE[CLIENT_TYPE_INTERNAL.Direct] || false,
        'nodejs_webapi': connectionmode === SOAMonitor.ENUM_CON_MODE[CLIENT_TYPE_INTERNAL.WebApi] || false
    }, val);
};
SOAMonitor.prototype.SOARequestSettingRequesttimeout = function ({ val, frameworkversion, connectionmode, webservice, operation }) {
    this.sendMetric('SOARequestSettingRequesttimeout', {
        'frameworkversion': versionPrefix + frameworkversion,
        'codegenversion': '',
        'connectionmode': connectionmode,
        'operation': operation,
        'webservice': webservice,
        'nodejs_direct': connectionmode === SOAMonitor.ENUM_CON_MODE[CLIENT_TYPE_INTERNAL.Direct] || false,
        'nodejs_webapi': connectionmode === SOAMonitor.ENUM_CON_MODE[CLIENT_TYPE_INTERNAL.WebApi] || false
    }, val);
};
SOAMonitor.prototype.SOARequestSettingRequesttimeoutDistribution = function ({ val, frameworkversion, connectionmode, distribution, webservice, operation }) {
    this.sendMetric('SOARequestSettingRequesttimeoutDistribution', {
        'frameworkversion': versionPrefix + frameworkversion,
        'codegenversion': '',
        'connectionmode': connectionmode,
        'distribution': distribution,
        'operation': operation,
        'webservice': webservice,
        'nodejs_direct': connectionmode === SOAMonitor.ENUM_CON_MODE[CLIENT_TYPE_INTERNAL.Direct] || false,
        'nodejs_webapi': connectionmode === SOAMonitor.ENUM_CON_MODE[CLIENT_TYPE_INTERNAL.WebApi] || false
    }, val);
};
SOAMonitor.prototype.SOAExceptionCount = function ({ val, frameworkversion, connectionmode, exceptionname, exceptiontype, webservice, operation }) {
    this.sendMetric('SOAExceptionCount', {
        'frameworkversion': versionPrefix + frameworkversion,
        'codegenversion': '',
        'connectionmode': connectionmode,
        'exceptionname': exceptionname,
        'exceptiontype': exceptiontype,
        'operation': operation,
        'webservice': webservice,
        'nodejs_direct': connectionmode === SOAMonitor.ENUM_CON_MODE[CLIENT_TYPE_INTERNAL.Direct] || false,
        'nodejs_webapi': connectionmode === SOAMonitor.ENUM_CON_MODE[CLIENT_TYPE_INTERNAL.WebApi] || false
    }, val);
};
SOAMonitor.prototype.distribution = function (value) {
    let d;
    value = parseInt(value);
    if (value >= 0 && value < 10) {
        d = '0~10ms';
    }
    else if (value >= 10 && value < 50) {
        d = '10 ~ 50ms';
    }
    else if (value >= 50 && value < 200) {
        d = '50 ~ 200ms';
    }
    else if (value >= 200 && value < 500) {
        d = '200 ~ 500ms';
    }
    else if (value >= 500 && value < 1000) {
        d = '500ms ~ 1s';
    }
    else if (value >= 1000 && value < 5000) {
        d = '1s ~ 5s';
    }
    else if (value >= 5000 && value < 10000) {
        d = '5s ~ 10s';
    }
    else if (value >= 10000 && value < 30000) {
        d = '10s ~ 30s';
    }
    else if (value >= 30000 && value < 100000) {
        d = '30s ~ 100s';
    }
    else {
        d = '>= 100s';
    }
    return d;
};

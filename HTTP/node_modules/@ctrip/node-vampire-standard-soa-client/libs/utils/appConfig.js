"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.appConfig = void 0;
const node_vampire_foundation_framework_1 = __importDefault(require("@ctrip/node-vampire-foundation-framework"));
const node_vampire_qconfig_1 = __importDefault(require("@ctrip/node-vampire-qconfig"));
class soaConfig {
    constructor() {
        this.SOA_ServiceInfo_Url = null;
        this.SOA_ServiceInfo_Url_Yun = null;
        this.initPromise = null;
        this.SOA_Canary_Gateway_Url = null;
        this.SOA_Canary_Gateway_Yun = null;
        this.SOA_WebApi_Url = null;
        this.SOA_WebApi_Url_Yun = null;
        this.Env = null;
        this.AppID = null;
        this.idc = null;
        this.serviceInfoUrl = null;
        this.subEnv = null;
        this.SOAWebApiUrl = null;
        this.SOACanaryGatewayUrl = null;
        this.SOA_ServiceInfo_Url = {
            'fws': 'http://ws.soa.fws.qa.nt.ctripcorp.com/core/metadata/services/',
            'lpt': 'http://ws.soa.fws.qa.nt.ctripcorp.com/core/metadata/services/',
            'uat': 'http://ws.soa.uat.qa.nt.ctripcorp.com/core/metadata/services',
            'pro': 'http://ws.soa.ctripcorp.com/core/metadata/services/'
        };
        this.SOA_ServiceInfo_Url_Yun = {
            'FRA-AWS': 'http://region.fraaws.tripws.com/ctrip/fx/soacore/metadata/services/',
            'SIN-AWS': 'http://region.sinaws.tripws.com/ctrip/fx/soacore/metadata/services/',
            'SHA-ALI': 'http://region.shaali.tripws.com/ctrip/fx/soacore/metadata/services/',
        };
        this.SOA_Canary_Gateway_Url = {
            'fws': 'http://canary.gateway.fx.fws.qa.nt.ctripcorp.com/',
            'lpt': 'http://canary.gateway.fx.fws.qa.nt.ctripcorp.com/',
            'uat': 'http://canary.gateway.fx.uat.qa.nt.ctripcorp.com/',
            'pro': 'http://canary.gateway.fx.ctripcorp.com/'
        };
        this.SOA_Canary_Gateway_Yun = {
            'FRA-AWS': 'http://canarygateway.fx.fraaws.tripws.com/',
            'SIN-AWS': 'http://canarygateway.fx.sinaws.tripws.com/',
            'SHA-ALI': 'http://canarygateway.fx.shaali.tripws.com/'
        };
        this.SOA_WebApi_Url = {
            'fws': 'http://webapi.soa.fws.qa.nt.ctripcorp.com/api/',
            'lpt': 'http://webapi.soa.fws.qa.nt.ctripcorp.com/api/',
            'uat': 'http://webapi.soa.uat.qa.nt.ctripcorp.com/api/',
            'pro': 'http://webapi.soa.ctripcorp.com/api/'
        };
        this.SOA_WebApi_Url_Yun = {
            'FRA-AWS': 'http://webapi.soa.fraaws.tripws.com/api/',
            'SHA-ALI': 'http://webapi.soa.shaali.tripws.com/api/',
            'SIN-AWS': 'http://webapi.soa.sinaws.tripws.com/api/'
        };
        this.initPromise = false;
    }
    init() {
        if (!this.initPromise) {
            this.initPromise = this.getQconfigFileName().then((qconfigFileName) => {
                const _qconfigName = qconfigFileName || '';
                const soaQConfig = node_vampire_qconfig_1.default.getConfig(`100012112:artemis-reserved${_qconfigName}.properties`);
                const canaryGatewayQConfig = node_vampire_qconfig_1.default.getConfig(`100012112:soa-reserved${_qconfigName}.properties`);
                return Promise.all([soaQConfig.get(), canaryGatewayQConfig.get()]).then((args) => {
                    if (args[0]) {
                        args[0]['artemis.client.soa.metadata-service.url'] && (this.serviceInfoUrl = this.checkUrl(args[0]['artemis.client.soa.metadata-service.url']));
                        args[0]['artemis.client.soa.client.webapi-service.url'] && (this.SOAWebApiUrl = this.checkUrl(args[0]['artemis.client.soa.client.webapi-service.url']));
                    }
                    args[1] && args[1]['soa.canary.gateway.url'] && (this.SOACanaryGatewayUrl = this.checkUrl(args[1]['soa.canary.gateway.url']));
                    soaQConfig.on('change', (datas) => {
                        const ret = datas.configData;
                        ret['artemis.client.soa.metadata-service.url'] && (this.serviceInfoUrl = this.checkUrl(ret['artemis.client.soa.metadata-service.url']));
                        ret['artemis.client.soa.client.webapi-service.url'] && (this.SOAWebApiUrl = this.checkUrl(ret['artemis.client.soa.client.webapi-service.url']));
                    });
                    canaryGatewayQConfig.on('change', (datas) => {
                        const ret = datas.configData;
                        ret['soa.canary.gateway.url'] && (this.SOACanaryGatewayUrl = this.checkUrl(ret['soa.canary.gateway.url']));
                    });
                    return;
                });
            }).catch((e) => {
                console.log('[node-vampire-soa-client] Init config error, ', e);
                delete this.initPromise;
                throw e;
            });
        }
        return this.initPromise;
    }
    //新增ali回源国内的处理策略
    getQconfigFileName() {
        return new Promise((resolve, reject) => {
            Promise.all([node_vampire_foundation_framework_1.default.getServerProperties('*'), node_vampire_foundation_framework_1.default.getEnv(), node_vampire_foundation_framework_1.default.getIDC(), node_vampire_foundation_framework_1.default.getSubEnv()]).then((args) => {
                let serverProperties = args[0];
                this.Env = args[1];
                let idc = args[2];
                this.subEnv = args[3];
                this.AppID = node_vampire_foundation_framework_1.default.getAppID();
                this.idc = idc || 'NTGXH';
                this.serviceInfoUrl = this.Env === 'pro' && this.SOA_ServiceInfo_Url_Yun[this.idc] ? this.SOA_ServiceInfo_Url_Yun[this.idc] : this.SOA_ServiceInfo_Url[this.Env];
                this.SOACanaryGatewayUrl = this.Env === 'pro' && this.SOA_Canary_Gateway_Yun[this.idc] ? this.SOA_Canary_Gateway_Yun[this.idc] : this.SOA_Canary_Gateway_Url[this.Env];
                this.SOAWebApiUrl = this.Env === 'pro' && this.SOA_WebApi_Url_Yun[this.idc] ? this.SOA_WebApi_Url_Yun[this.idc] : this.SOA_WebApi_Url[this.Env];
                let qconfigName = null;
                if (serverProperties['tenant'] && serverProperties['cloudprovider'] && serverProperties['region'] && serverProperties['idc']) {
                    let isPci = serverProperties['pci'] && serverProperties['pci'] == 'true' ? 'true' : 'false';
                    qconfigName = `_${serverProperties['tenant'].toLowerCase()}_${serverProperties['cloudprovider'].toLowerCase()}_${serverProperties['region'].toLowerCase()}_${serverProperties['idc'].toLowerCase()}_${isPci}`;
                }
                resolve(qconfigName);
            }).catch((e) => {
                console.log('[node-vampire-soa-client] get aliYun qconfigFileName error, ', e);
                reject(e);
            });
        });
    }
    checkUrl(url) {
        if (url) {
            url = url.trim();
            if (!url.startsWith('http')) {
                url = 'http://' + url;
            }
            if (url && !/\/$/.test(url)) {
                url = url + '/';
            }
        }
        return url;
    }
}
exports.appConfig = new soaConfig();

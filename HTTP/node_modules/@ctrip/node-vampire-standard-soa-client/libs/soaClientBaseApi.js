"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SoaClientBaseApi = void 0;
const node_vampire_http_1 = __importDefault(require("@ctrip/node-vampire-http"));
//import { tripLog } from '@ctrip/node-vampire-triplog';
const soaMonitor_1 = require("./utils/soaMonitor");
const appConfig_1 = require("./utils/appConfig");
const node_vampire_appconfig_1 = __importDefault(require("@ctrip/node-vampire-appconfig"));
const node_vampire_util_1 = __importDefault(require("@ctrip/node-vampire-util"));
const node_vampire_cat_1 = __importDefault(require("@ctrip/node-vampire-cat"));
const M = new soaMonitor_1.SOAMonitor();
const ENUM_CON_MODE = soaMonitor_1.SOAMonitor.ENUM_CON_MODE;
const package_json_1 = __importDefault(require("../package.json"));
let frameworkversion = package_json_1.default.version;
class SoaClientBaseApi {
    /* 初始化
     * @param {Object} opts
     * @param {String} opts.serviceCode serviceCode //2019/07/11 新增，为了BU尽可能少的修改代码
     * @param {String} opts.serviceId serviceId
     * @param {String} opts.subEnv subEnv * 对于serviceMesh 指定子环境是无效的
     * @param {String} opts.serviceTimeout  设置调用timeout，默认为server.timeout 120000(2mins)
     * @param {String} opts.soaServerUrl 可以覆盖IP (需要加上协议)
     * @param {boolean} opts.originalResponse 是否返回原始报文 (headers,body,statusCode)
     * @param {Object} opts.agent 设置http agent (https://nodejs.org/dist/latest-v10.x/docs/api/http.html#http_class_http_agent)
     */
    constructor(opts) {
        this.serviceId = null;
        this.serviceCode = null;
        this.serviceTimeout = null;
        this.agent = null;
        this.url = null;
        this.format = 'json';
        this.headers = null;
        this.SOAInitCache = null;
        this.subEnv = null;
        this.soaClientType = null;
        this.responseUtils = null;
        this.userId = null;
        this.originalResponse = false;
        if (!opts.serviceId && !opts.serviceCode) {
            throw new TypeError(`[@ctrip/node-vampire-soa-client] ${opts.soaClientType} client error: serviceId or serviceCode is required`);
        }
        node_vampire_cat_1.default.event('Node.node-vampire-standard-soa-client.version', frameworkversion);
        this.serviceId = opts.serviceId || null;
        this.serviceCode = opts.serviceCode || null;
        this.serviceTimeout = opts.serviceTimeout || node_vampire_appconfig_1.default['SOA.Timeout'] || 0;
        this.agent = opts.agent || null;
        this.url = opts['soaServerUrl'] ? appConfig_1.appConfig.checkUrl(opts['soaServerUrl']) : null; // 可用于:mock地址等
        /** dashboard log */
        M.CtriputilCountSOAClient({ val: 1, serviceCode: this.serviceId, frameworkversion: frameworkversion });
        this.format = opts.format || 'json';
        this.headers = null;
        this.subEnv = opts.subEnv || null;
        this.soaClientType = opts.soaClientType;
        this.originalResponse = opts.originalResponse;
        this.baseInit();
    }
    baseInit() {
        if (this.SOAInitCache)
            return this.SOAInitCache;
        this.SOAInitCache = appConfig_1.appConfig.init().then(() => this._getServiceInfo())
            .then(() => {
            if (!this.serviceId && !this.serviceCode) {
                throw new TypeError('[@ctrip/node-vampire-soa-client] error: serviceId or serviceCode is required');
            }
            this.responseUtils = new ResponseUtils({ serviceId: this.serviceId, subEnv: this.subEnv });
            return Promise.resolve();
        }).catch((err) => {
            this.SOAInitCache = null;
            if (node_vampire_appconfig_1.default.debug) {
                console.error('[@ctrip/node-vampire-soa-client]', 'Request Url Error:', err);
            }
            node_vampire_cat_1.default.error(`[@ctrip/node-vampire-soa-client].${this.soaClientType}.init.error`, err);
            throw err;
        });
        return this.SOAInitCache;
    }
    _getServiceInfo(retryTimes) {
        retryTimes = retryTimes || 0;
        if (this.serviceId) {
            return Promise.resolve();
        }
        let url = appConfig_1.appConfig.serviceInfoUrl + this.serviceCode;
        return (0, node_vampire_http_1.default)(url).then((body) => {
            let result = null;
            try {
                result = JSON.parse(body);
            }
            catch (e) {
                node_vampire_cat_1.default.event(`[@ctrip/node-vampire-soa-client].${this.serviceCode}.getServiceInfo.Error`, body);
                throw Error(`[@ctrip/node-vampire-soa-client].${this.serviceCode}.getServiceInfo.Error: ${body}`);
            }
            if (result && result['serviceId']) {
                this.serviceId = result['serviceId'];
                return;
            }
            throw new Error(`Not found service by serviceCode: ${this.serviceCode}`);
        }).catch((err) => {
            if (retryTimes < 3) {
                retryTimes++;
                return this._getServiceInfo(retryTimes);
            }
            node_vampire_cat_1.default.event(`[@ctrip/node-vampire-soa-client].${this.serviceCode}.getServiceInfo.failed`, err && err.message, err);
            if (this.soaClientType === soaMonitor_1.CLIENT_TYPE_INTERNAL.WebApi) {
                return; //webapi 该值仅影响埋点
            }
            if (typeof err != 'string') {
                throw err;
            }
            else {
                throw new Error(`${this.serviceCode}` + err);
            }
        });
    }
    /*初始化
     * @param {Object} opts
     * @param {String} opts.method 方法名
     * @param {String=} opts.args 参数
     * @param {Object=} opts.query query参数
     * @param {String=} opts.format 格式
     * @param {String=} opts.skipBodyParse 是否跳过解析
     * @param {String=} opts.isResHeaders 是否返回headers
     * @param {String=} opts.isHandleServiceErrorManually 是否跳过解析直接返回数据。用于响应是JSON,但不符合SOA规范的报文
     * @param {Object=} opts.reqEphemeralParams 如 headers, reqTimeout, {headers: {'cookie': [req.headers.cookie]}, responseTimeout: 2000}
     */
    baseInvoke(opt) {
        let method = opt.method;
        M.CtriputilCountSOAClientInvoke({ val: 1, serviceCode: this.serviceId, frameworkversion });
        M.SOARequestCount({ val: 1, frameworkversion, connectionmode: ENUM_CON_MODE[this.soaClientType], format: this.format, webservice: this.serviceId, operation: this.serviceId + '.' + method });
        M.SOARequestSettingRequesttimeout({ val: this.serviceTimeout, frameworkversion, connectionmode: ENUM_CON_MODE[this.soaClientType], webservice: this.serviceId, operation: this.serviceId + '.' + method });
        M.SOARequestSettingRequesttimeoutDistribution({ val: this.serviceTimeout, frameworkversion, connectionmode: ENUM_CON_MODE[this.soaClientType], distribution: M.distribution(this.serviceTimeout), webservice: this.serviceId, operation: this.serviceId + '.' + method });
        let span = node_vampire_cat_1.default.span('SOA2Client', this.serviceId + '.' + method.toLowerCase());
        return span.run((done) => {
            let recording = () => {
                let t = (new Date().getTime() - span.__startTime) || 0; //修改invoke时间
                M.SOARequestLatency({ val: t, frameworkversion, connectionmode: ENUM_CON_MODE[this.soaClientType], webservice: this.serviceId, operation: this.serviceId + '.' + method });
                M.SOARequestLatencyDistribution({ val: 1, frameworkversion, connectionmode: ENUM_CON_MODE[this.soaClientType], distribution: M.distribution(t), webservice: this.serviceId, operation: this.serviceId + '.' + method });
                done();
            };
            return this._invoke(opt).then((result) => {
                recording();
                return result;
            }).catch((err) => {
                if (node_vampire_appconfig_1.default.debug) {
                    console.log(`[node-vampire-soa-client] ${this.soaClientType} invoke error.`, err);
                }
                done();
                return Promise.reject(err);
            });
        });
    }
    _invoke(opt) {
        let method = opt.method, args = opt.args, format = (opt.format === 'json' || opt.format === 'bjjson') ? null : opt.format, skipBodyParse = opt.skipBodyParse, query = opt.query, isResHeaders = opt.isResHeaders, isHandleServiceErrorManually = opt.isHandleServiceErrorManually || node_vampire_appconfig_1.default['SOA.HandleServiceErrorManually'] || false, hardUrl = opt.hardUrl; // 兼容一些特殊场景下应用指定的重定向URL
        // 保持原始响应Body，如处理大数，JSON.parse丢失精度
        let isSkipBodyParse = format || skipBodyParse;
        // 如果不是通过url访问的，是app内部invoke的，这个span会为空，导致报错引起内存泄漏
        // 容错办法：新增一个catspan
        let span = node_vampire_cat_1.default.getActiveSpan() || node_vampire_cat_1.default.span(null, 'InterSpan', method);
        let catMessageId = span.__messageId;
        let catInheritValueOfReqEntity = span.getInheritValue('reqEntity') || null;
        let traceContext = span.getTraceContext ? span.getTraceContext(true).getContext() : false;
        let reqHeaders = catInheritValueOfReqEntity ? catInheritValueOfReqEntity.headers : {};
        let reqUrl;
        method = ('' + method).toLowerCase();
        reqUrl = hardUrl || (this.url + (format || this.format) + '/' + encodeURIComponent(method));
        if (query) {
            let _query = new URLSearchParams(query);
            if (this.subEnv) {
                !_query.get('subEnv') && _query.set('subEnv', this.subEnv);
                !_query.get('subenv') && _query.set('subenv', this.subEnv);
            }
            const parseQuery = _query.toString();
            if (parseQuery !== '') {
                reqUrl += '?' + parseQuery;
            }
        }
        else if (this.soaClientType === soaMonitor_1.CLIENT_TYPE_INTERNAL.WebApi && this.subEnv) {
            reqUrl += '?subenv=' + this.subEnv;
        }
        let requestBody = typeof args === 'string' ? args : JSON.stringify(args || {});
        node_vampire_cat_1.default.event('SOA2Client.reqSize', reqUrl, Buffer.byteLength(requestBody));
        const rootMessageId = (span.__root && span.__root.__outerIds) ? span.__root.__outerIds['x-cat-root-id'] : span.__messageId;
        let headers = {
            'RootMessageId': rootMessageId,
            'CurrentMessageId': catMessageId,
            'ServerMessageId': node_vampire_cat_1.default.getMessageId(),
            'app': node_vampire_appconfig_1.default['AppID'],
            'SOA20-Client-AppId': node_vampire_appconfig_1.default['AppID'],
            'SOA20-Client-Idc': appConfig_1.appConfig['idc'],
            'x-soa20-client-content-length': Buffer.byteLength(requestBody),
            'X-Client-SubEnv': this.subEnv || appConfig_1.appConfig['subEnv'],
        };
        // 2019/7/17新增：应用可自定义headers
        if (opt.reqEphemeralParams && opt.reqEphemeralParams.headers && (node_vampire_util_1.default.type(opt.reqEphemeralParams.headers) == 'object')) {
            headers = Object.assign({}, node_vampire_util_1.default.copy(opt.reqEphemeralParams.headers), headers);
        }
        // 2019/7/17 新增：预留全局this.headers,同一个实例下的接口共享this.headers值
        this.headers && (headers = Object.assign({}, node_vampire_util_1.default.copy(this.headers), headers));
        reqHeaders && reqHeaders['x-soa20-caller'] && (headers['x-soa20-caller'] = reqHeaders['x-soa20-caller']);
        let traceSubEnv = null;
        /** 新增全链路headers设置 */
        if (traceContext) {
            /** traceContext中的值都设置到header中（增加x-ctx prefix) */
            for (let key in traceContext) {
                if (Object.prototype.hasOwnProperty.call(traceContext, key)) {
                    let newKey = 'x-ctx-' + key;
                    headers[newKey] = traceContext[key];
                    if (key === 'subenv') {
                        traceSubEnv = traceContext[key];
                    }
                }
            }
        }
        /** 判断是否需要新增堡垒测试的头部（参考自java代码）*/
        let canaryValue = null;
        // 判断context中是否有新的堡垒标识
        canaryValue = traceContext && traceContext['canary-req'];
        // 判断header中是否有老的堡垒标识 或者是否有新的堡垒标识
        if (!canaryValue) {
            canaryValue = (reqHeaders && reqHeaders['x-ctrip-canary-req']) || (reqHeaders && reqHeaders['x-ctx-canary-req']) || (reqHeaders && reqHeaders['x-ctx-canaryreq']);
        }
        if (canaryValue == '1') { // 如果是有堡垒标示
            headers['x-ctrip-canary-req'] = '1';
            let localIP = node_vampire_util_1.default.getHostIp();
            if (localIP) {
                headers['X-Forwarded-For'] = localIP;
            }
            if (this.soaClientType != soaMonitor_1.CLIENT_TYPE_INTERNAL.Direct)
                node_vampire_cat_1.default.event('Canary.Request', 'Send. Url:' + reqUrl);
        }
        node_vampire_cat_1.default.event('RemoteCall', 'PigeonRequest', headers.ServerMessageId); // 很重要，通过这个Event中的message id,可以在Log View查看子的Message Tree
        let httpOpt = {
            'agent': this.agent,
            'contentType': 'response',
            'headers': headers
        };
        if (this.serviceTimeout > 0) {
            httpOpt['responseTimeout'] = this.serviceTimeout;
        }
        opt.reqEphemeralParams && opt.reqEphemeralParams.responseTimeout > 0 && (httpOpt['responseTimeout'] = opt.reqEphemeralParams.responseTimeout); // 2019/7/17 新增,用户可自定义超时时间
        return this.childInvoke({ method, reqUrl, httpOpt, requestBody }).then((res) => {
            let ret = null, status = '';
            let body = isSkipBodyParse ? res.body : res.body.toString();
            reqHeaders && reqHeaders['x-soa20-caller'] && node_vampire_cat_1.default.event('SOA2Client.caller', reqHeaders['x-soa20-caller']);
            span.__properties = {
                'SOA2Client.serviceApp': res.headers['soa20-service-appid'],
                'SOA2Client.serviceIP': res.headers['soa20-service-hostip'],
                'SOA2Client.serviceIdc': res.headers['soa20-service-idc'],
                'SOA2Client.caller': reqHeaders && reqHeaders['x-soa20-caller'] || null,
                [ENUM_CON_MODE.CONNECTION_REQUEST_TIMEOUT]: this.agent && this.agent.timeout || ENUM_CON_MODE.connectionRequestTimeout,
                [ENUM_CON_MODE.CONNECT_TIMEOUT]: httpOpt['responseTimeout'],
                [ENUM_CON_MODE.SOCKET_TIMEOUT]: this.agent && this.agent.timeout || ENUM_CON_MODE.socketTimeout,
                [ENUM_CON_MODE.MACHINE_SUB_ENV]: appConfig_1.appConfig.subEnv,
                [ENUM_CON_MODE.CONFIGURED_SUB_ENV]: this.subEnv,
                [ENUM_CON_MODE.CONTEXT_SUB_ENV]: traceSubEnv
            };
            if (this.originalResponse) {
                node_vampire_cat_1.default.event('SOA2Client.resSize', (Buffer.isBuffer(res.body) ? Buffer.byteLength(res.body) : 0) + '');
                node_vampire_cat_1.default.event('SOA2Client.resCode', res.statusCode);
                node_vampire_cat_1.default.event('SOA2Client.serviceApp', res.headers['soa20-service-appid']);
                node_vampire_cat_1.default.event('SOA2Client.serviceIP', res.headers['soa20-service-hostip']);
                return {
                    headers: res.headers,
                    body: res.body,
                    statusCode: res.statusCode
                };
            }
            if (res.statusCode && res.statusCode >= 300) {
                return Promise.reject({
                    errorType: 'SOA2Client.errorStatusCode',
                    statusCode: res.statusCode,
                    message: body,
                    headers: res.headers,
                    stack: new Error('Error: ' + body).stack
                });
            }
            if (isSkipBodyParse) {
                ret = body;
            }
            else {
                try {
                    ret = JSON.parse(body);
                }
                catch (e) {
                    try {
                        //2020/3/13 包含有 '\u0010' 这样字符串的转义
                        ret = JSON.parse(JSON.parse(JSON.stringify(body).replace(/(^|[^\\])(\\u\d{4})/, '$1\\$2')));
                    }
                    catch (err) {
                        if (node_vampire_appconfig_1.default.debug) {
                            console.error('[SoaWebApi]', 'Parse Json Error:', reqUrl, JSON.stringify(headers, null, 2), body, e);
                        }
                        // 当解析response body出错时，将错误的body记录到cat中。
                        node_vampire_cat_1.default.error('SOA2Client.responseParseJsonError', body);
                        throw new Error(`${this.serviceId},method:${method},Error Parse Json: ` + body);
                    }
                }
                let responseStatus = null;
                try {
                    responseStatus = ret.ResponseStatus || ret.responseStatus;
                    status = responseStatus.ack || responseStatus.Ack;
                }
                catch (e) {
                    if (node_vampire_appconfig_1.default.debug) {
                        console.log('[SOA.Mesh] invoke status error.', e);
                    }
                }
            }
            node_vampire_cat_1.default.event('SOA2Client.resSize', (Buffer.isBuffer(res.body) ? Buffer.byteLength(res.body) : 0) + '');
            node_vampire_cat_1.default.event('SOA2Client.resCode', isSkipBodyParse ? res.statusCode : status);
            node_vampire_cat_1.default.event('SOA2Client.serviceApp', res.headers['soa20-service-appid']);
            node_vampire_cat_1.default.event('SOA2Client.serviceIP', res.headers['soa20-service-hostip']);
            isResHeaders && !isSkipBodyParse ? ret['SOA.ResponseHeaders'] = res.headers : '';
            // const clientInfo: object = this.responseUtils.getOrCreateClientInfo({ format, operation: method, serviceURI: reqUrl, ack: status.toLowerCase(), status: status.toLowerCase() });
            // tripLog.custom({
            //     type: 'info',
            //     title: '@trip/node-vampire-standard-soa-client',
            //     addInfo: clientInfo,
            //     message: `[SOA2Client] ${ENUM_CON_MODE[this.soaClientType]} client Info`
            // })
            // isSkipBodyParse: 包含强制跳过bodyparse和指定format不是json的自定义序列化器
            // isHandleServiceErrorManually: 用于响应是JSON,但不符合SOA规范的报文
            if (isSkipBodyParse || isHandleServiceErrorManually) {
                return Promise.resolve(ret);
            }
            else { //是否需要自行处理错误
                /* （暂缓修改）修改responseStatus.ack的逻辑，满足条件之一则认为请求失败
                 *   1. 没有responseStatus属性
                 *   2. status.toLowerCase() == 'failure' (json和bjjson大小写不敏感)
                 */
                let SOAResponseFailedStatus = (status.toLowerCase() === 'failure');
                if (SOAResponseFailedStatus) {
                    M.SOAExceptionCount({ val: 1, frameworkversion, connectionmode: ENUM_CON_MODE[this.soaClientType], exceptionname: 'Ctriputil.badRequest', exceptiontype: status, webservice: this.serviceId, operation: this.serviceId + '.' + method });
                }
                node_vampire_cat_1.default.event('SOA2Client.responseStatusAckValue', status);
                if (SOAResponseFailedStatus) {
                    return Promise.reject({
                        errorType: 'SOA2Client.AckFailure',
                        statusCode: res.statusCode,
                        message: body,
                        headers: res.headers,
                        stack: new Error('ResponseStatus Ack is failure or missing: ' + JSON.stringify(ret)).stack
                    });
                }
                else {
                    return Promise.resolve(ret);
                }
            }
        }).catch((e) => {
            node_vampire_cat_1.default.event('SOA2Client.requestFailure', reqUrl);
            node_vampire_cat_1.default.event('SOA2Client.resCode', 'failure');
            node_vampire_cat_1.default.error(e, 'SOA2Client.invalidRequest');
            M.SOAExceptionCount({ val: 1, frameworkversion, connectionmode: ENUM_CON_MODE[this.soaClientType], exceptionname: e.name || 'Ctriputil.invalidRequest', exceptiontype: e.code || 'invalidrequest', webservice: this.serviceId, operation: this.serviceId + '.' + method });
            if (node_vampire_appconfig_1.default.debug) {
                console.error('[SOA.Mesh]', 'Request Url Error:', reqUrl, JSON.stringify(headers, null, 2), e);
            }
            throw e;
        });
    }
    // 设置需传递的headers值
    addEphemeralHeader(reqHeaders) {
        if (node_vampire_util_1.default.type(reqHeaders) === 'object') {
            this.headers = reqHeaders;
        }
    }
    urlCheck(str) {
        return str.replace(/[^-.0-9a-z]/ig, '-');
    }
}
exports.SoaClientBaseApi = SoaClientBaseApi;
class ResponseUtils {
    constructor(opts) {
        this.responseFlag = null;
        this.responseCodeDetail = null;
        this.serviceId = null;
        this.subEnv = null;
        this.clientInfo = {};
        this.serviceId = opts.serviceId;
        this.subEnv = opts.subEnv;
        this.serviceId && (this.clientInfo['Service'] = this.serviceId);
        let subEnv = this.subEnv;
        if (!this.subEnv) {
            subEnv = appConfig_1.appConfig.subEnv;
        }
        this.clientInfo["SubEnv"] = subEnv;
        this.clientInfo["Version"] = frameworkversion;
        if (appConfig_1.appConfig['Env'] === 'fws') {
            this.subEnv && (this.clientInfo["ConfiguredSubEnv"] = this.subEnv);
            appConfig_1.appConfig.subEnv && (this.clientInfo["MachineSubEnv"] = appConfig_1.appConfig.subEnv);
        }
    }
    readResponseFlag(headers) {
        if (headers && headers[soaMonitor_1.Sidecar.RESPONSE_FLAG_HEADER_NAME]) {
            this.responseFlag = headers[soaMonitor_1.Sidecar.RESPONSE_FLAG_HEADER_NAME];
        }
        if (headers && headers[soaMonitor_1.Sidecar.RESPONSE_CODE_DETAIL_HEADER_NAME]) {
            this.responseCodeDetail = headers[soaMonitor_1.Sidecar.RESPONSE_CODE_DETAIL_HEADER_NAME];
        }
    }
    logResponseFlag(statusCode) {
        if (this.responseFlag) {
            const data = {};
            data[soaMonitor_1.Sidecar.STATUS_CODE] = statusCode;
            if (this.responseCodeDetail) {
                data[soaMonitor_1.Sidecar.SIDECAR_RESPONSE_CODE_DETAIL] = this.responseCodeDetail;
            }
            node_vampire_cat_1.default.event(soaMonitor_1.Sidecar.SIDECAR_RESPONSE_FLAG, this.responseFlag, data);
        }
    }
    checkEnvoy503Exception(opts) {
        if (opts.response.statusCode != 503) {
            return;
        }
        if (soaMonitor_1.Sidecar.UH === this.responseFlag || soaMonitor_1.Sidecar.UC === this.responseFlag) {
            const tags = this.getOrCreateClientInfo(opts);
            const message = this.getBaseUriNotFoundExceptionMessage();
            tags[soaMonitor_1.Sidecar.RESPONSE_FLAG_HEADER_NAME] = this.responseFlag;
            if (this.responseCodeDetail) {
                tags[soaMonitor_1.Sidecar.RESPONSE_CODE_DETAIL_HEADER_NAME] = this.responseCodeDetail;
            }
            throw new Error(message);
        }
    }
    getBaseUriNotFoundExceptionMessage() {
        let errorMessage = '';
        errorMessage = `Failed to obtain available instances of the ${this.serviceId} service, causing the client to be unable to run. Possible reasons include: \r\n`;
        if (appConfig_1.appConfig.Env === 'fws') {
            const sorce = appConfig_1.appConfig.subEnv != this.subEnv ? "ServiceMesh does not support applications specifying sub-environments." : "";
            if (this.subEnv) {
                errorMessage += `1)${sorce},The current machine’s sub-environment is ${appConfig_1.appConfig.subEnv}, but no available instances were found for the ${appConfig_1.appConfig.subEnv} sub-environment. Please contact the service owner to deploy new instances for the ${appConfig_1.appConfig.subEnv} sub-environment.\r\n`;
            }
            else {
                errorMessage += `1) No available instances were found for ${appConfig_1.appConfig.Env}.\r\n`;
            }
        }
        else {
            errorMessage += `"1) No available instances were found.\r\n`;
        }
        errorMessage += `2) The service ID (${this.serviceId}) does not match the one registered in the SOA Repository or is not registered.\r\n`;
        return errorMessage;
    }
    getOrCreateClientInfo(opts) {
        const clientInfo = {};
        clientInfo["Format"] = opts.format;
        clientInfo["Operation"] = opts.operation;
        clientInfo["ServiceURI"] = opts.serviceURI;
        clientInfo["Ack"] = opts.ack;
        clientInfo["skipBodyParse"] = opts.skipBodyParse || false;
        clientInfo["Status"] = opts.status; //success,failure
        return Object.assign({}, this.clientInfo, clientInfo);
    }
}

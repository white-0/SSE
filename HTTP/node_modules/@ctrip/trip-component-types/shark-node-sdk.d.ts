import 'http';

type SharkSDKType = typeof import('@ctrip/shark-sdk');

declare module 'http' {
  export interface IncomingMessage {
    shark: SharkContext;
  }
}

export interface SharkBaseContext {
  getLocale(): string;
  setLocale(locale: string);
  getGroup(): string;
  setGroup(group: string);
  getAll(appId: number | string): Record<string, string>;
  get(key: string, options?: { appId?: number | string; defaultValue: string }): string;
  directGet(key: string, options?: { appId?: number | string; defaultValue: string }): string;
  getPluralTranslation: SharkSDKType['getPluralTranslation'];
  NumberFormat(): NumberFormatter;
  DateTimeFormat(timezone: shark.Timezone): DateTimeFormatter;
  DurationFormat(): DurationFormatter;
  MeasurementFormat(): MeasurementFormatter;
}

export interface DateTimeFormatter {
  mdShortString(timeStamp: string | number): string;
  mdFullString(timeStamp: string | number): string;
  mdeFullString(timeStamp: string | number): string;
  mdeShortString(timeStamp: string | number): string;
  mdhmFullString(timeStamp: string | number): string;
  mdhmShortString(timeStamp: string | number): string;
  mdhmsFullString(timeStamp: string | number): string;
  mdhmsShortString(timeStamp: string | number): string;
  ymFullString(timeStamp: string | number): string;
  ymShortString(timeStamp: string | number): string;
  ymdFullString(timeStamp: string | number): string;
  ymdShortString(timeStamp: string | number): string;
  ymdhmFullString(timeStamp: string | number): string;
  ymdhmShortString(timeStamp: string | number): string;
  ymdhmsFullString(timeStamp: string | number): string;
  ymdhmsShortString(timeStamp: string | number): string;
  ymdeFullString(timeStamp: string | number): string;
  ymdeShortString(timeStamp: string | number): string;
  ymdhmeFullString(timeStamp: string | number): string;
  ymdhmeShortString(timeStamp: string | number): string;
  ymdhmseFullString(timeStamp: string | number): string;
  ymdhmseShortString(timeStamp: string | number): string;
  hmeShortString(timeStamp: string | number): string;
  hmeFullString(timeStamp: string | number): string;
  hmseShortString(timeStamp: string | number): string;
  hmseFullString(timeStamp: string | number): string;
  eFullString(timeStamp: string | number): string;
  eShortString(timeStamp: string | number): string;
  mFullString(timeStamp: string | number): string;
  mShortString(timeStamp: string | number): string;
  hmString(timeStamp: string | number): string;
  hmsString(timeStamp: string | number): string;
  yString(timeStamp: string | number): string;
  mdhmeShortString(timeStamp: string | number): string;
  mdhmeFullString(timeStamp: string | number): string;
}

export interface NumberFormatter {
  decimalString(
    decimalNum: number | string,
    useGrouping?: boolean,
    minimumFractionDigits?: number,
    maximumFractionDigits?: number,
    extendOption?: {
      showPercentage?: boolean;
      numberFormatCustomized?: string;
      roundingMode?: shark.L10N_ROUNDING_MODE;
    },
  ): string;

  currencyString(
    decimalNum: number | string,
    currency?: string,
    useGrouping?: boolean,
    minimumFractionDigits?: number,
    maximumFractionDigits?: number,
    extendOption?: {
      currencyFormatCustomized?: string;
      numberFormatCustomized?: string;
      roundingMode?: shark.L10N_ROUNDING_MODE;
    },
  ): string;
}

export interface DurationFormatter {
  convertToString(duration: number, pattern: string, isAutoAbbr?: boolean, isFullName?: boolean): string;
}

export interface MeasurementFormatter {
  convert(number: string, fromType: shark.L10N_UNIT, toType: shark.L10N_UNIT, maximumFractionDigits?: number): string;

  convertToPreferences(
    number: string,
    fromType: shark.L10N_UNIT,
    preferencesUnit?: shark.L10N_UNIT_COLLECTION,
    maximumFractionDigits?: number,
  ): string;
}

export interface Options {
  appId?: number | string;
  logLevel?: shark.LOG_LEVEL;
}
export type UpdateEvent = { appId: number; pageId: number; locale: string }[];
export type Timezone =
  | -12
  | -11
  | -10
  | -9
  | -8
  | -7
  | -6
  | -5
  | -4
  | -3
  | -2
  | -1
  | 0
  | 1
  | 2
  | 3
  | 4
  | 5
  | 6
  | 7
  | 8
  | 9
  | 10
  | 11
  | 12;

export type SharkContext = SharkBaseContext;

export enum LOG_LEVEL {
  DEBUG = 0,
  INFO,
  WARNING,
  ERROR,
  NONE,
}
export enum L10N_ROUNDING_MODE {
  DOWN,
  HALF_UP,
  HALF_EVEN,
  UP,
}
export enum L10N_UNIT {
  Kilometer,
  Mile,
  SquareMeter,
  SquareFeet,
  Celsius,
  Fahrenheit,
  Meter,
  Feet,
  Kilogram,
  Pound,
}
export enum L10N_UNIT_COLLECTION {
  MetricUnit,
  ImperialUnit,
}

export interface SharkNodeSDK {
  init: SharkSDKType['init'];
  query: SharkSDKType['query'];
  getTranslation: SharkSDKType['getTranslation'];
  directGetTranslation: SharkSDKType['directGetTranslation'];
  getPluralTranslation: SharkSDKType['getPluralTranslation'];
  getAll: SharkSDKType['getAll'];
  dump: SharkSDKType['dump'];
  dumpKeys: SharkSDKType['dumpKeys'];
  getAppIdList: SharkSDKType['getAppIdList'];
  getLocaleList: SharkSDKType['getLocaleList'];
  registerUpdateEvent: SharkSDKType['registerUpdateEvent'];
  DateTimeFormat: SharkSDKType['DateTimeFormat'];
  NumberFormat: SharkSDKType['NumberFormat'];
  DurationFormat: SharkSDKType['DurationFormat'];
  MeasurementFormat: SharkSDKType['MeasurementFormat'];
  middleware: SharkSDKType['middleware'];
  koaMiddleware: SharkSDKType['koaMiddleware'];
  koa2Middleware: SharkSDKType['koa2Middleware'];
}
